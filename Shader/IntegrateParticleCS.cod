//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PARTICLE_SYSTEM_CONSTANTS
// {
//
//   float4 emissionPosition;           // Offset:    0 Size:    16
//   float2 emissionOffset;             // Offset:   16 Size:     8
//   float2 emissionSize;               // Offset:   24 Size:     8
//   float2 emisionConeAngle;           // Offset:   32 Size:     8
//   float2 emissionSpeed;              // Offset:   40 Size:     8
//   float2 emissionAngularSpeed;       // Offset:   48 Size:     8
//   float2 lifespan;                   // Offset:   56 Size:     8
//   float2 spawnDelay;                 // Offset:   64 Size:     8
//   float2 fadeDuration;               // Offset:   72 Size:     8
//   float4 emissionStartColor;         // Offset:   80 Size:    16
//   float4 emissionEndColor;           // Offset:   96 Size:    16
//   float currentTime;                 // Offset:  112 Size:     4 [unused]
//   float deltaTime;                   // Offset:  116 Size:     4
//   float _noiseScale;                 // Offset:  120 Size:     4 [unused]
//   float gravity;                     // Offset:  124 Size:     4
//   uint2 spriteSheetGrid;             // Offset:  128 Size:     8
//   uint maxParticleCount;             // Offset:  136 Size:     4
//   float3 direction;                  // Offset:  144 Size:    12
//   float strength;                    // Offset:  156 Size:     4
//   row_major float4x4 nodeWorldTransform;// Offset:  160 Size:    64 [unused]
//   row_major float4x4 worldTransform; // Offset:  224 Size:    64 [unused]
//   float2 radius;                     // Offset:  288 Size:     8 [unused]
//   bool loop;                         // Offset:  296 Size:     4
//   int type;                          // Offset:  300 Size:     4
//      = 0x00000000 
//   int isStatic;                      // Offset:  304 Size:     4
//
// }
//
// Resource bind info for particleBuffer
// {
//
//   struct Particle
//   {
//       
//       int state;                     // Offset:    0
//       float4 color;                  // Offset:    4
//       float3 position;               // Offset:   20
//       float mass;                    // Offset:   32
//       float angle;                   // Offset:   36
//       float angularSpeed;            // Offset:   40
//       float3 velocity;               // Offset:   44
//       float lifespan;                // Offset:   56
//       float age;                     // Offset:   60
//       float2 size;                   // Offset:   64
//       uint chip;                     // Offset:   72
//
//   } $Element;                        // Offset:    0 Size:    76
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleBuffer                        UAV  struct         r/w             u0      1 
// PARTICLE_SYSTEM_CONSTANTS         cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB9[20], immediateIndexed
dcl_uav_structured u0, 76
dcl_input vThreadID.x
dcl_temps 13
dcl_thread_group 16, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- dtid.x; vThreadID.y <- dtid.y; vThreadID.z <- dtid.z
//
#line 24 "C:\Users\2240225\Desktop\graphicEngine4\Shader\IntegrateParticleCS.hlsl"
mov r0.x, vThreadID.x  // r0.x <- id

#line 26
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r1.x, r0.x, l(0), u0.xxxx  // r1.x <- p.state
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r2.x, r0.x, l(4), u0.xxxx  // r2.x <- p.color.x
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r2.y, r0.x, l(8), u0.xxxx  // r2.y <- p.color.y
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r2.z, r0.x, l(12), u0.xxxx  // r2.z <- p.color.z
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r2.w, r0.x, l(16), u0.xxxx  // r2.w <- p.color.w
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r3.x, r0.x, l(20), u0.xxxx  // r3.x <- p.position.x
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r3.y, r0.x, l(24), u0.xxxx  // r3.y <- p.position.y
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r3.z, r0.x, l(28), u0.xxxx  // r3.z <- p.position.z
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(32), u0.xxxx  // r0.y <- p.mass
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r3.w, r0.x, l(36), u0.xxxx  // r3.w <- p.angle
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r0.z, r0.x, l(40), u0.xxxx  // r0.z <- p.angularSpeed
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r4.x, r0.x, l(44), u0.xxxx  // r4.x <- p.velocity.x
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r4.y, r0.x, l(48), u0.xxxx  // r4.y <- p.velocity.y
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r4.z, r0.x, l(52), u0.xxxx  // r4.z <- p.velocity.z
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r0.w, r0.x, l(56), u0.xxxx  // r0.w <- p.lifespan
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r4.w, r0.x, l(60), u0.xxxx
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r1.y, r0.x, l(64), u0.xxxx  // r1.y <- p.size.x
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r1.z, r0.x, l(68), u0.xxxx  // r1.z <- p.size.y
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r1.w, r0.x, l(72), u0.xxxx  // r1.w <- p.chip
mov r4.w, r4.w  // r4.w <- p.age

#line 28
add r4.w, r4.w, cb9[7].y

#line 30
ine r5.x, l(0, 0, 0, 0), cb9[18].z  // r5.x <- respawn

#line 31
lt r5.y, r0.w, r4.w
if_nz r5.y

#line 35
  if_nz r5.x

#line 37
    nop 
    mov r0.x, r0.x

#line 237 "C:\Users\2240225\Desktop\graphicEngine4\Shader\Particle.hlsli"
    nop 
    utof r5.x, r0.x
    utof r5.y, cb9[8].z
    div r5.x, r5.x, r5.y
    mul r5.x, r5.x, l(2.000000)
    mul r5.x, r5.x, l(3.141593)

#line 93
    sincos r5.x, null, r5.x
    mul r5.x, r5.x, l(43758.546875)
    frc r5.x, r5.x  // r5.x <- <Rand return value>

#line 237
    mov r5.x, r5.x  // r5.x <- f0

#line 238
    nop 
    mul r5.y, r5.x, l(3.141593)

#line 93
    sincos r5.y, null, r5.y
    mul r5.y, r5.y, l(43758.546875)
    frc r5.y, r5.y  // r5.y <- <Rand return value>

#line 238
    mov r5.y, r5.y  // r5.y <- f1

#line 239
    nop 
    mul r5.z, r5.y, l(3.141593)

#line 93
    sincos r5.z, null, r5.z
    mul r5.z, r5.z, l(43758.546875)
    frc r5.z, r5.z  // r5.z <- <Rand return value>

#line 239
    mov r5.z, r5.z  // r5.z <- f2

#line 240
    nop 
    mul r5.w, r5.z, l(3.141593)

#line 93
    sincos r5.w, null, r5.w
    mul r5.w, r5.w, l(43758.546875)
    frc r5.w, r5.w  // r5.w <- <Rand return value>

#line 240
    mov r5.w, r5.w  // r5.w <- f3

#line 242
    itof r6.y, l(0)  // r6.y <- offset.y

#line 243
    mov r6.w, -cb9[1].x
    add r6.w, r6.w, cb9[1].y
    mul r6.w, r5.x, r6.w
    add r6.w, r6.w, cb9[1].x  // r6.w <- radius

#line 248
    mul r7.x, r5.w, l(2.000000)
    mul r7.x, r7.x, l(3.141593)
    sincos null, r7.x, r7.x
    mul r6.x, r6.w, r7.x  // r6.x <- offset.x

#line 249
    mul r7.x, r5.w, l(2.000000)
    mul r7.x, r7.x, l(3.141593)
    sincos r7.x, null, r7.x
    mul r6.z, r6.w, r7.x  // r6.z <- offset.z

#line 251
    add r3.xyz, r6.xyzx, cb9[0].xyzx  // r3.x <- p.position.x; r3.y <- p.position.y; r3.z <- p.position.z

#line 256
    mul r6.x, r5.x, l(6.283185)  // r6.x <- phi

#line 257
    max r6.y, r5.z, cb9[2].x
    min r6.y, r6.y, cb9[2].y  // r6.y <- theta

#line 259
    sincos r6.z, null, r6.y  // r6.z <- sinTheta

#line 260
    sincos null, r7.y, r6.y  // r7.y <- cosTheta

#line 261
    sincos r6.y, null, r6.x  // r6.y <- sinPhi

#line 262
    sincos null, r6.x, r6.x  // r6.x <- cosPhi

#line 271
    mul r7.x, r6.x, r6.z  // r7.x <- localDir.x

#line 272
    mov r7.y, r7.y  // r7.y <- localDir.y

#line 273
    mul r7.z, r6.y, r6.z  // r7.z <- localDir.z

#line 277
    mov r6.x, cb9[18].w
    switch r6.x

#line 279
      case l(0)

#line 281
      dp3 r6.w, cb9[9].xyzx, cb9[9].xyzx
      lt r6.w, r6.w, l(0.000001)
      if_nz r6.w

#line 283
        itof r6.xyz, l(0, 0, 0, 0)  // r6.x <- worldDir.x; r6.y <- worldDir.y; r6.z <- worldDir.z

#line 284
      else   // Prior locations: r6.z <- sinTheta; r6.y <- sinPhi

#line 288
        dp3 r6.w, cb9[9].xyzx, cb9[9].xyzx
        rsq r6.w, r6.w
        mul r8.xyz, r6.wwww, cb9[9].zxyz  // r8.x <- dir.z; r8.y <- dir.x; r8.z <- dir.y

#line 289
        mov r6.w, -r8.z
        max r6.w, r6.w, r8.z
        lt r6.w, r6.w, l(0.999000)
        itof r9.xyz, l(0, 1, 0, 0)
        itof r10.xyz, l(1, 0, 0, 0)
        movc r9.xyz, r6.wwww, r9.xyzx, r10.xyzx  // r9.x <- up.x; r9.y <- up.y; r9.z <- up.z

#line 290
        mul r10.xyz, r8.yzxy, r9.zxyz
        mul r9.xyz, r8.xyzx, r9.xyzx
        mov r9.xyz, -r9.xyzx
        add r9.xyz, r9.xyzx, r10.xyzx
        dp3 r6.w, r9.xyzx, r9.xyzx
        rsq r6.w, r6.w
        mul r9.xyz, r6.wwww, r9.xyzx  // r9.x <- right.y; r9.y <- right.z; r9.z <- right.x

#line 291
        mul r10.xyz, r8.zxyz, r9.yzxy
        mul r11.xyz, r8.xyzx, r9.xyzx
        mov r11.xyz, -r11.xyzx
        add r10.xyz, r10.xyzx, r11.xyzx
        dp3 r6.w, r10.xyzx, r10.xyzx
        rsq r6.w, r6.w
        mul r10.xyz, r6.wwww, r10.xyzx  // r10.x <- forward.x; r10.y <- forward.y; r10.z <- forward.z

#line 292
        mov r11.x, r9.z  // r11.x <- rotMatrix._m00
        mov r11.y, r8.y  // r11.y <- rotMatrix._m10
        mov r11.z, r10.x  // r11.z <- rotMatrix._m20
        mov r12.x, r9.x  // r12.x <- rotMatrix._m01
        mov r12.y, r8.z  // r12.y <- rotMatrix._m11
        mov r12.z, r10.y  // r12.z <- rotMatrix._m21
        mov r10.x, r9.y  // r10.x <- rotMatrix._m02
        mov r10.y, r8.x  // r10.y <- rotMatrix._m12
        mov r10.z, r10.z  // r10.z <- rotMatrix._m22

#line 295
        dp3 r6.x, r7.xyzx, r11.xyzx  // r6.x <- worldDir.x
        dp3 r6.y, r7.xyzx, r12.xyzx  // r6.y <- worldDir.y
        dp3 r6.z, r7.xyzx, r10.xyzx  // r6.z <- worldDir.z

#line 296
      endif 

#line 297
      break   // r6.w <- radius; r6.z <- sinTheta; r6.y <- sinPhi

#line 299
      case l(1)

#line 301
      mul r7.xyz, r7.xyzx, cb9[9].wwww
      add r3.xyz, r3.xyzx, r7.xyzx

#line 302
      mov r7.xyz, -r3.xyzx
      add r6.xyz, r7.xyzx, cb9[0].xyzx  // r6.x <- worldDir.x; r6.y <- worldDir.y; r6.z <- worldDir.z

#line 303
      break   // r6.z <- sinTheta; r7.y <- cosTheta; r6.y <- sinPhi; r7.x <- localDir.x; r7.y <- localDir.y; r7.z <- localDir.z

#line 305
      default 
      break 
    endswitch   // r6.x <- worldDir.x; r6.y <- worldDir.y; r6.z <- worldDir.z

#line 307
    mov r6.w, -cb9[2].z
    add r6.w, r6.w, cb9[2].w
    mul r6.w, r5.z, r6.w
    add r6.w, r6.w, cb9[2].z
    mul r4.xyz, r6.wwww, r6.xyzx  // r4.x <- p.velocity.x; r4.y <- p.velocity.y; r4.z <- p.velocity.z

#line 309
    mov r2.xyz, l(1.000000,1.000000,1.000000,0)  // r2.x <- p.color.x; r2.y <- p.color.y; r2.z <- p.color.z

#line 311
    mov r0.y, l(1.000000)  // r0.y <- p.mass

#line 314
    mul r3.w, r5.x, l(3.141593)  // r3.w <- p.angle

#line 315
    mov r6.x, -cb9[3].x
    add r6.x, r6.x, cb9[3].y
    mul r6.x, r5.w, r6.x
    add r0.z, r6.x, cb9[3].x  // r0.z <- p.angularSpeed

#line 321
    mov r6.x, -cb9[3].z
    add r6.x, r6.x, cb9[3].w
    mul r6.x, r5.x, r6.x
    add r0.w, r6.x, cb9[3].z  // r0.w <- p.lifespan

#line 322
    mov r6.x, -cb9[4].x
    add r6.x, r6.x, cb9[4].y
    mul r5.x, r5.x, r6.x
    add r5.x, r5.x, cb9[4].x
    mov r4.w, -r5.x  // r4.w <- p.age

#line 323
    mov r1.x, l(0)  // r1.x <- p.state

#line 324
    mul r1.y, r5.y, cb9[1].z  // r1.y <- p.size.x

#line 325
    mul r1.z, r5.z, cb9[1].w  // r1.z <- p.size.y

#line 327
    imul null, r5.x, cb9[8].y, cb9[8].x  // r5.x <- count

#line 328
    itof r5.x, r5.x
    mul r5.x, r5.x, r5.w
    ftou r1.w, r5.x  // r1.w <- p.chip

#line 37 "C:\Users\2240225\Desktop\graphicEngine4\Shader\IntegrateParticleCS.hlsl"
    mov r1.x, r1.x  // r1.x <- p.state
    mov r1.y, r1.y  // r1.y <- p.size.x
    mov r1.z, r1.z  // r1.z <- p.size.y
    mov r1.w, r1.w  // r1.w <- p.chip
    mov r2.xyz, r2.xyzx  // r2.x <- p.color.x; r2.y <- p.color.y; r2.z <- p.color.z
    mov r3.xyz, r3.xyzx  // r3.x <- p.position.x; r3.y <- p.position.y; r3.z <- p.position.z
    mov r4.xyz, r4.xyzx  // r4.x <- p.velocity.x; r4.y <- p.velocity.y; r4.z <- p.velocity.z
    mov r0.y, r0.y  // r0.y <- p.mass
    mov r3.w, r3.w  // r3.w <- p.angle
    mov r0.z, r0.z  // r0.z <- p.angularSpeed
    mov r0.w, r0.w  // r0.w <- p.lifespan
    mov r4.w, r4.w  // r4.w <- p.age

#line 38
    mov r2.w, l(0)

#line 39
  endif 

#line 40
endif 

#line 42
lt r5.x, r0.w, r4.w
if_nz r5.x

#line 44
  mov r2.w, l(0)

#line 45
endif 

#line 47
itof r5.x, l(0)
lt r5.x, r5.x, r4.w
if_nz r5.x
  mov r5.x, r4.w  // r5.x <- p.age

#line 54
  itof r5.yzw, l(0, 0, 0, 0)  // r5.y <- force.x; r5.z <- force.y; r5.w <- force.z

#line 60
  mul r6.xz, r0.yyyy, l(0.000000, 0.000000, 0.000000, 0.000000)
  mul r6.y, r0.y, cb9[7].w
  add r5.yzw, r5.yyzw, r6.xxyz

#line 83
  ine r6.x, l(0, 0, 0, 0), cb9[19].x
  if_z r6.x

#line 85
    div r5.yzw, r5.yyzw, r0.yyyy
    mul r5.yzw, r5.yyzw, cb9[7].yyyy
    add r4.xyz, r4.xyzx, r5.yzwy

#line 86
    nop 

#line 87
    nop 

#line 91
    ieq r5.y, cb9[18].w, l(1)
    if_nz r5.y

#line 93
      mov r5.yzw, -r3.xxyz
      add r5.yzw, r5.yyzw, cb9[0].xxyz
      dp3 r5.y, r5.yzwy, r5.yzwy
      sqrt r5.y, r5.y  // r5.y <- len

#line 94
      lt r5.y, r5.y, l(1.000000)
      if_nz r5.y

#line 96
        mov r5.yzw, -r3.xxyz
        add r5.yzw, r5.yyzw, cb9[0].xxyz
        dp3 r6.x, r5.yzwy, r5.yzwy
        rsq r6.x, r6.x
        mul r5.yzw, r5.yyzw, r6.xxxx
        mul r4.xyz, r5.yzwy, l(3.000000, 3.000000, 3.000000, 0.000000)

#line 97
      endif 

#line 98
    endif 

#line 108
    mul r5.yzw, r4.xxyz, cb9[9].wwww
    mul r5.yzw, r5.yyzw, cb9[7].yyyy
    add r3.xyz, r3.xyzx, r5.yzwy

#line 112
  else   // Prior locations: r5.y <- force.x; r5.z <- force.y; r5.w <- force.z

#line 115
    itof r4.xyz, l(0, 0, 0, 0)

#line 116
  endif 

#line 125
  div r5.y, r5.x, r0.w
  mov r6.xyz, -cb9[5].xyzx
  add r6.xyz, r6.xyzx, cb9[6].xyzx
  mul r5.yzw, r5.yyyy, r6.xxyz
  add r2.xyz, r5.yzwy, cb9[5].xyzx

#line 130
  nop 
  mov r5.y, cb9[4].z
  mov r5.x, r5.x

#line 335 "C:\Users\2240225\Desktop\graphicEngine4\Shader\Particle.hlsli"
  div r5.y, r5.x, r5.y
  mov r5.z, l(-0.000000)
  add r5.w, r5.z, l(1.000000)
  add r5.y, r5.z, r5.y
  div r5.z, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
  mul r5.y, r5.z, r5.y
  max r5.y, r5.y, l(0.000000)
  min r5.y, r5.y, l(1.000000)
  mul r5.z, r5.y, l(-2.000000)
  add r5.z, r5.z, l(3.000000)
  mul r5.y, r5.y, r5.y
  mul r5.y, r5.y, r5.z
  mov r5.z, l(1.000000)
  mul r5.y, r5.y, r5.z  // r5.y <- <FadeIn return value>

#line 130 "C:\Users\2240225\Desktop\graphicEngine4\Shader\IntegrateParticleCS.hlsl"
  nop 
  mov r5.z, cb9[4].w
  mov r5.x, r5.x
  mov r0.w, r0.w

#line 341 "C:\Users\2240225\Desktop\graphicEngine4\Shader\Particle.hlsli"
  mov r5.x, -r5.x
  add r5.x, r0.w, r5.x
  div r5.x, r5.x, r5.z
  mov r5.z, l(-0.000000)
  add r5.w, r5.z, l(1.000000)
  add r5.x, r5.z, r5.x
  div r5.z, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
  mul r5.x, r5.z, r5.x
  max r5.x, r5.x, l(0.000000)
  min r5.x, r5.x, l(1.000000)
  mul r5.z, r5.x, l(-2.000000)
  add r5.z, r5.z, l(3.000000)
  mul r5.x, r5.x, r5.x
  mul r5.x, r5.x, r5.z
  mov r5.z, l(1.000000)
  mul r5.x, r5.x, r5.z  // r5.x <- <FadeOut return value>

#line 130 "C:\Users\2240225\Desktop\graphicEngine4\Shader\IntegrateParticleCS.hlsl"
  mul r5.x, r5.x, r5.y  // r5.x <- alpha

#line 131
  mov r5.y, l(1.000000)
  mul r2.w, r5.x, r5.y

#line 133
  mul r5.x, r0.z, cb9[7].y
  add r3.w, r3.w, r5.x

#line 134
endif 

#line 136
store_structured u0.x, r0.x, l(0), r1.x
store_structured u0.x, r0.x, l(4), r2.x
store_structured u0.x, r0.x, l(8), r2.y
store_structured u0.x, r0.x, l(12), r2.z
store_structured u0.x, r0.x, l(16), r2.w
store_structured u0.x, r0.x, l(20), r3.x
store_structured u0.x, r0.x, l(24), r3.y
store_structured u0.x, r0.x, l(28), r3.z
store_structured u0.x, r0.x, l(32), r0.y
store_structured u0.x, r0.x, l(36), r3.w
store_structured u0.x, r0.x, l(40), r0.z
store_structured u0.x, r0.x, l(44), r4.x
store_structured u0.x, r0.x, l(48), r4.y
store_structured u0.x, r0.x, l(52), r4.z
store_structured u0.x, r0.x, l(56), r0.w
store_structured u0.x, r0.x, l(60), r4.w
store_structured u0.x, r0.x, l(64), r1.y
store_structured u0.x, r0.x, l(68), r1.z
store_structured u0.x, r0.x, l(72), r1.w

#line 137
ret 
// Approximately 286 instruction slots used
