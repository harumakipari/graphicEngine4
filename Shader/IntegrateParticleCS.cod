//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PARTICLE_SYSTEM_CONSTANTS
// {
//
//   float4 emissionPosition;           // Offset:    0 Size:    16
//   float2 emissionOffset;             // Offset:   16 Size:     8
//   float2 emissionSize;               // Offset:   24 Size:     8
//   float2 emisionConeAngle;           // Offset:   32 Size:     8
//   float2 emissionSpeed;              // Offset:   40 Size:     8
//   float2 emissionAngularSpeed;       // Offset:   48 Size:     8
//   float2 lifespan;                   // Offset:   56 Size:     8
//   float2 spawnDelay;                 // Offset:   64 Size:     8
//   float2 fadeDuration;               // Offset:   72 Size:     8
//   float4 emissionStartColor;         // Offset:   80 Size:    16
//   float4 emissionEndColor;           // Offset:   96 Size:    16
//   float currentTime;                 // Offset:  112 Size:     4 [unused]
//   float deltaTime;                   // Offset:  116 Size:     4
//   float _noiseScale;                 // Offset:  120 Size:     4 [unused]
//   float gravity;                     // Offset:  124 Size:     4
//   uint2 spriteSheetGrid;             // Offset:  128 Size:     8
//   uint maxParticleCount;             // Offset:  136 Size:     4
//   float3 direction;                  // Offset:  144 Size:    12
//   float strength;                    // Offset:  156 Size:     4
//   row_major float4x4 nodeWorldTransform;// Offset:  160 Size:    64 [unused]
//   row_major float4x4 worldTransform; // Offset:  224 Size:    64 [unused]
//   float2 radius;                     // Offset:  288 Size:     8 [unused]
//   bool loop;                         // Offset:  296 Size:     4
//   int type;                          // Offset:  300 Size:     4
//      = 0x00000000 
//   int isStatic;                      // Offset:  304 Size:     4
//
// }
//
// Resource bind info for particleBuffer
// {
//
//   struct Particle
//   {
//       
//       int state;                     // Offset:    0
//       float4 color;                  // Offset:    4
//       float3 position;               // Offset:   20
//       float mass;                    // Offset:   32
//       float angle;                   // Offset:   36
//       float angularSpeed;            // Offset:   40
//       float3 velocity;               // Offset:   44
//       float lifespan;                // Offset:   56
//       float age;                     // Offset:   60
//       float2 size;                   // Offset:   64
//       uint chip;                     // Offset:   72
//
//   } $Element;                        // Offset:    0 Size:    76
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleBuffer                        UAV  struct         r/w             u0      1 
// PARTICLE_SYSTEM_CONSTANTS         cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB9[20], immediateIndexed
dcl_uav_structured u0, 76
dcl_input vThreadID.x
dcl_temps 11
dcl_thread_group 16, 1, 1
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r0.xyzw, vThreadID.x, l(0), u0.xyzw
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r1.xyzw, vThreadID.x, l(16), u0.xyzw
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r2.xyzw, vThreadID.x, l(32), u0.xyzw
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r3.xyzw, vThreadID.x, l(48), u0.xyzw
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r4.xyz, vThreadID.x, l(64), u0.xyzx
add r3.w, r3.w, cb9[7].y
lt r4.w, r3.z, r3.w
if_nz r4.w
  if_nz cb9[18].z
    utof r4.w, vThreadID.x
    utof r5.x, cb9[8].z
    div r4.w, r4.w, r5.x
    mul r4.w, r4.w, l(6.283185)
    sincos r4.w, null, r4.w
    mul r4.w, r4.w, l(43758.546875)
    frc r4.w, r4.w
    mul r2.xy, r4.wwww, l(6.283185, 3.141593, 0.000000, 0.000000)
    sincos r5.xy, null, r2.yxyy
    mul r5.x, r5.x, l(43758.546875)
    frc r5.x, r5.x
    mul r5.z, r5.x, l(3.141593)
    sincos r5.z, null, r5.z
    mul r5.z, r5.z, l(43758.546875)
    frc r5.z, r5.z
    mul r5.w, r5.z, l(3.141593)
    sincos r5.w, null, r5.w
    mul r5.w, r5.w, l(43758.546875)
    frc r5.w, r5.w
    add r6.x, -cb9[1].x, cb9[1].y
    mad r6.x, r4.w, r6.x, cb9[1].x
    mul r6.y, r5.w, l(6.283185)
    sincos r7.x, r8.x, r6.y
    mul r8.x, r6.x, r8.x
    mul r8.z, r6.x, r7.x
    mov r8.y, l(0)
    add r1.yzw, r8.xxyz, cb9[0].xxyz
    max r6.x, r5.z, cb9[2].x
    min r6.x, r6.x, cb9[2].y
    sincos r6.x, r7.x, r6.x
    sincos null, r6.y, r2.x
    mul r8.x, r6.y, r6.x
    mul r8.z, r5.y, r6.x
    switch cb9[18].w
      case l(0)
      dp3 r5.y, cb9[9].xyzx, cb9[9].xyzx
      lt r6.w, r5.y, l(0.000001)
      rsq r5.y, r5.y
      mul r7.yzw, r5.yyyy, cb9[9].xxyz
      lt r5.y, |r7.z|, l(0.999000)
      movc r9.xyz, r5.yyyy, l(0,0,1.000000,0), l(0,1.000000,0,0)
      mul r10.xyz, r7.zwyz, r9.xyzx
      mad r9.xyz, r9.zxyz, r7.wyzw, -r10.xyzx
      dp3 r5.y, r9.xyzx, r9.xyzx
      rsq r5.y, r5.y
      mul r9.xyz, r5.yyyy, r9.xyzx
      mul r10.xyz, r7.wyzw, r9.yzxy
      mad r10.xyz, r7.zwyz, r9.zxyz, -r10.xyzx
      dp3 r5.y, r10.xyzx, r10.xyzx
      rsq r5.y, r5.y
      mul r10.xyz, r5.yyyy, r10.xyzx
      mul r7.yzw, r7.yyzw, r7.xxxx
      mad r7.yzw, r8.xxxx, r9.xxyz, r7.yyzw
      mad r7.yzw, r8.zzzz, r10.xxyz, r7.yyzw
      movc r6.xyz, r6.wwww, l(0,0,0,0), r7.yzwy
      break 
      case l(1)
      mov r8.y, r7.x
      mad r1.yzw, r8.xxyz, cb9[9].wwww, r1.yyzw
      add r6.xyz, -r1.yzwy, cb9[0].xyzx
      break 
      default 
      break 
    endswitch 
    add r5.y, -cb9[2].z, cb9[2].w
    mad r5.y, r5.z, r5.y, cb9[2].z
    mul r6.xyz, r5.yyyy, r6.xyzx
    add r7.xy, -cb9[3].xzxx, cb9[3].ywyy
    mad r2.z, r5.w, r7.x, cb9[3].x
    mad r3.z, r4.w, r7.y, cb9[3].z
    add r5.y, -cb9[4].x, cb9[4].y
    mad r3.w, r4.w, r5.y, cb9[4].x
    mul r4.xy, r5.xzxx, cb9[1].zwzz
    imul null, r4.w, cb9[8].y, cb9[8].x
    itof r4.w, r4.w
    mul r4.w, r4.w, r5.w
    ftou r4.z, r4.w
    mov r0.xyzw, l(0,1.000000,1.000000,1.000000)
    mov r1.x, l(0)
    mov r2.x, l(1.000000)
    mov r3.w, -r3.w
  else 
    mov r6.x, r2.w
    mov r6.yz, r3.xxyx
  endif 
else 
  mov r6.x, r2.w
  mov r6.yz, r3.xxyx
endif 
lt r4.w, l(0.000000), r3.w
if_nz r4.w
  mov r5.xz, l(0,0,0,0)
  mul r5.y, r2.x, cb9[7].w
  div r5.xyz, r5.xyzx, r2.xxxx
  mad r5.xyz, r5.xyzx, cb9[7].yyyy, r6.xyzx
  ieq r4.w, cb9[18].w, l(1)
  add r7.xyz, -r1.yzwy, cb9[0].xyzx
  dp3 r5.w, r7.xyzx, r7.xyzx
  sqrt r6.w, r5.w
  lt r6.w, r6.w, l(1.000000)
  rsq r5.w, r5.w
  mul r7.xyz, r5.wwww, r7.xyzx
  mul r7.xyz, r7.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000)
  movc r7.xyz, r6.wwww, r7.xyzx, r5.xyzx
  movc r5.xyz, r4.wwww, r7.xyzx, r5.xyzx
  mul r7.xyz, r5.xyzx, cb9[9].wwww
  mad r7.xyz, r7.xyzx, cb9[7].yyyy, r1.yzwy
  movc r1.yzw, cb9[19].xxxx, r1.yyzw, r7.xxyz
  movc r5.xyz, cb9[19].xxxx, l(0,0,0,0), r5.xyzx
  div r4.w, r3.w, r3.z
  add r7.xyz, -cb9[5].xyzx, cb9[6].xyzx
  mad r0.yzw, r4.wwww, r7.xxyz, cb9[5].xxyz
  div_sat r4.w, r3.w, cb9[4].z
  mad r5.w, r4.w, l(-2.000000), l(3.000000)
  mul r4.w, r4.w, r4.w
  mul r4.w, r4.w, r5.w
  add r5.w, -r3.w, r3.z
  div_sat r5.w, r5.w, cb9[4].w
  mad r6.w, r5.w, l(-2.000000), l(3.000000)
  mul r5.w, r5.w, r5.w
  mul r5.w, r5.w, r6.w
  mul r1.x, r4.w, r5.w
  mad r2.y, r2.z, cb9[7].y, r2.y
  mov r3.xy, r5.yzyy
  mov r2.w, r5.x
else 
  lt r4.w, r3.z, r3.w
  movc r1.x, r4.w, l(0), r1.x
  mov r3.xy, r6.yzyy
  mov r2.w, r6.x
endif 
store_structured u0.xyzw, vThreadID.x, l(0), r0.xyzw
store_structured u0.xyzw, vThreadID.x, l(16), r1.xyzw
store_structured u0.xyzw, vThreadID.x, l(32), r2.xyzw
store_structured u0.xyzw, vThreadID.x, l(48), r3.xyzw
store_structured u0.xyz, vThreadID.x, l(64), r4.xyzx
ret 
// Approximately 146 instruction slots used
