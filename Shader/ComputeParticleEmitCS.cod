//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// Resource bind info for emitParticleBuffer
// {
//
//   struct EmitParticleData
//   {
//       
//       float4 parameter;              // Offset:    0
//       float4 position;               // Offset:   16
//       float4 rotation;               // Offset:   32
//       float4 scale;                  // Offset:   48
//       float4 velocity;               // Offset:   64
//       float4 acceleration;           // Offset:   80
//       float4 color;                  // Offset:   96
//       float4 customData;             // Offset:  112
//
//   } $Element;                        // Offset:    0 Size:   128
//
// }
//
// Resource bind info for particleDataBuffer
// {
//
//   struct ParticleData
//   {
//       
//       float4 parameter;              // Offset:    0
//       float4 position;               // Offset:   16
//       float4 rotation;               // Offset:   32
//       float4 scale;                  // Offset:   48
//       float4 velocity;               // Offset:   64
//       float4 acceleration;           // Offset:   80
//       float4 texcoord;               // Offset:   96
//       float4 color;                  // Offset:  112
//       float4 customData;             // Offset:  128
//
//   } $Element;                        // Offset:    0 Size:   144
//
// }
//
// Resource bind info for particlePoolBuffer
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for particleHeaderBuffer
// {
//
//   struct ParticleHeader
//   {
//       
//       uint alive;                    // Offset:    0
//       uint particleIndex;            // Offset:    4
//       float depth;                   // Offset:    8
//       uint dummy;                    // Offset:   12
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// emitParticleBuffer                texture  struct         r/o             t0      1 
// particleDataBuffer                    UAV  struct         r/w             u0      1 
// particlePoolBuffer                    UAV  struct     consume             u1      1 
// indirectDataBuffer                    UAV    byte         r/w             u2      1 
// particleHeaderBuffer                  UAV  struct         r/w             u3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_resource_structured t0, 128
dcl_uav_structured u0, 144
dcl_uav_structured u1, 4
dcl_uav_raw u2
dcl_uav_structured u3, 16
dcl_input vThreadID.x
dcl_temps 2
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- dispatchThreadId.x; vThreadID.y <- dispatchThreadId.y; vThreadID.z <- dispatchThreadId.z
//
#line 65 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ComputeParticle.hlsli"
mov r0.x, l(36)  // r0.x <- IndirectArgumentsNumEmitParticleIndex

#line 15 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ComputeParticleEmitCS.hlsl"
imm_atomic_consume r1.x, u1
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.y, r1.x, l(0), u1.xxxx  // r0.y <- particleIndex

#line 16
mov r0.z, vThreadID.x  // r0.z <- emitIndex

#line 20
imm_atomic_iadd r1.x, u2, r0.x, l(1)
mov r1.x, r1.x  // r1.x <- headerIndex

#line 23
mov r0.x, l(1)
store_structured u3.x, r1.x, l(0), r0.x

#line 24
store_structured u3.x, r1.x, l(4), r0.y

#line 25
itof r0.x, l(1)
store_structured u3.x, r1.x, l(8), r0.x

#line 26
mov r0.x, l(0)
store_structured u3.x, r1.x, l(12), r0.x

#line 29
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.x, r0.z, l(0), t0.xxxx
store_structured u0.x, r0.y, l(0), r0.x

#line 30
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.x, r0.z, l(4), t0.xxxx
store_structured u0.x, r0.y, l(4), r0.x

#line 31
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.x, r0.z, l(4), t0.xxxx
store_structured u0.x, r0.y, l(8), r0.x

#line 32
itof r0.x, l(0)
store_structured u0.x, r0.y, l(12), r0.x

#line 34
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.x, r0.z, l(16), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.w, r0.z, l(20), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.x, r0.z, l(24), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.y, r0.z, l(28), t0.xxxx
store_structured u0.x, r0.y, l(16), r0.x
store_structured u0.x, r0.y, l(20), r0.w
store_structured u0.x, r0.y, l(24), r1.x
store_structured u0.x, r0.y, l(28), r1.y

#line 35
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.x, r0.z, l(32), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.w, r0.z, l(36), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.x, r0.z, l(40), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.y, r0.z, l(44), t0.xxxx
store_structured u0.x, r0.y, l(32), r0.x
store_structured u0.x, r0.y, l(36), r0.w
store_structured u0.x, r0.y, l(40), r1.x
store_structured u0.x, r0.y, l(44), r1.y

#line 36
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.x, r0.z, l(48), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.w, r0.z, l(52), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.x, r0.z, l(56), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.y, r0.z, l(60), t0.xxxx
store_structured u0.x, r0.y, l(48), r0.x
store_structured u0.x, r0.y, l(52), r0.w
store_structured u0.x, r0.y, l(56), r1.x
store_structured u0.x, r0.y, l(60), r1.y

#line 38
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.x, r0.z, l(64), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.w, r0.z, l(68), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.x, r0.z, l(72), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.y, r0.z, l(76), t0.xxxx
store_structured u0.x, r0.y, l(64), r0.x
store_structured u0.x, r0.y, l(68), r0.w
store_structured u0.x, r0.y, l(72), r1.x
store_structured u0.x, r0.y, l(76), r1.y

#line 39
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.x, r0.z, l(80), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.w, r0.z, l(84), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.x, r0.z, l(88), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.y, r0.z, l(92), t0.xxxx
store_structured u0.x, r0.y, l(80), r0.x
store_structured u0.x, r0.y, l(84), r0.w
store_structured u0.x, r0.y, l(88), r1.x
store_structured u0.x, r0.y, l(92), r1.y

#line 40
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.x, r0.z, l(96), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.w, r0.z, l(100), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.x, r0.z, l(104), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.y, r0.z, l(108), t0.xxxx
store_structured u0.x, r0.y, l(112), r0.x
store_structured u0.x, r0.y, l(116), r0.w
store_structured u0.x, r0.y, l(120), r1.x
store_structured u0.x, r0.y, l(124), r1.y

#line 41
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.x, r0.z, l(112), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.w, r0.z, l(116), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r1.x, r0.z, l(120), t0.xxxx
ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r0.z, r0.z, l(124), t0.xxxx
store_structured u0.x, r0.y, l(128), r0.x
store_structured u0.x, r0.y, l(132), r0.w
store_structured u0.x, r0.y, l(136), r1.x
store_structured u0.x, r0.y, l(140), r0.z

#line 42
ret 
// Approximately 78 instruction slots used
