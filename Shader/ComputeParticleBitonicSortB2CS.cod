//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer COMPUTE_PARTICLE_BITONIC_SORT_CONSTANT_BUFFER
// {
//
//   uint increment;                    // Offset:    0 Size:     4
//   uint direction;                    // Offset:    4 Size:     4
//   uint sortDummy[2];                 // Offset:   16 Size:    20 [unused]
//
// }
//
// Resource bind info for particleHeaderBuffer
// {
//
//   struct ParticleHeader
//   {
//       
//       uint alive;                    // Offset:    0
//       uint particleIndex;            // Offset:    4
//       float depth;                   // Offset:    8
//       uint dummy;                    // Offset:   12
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleHeaderBuffer                  UAV  struct         r/w             u3      1 
// COMPUTE_PARTICLE_BITONIC_SORT_CONSTANT_BUFFER    cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB11[1], immediateIndexed
dcl_uav_structured u3, 16
dcl_input vThreadID.x
dcl_temps 4
dcl_thread_group 256, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- dispatchThreadId.x; vThreadID.y <- dispatchThreadId.y; vThreadID.z <- dispatchThreadId.z
//
#line 8 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ComputeParticleBitonicSortB2CS.hlsl"
mov r0.x, vThreadID.x  // r0.x <- t

#line 9
mov r0.y, l(1)
ineg r0.y, r0.y
iadd r0.y, r0.y, cb11[0].x
and r0.y, r0.y, r0.x  // r0.y <- low

#line 10
mov r0.z, l(1)
ishl r0.x, r0.x, r0.z
ineg r0.y, r0.y
iadd r0.x, r0.y, r0.x  // r0.x <- i

#line 11
and r0.y, r0.x, cb11[0].y
mov r0.z, l(0)
ieq r0.y, r0.z, r0.y  // r0.y <- reverse

#line 13
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.x, r0.x, l(0), u3.xxxx  // r1.x <- x0.alive
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.z, r0.x, l(4), u3.xxxx  // r1.z <- x0.particleIndex
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.y, r0.x, l(8), u3.xxxx  // r1.y <- x0.depth
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.w, r0.x, l(12), u3.xxxx  // r1.w <- x0.dummy

#line 14
iadd r0.z, r0.x, cb11[0].x
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.x, r0.z, l(0), u3.xxxx  // r2.x <- x1.alive
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.z, r0.z, l(4), u3.xxxx  // r2.z <- x1.particleIndex
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.y, r0.z, l(8), u3.xxxx  // r2.y <- x1.depth
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.w, r0.z, l(12), u3.xxxx  // r2.w <- x1.dummy

#line 15
mov r1.xyzw, r1.xyzw  // r1.x <- auxa.alive; r1.y <- auxa.depth; r1.z <- auxa.particleIndex; r1.w <- auxa.dummy

#line 16
mov r2.xyzw, r2.xyzw  // r2.x <- auxb.alive; r2.y <- auxb.depth; r2.z <- auxb.particleIndex; r2.w <- auxb.dummy

#line 17
and r0.y, r0.y, l(1)
nop 
mov r1.xy, r1.xyxx
mov r2.xy, r2.xyxx

#line 7 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ComputeParticleBitonicSort.hlsli"
ult r0.z, r2.x, r1.x
ieq r0.w, r1.x, r2.x
lt r3.x, r2.y, r1.y
and r0.w, r0.w, r3.x
or r0.z, r0.w, r0.z  // r0.z <- <comparer return value>

#line 17 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ComputeParticleBitonicSortB2CS.hlsl"
and r0.z, r0.z, l(1)
xor r0.y, r0.z, r0.y
ine r0.y, l(0, 0, 0, 0), r0.y
if_nz r0.y

#line 19
  mov r3.xyzw, r2.xzyw  // r3.x <- x0.alive; r3.y <- x0.particleIndex; r3.z <- x0.depth; r3.w <- x0.dummy

#line 20
  mov r2.xyzw, r1.xyzw

#line 21
  mov r1.xyzw, r3.xzyw  // r1.x <- x0.alive; r1.z <- x0.particleIndex; r1.y <- x0.depth; r1.w <- x0.dummy
else 
  mov r1.xyzw, r1.xyzw
  mov r2.xyzw, r2.xyzw
endif 

#line 23
store_structured u3.x, r0.x, l(0), r1.x
store_structured u3.x, r0.x, l(4), r1.z
store_structured u3.x, r0.x, l(8), r1.y
store_structured u3.x, r0.x, l(12), r1.w

#line 24
iadd r0.x, r0.x, cb11[0].x
store_structured u3.x, r0.x, l(0), r2.x
store_structured u3.x, r0.x, l(4), r2.z
store_structured u3.x, r0.x, l(8), r2.y
store_structured u3.x, r0.x, l(12), r2.w

#line 25
ret 
// Approximately 53 instruction slots used
