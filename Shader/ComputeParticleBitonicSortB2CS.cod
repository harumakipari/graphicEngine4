//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer COMPUTE_PARTICLE_BITONIC_SORT_CONSTANT_BUFFER
// {
//
//   uint increment;                    // Offset:    0 Size:     4
//   uint direction;                    // Offset:    4 Size:     4
//   uint sortDummy[2];                 // Offset:   16 Size:    20 [unused]
//
// }
//
// Resource bind info for particleHeaderBuffer
// {
//
//   struct ParticleHeader
//   {
//       
//       uint alive;                    // Offset:    0
//       uint particleIndex;            // Offset:    4
//       float depth;                   // Offset:    8
//       uint dummy;                    // Offset:   12
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleHeaderBuffer                  UAV  struct         r/w             u3      1 
// COMPUTE_PARTICLE_BITONIC_SORT_CONSTANT_BUFFER    cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB11[1], immediateIndexed
dcl_uav_structured u3, 16
dcl_input vThreadID.x
dcl_temps 3
dcl_thread_group 256, 1, 1
iadd r0.x, cb11[0].x, l(-1)
and r0.x, r0.x, vThreadID.x
ishl r0.y, vThreadID.x, l(1)
iadd r0.x, -r0.x, r0.y
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.xyzw, r0.x, l(0), u3.xyzw
iadd r0.y, r0.x, cb11[0].x
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(0), u3.xyzw
ieq r0.z, r1.x, r2.x
lt r0.w, r2.z, r1.z
and r0.z, r0.w, r0.z
ult r0.w, r2.x, r1.x
or r0.z, r0.z, r0.w
and r0.z, r0.z, l(1)
and r0.w, r0.x, cb11[0].y
movc r0.w, r0.w, l(0), l(1)
xor r0.z, r0.z, r0.w
swapc r1.xyzw, r2.xyzw, r0.zzzz, r2.xyzw, r1.xyzw
store_structured u3.xyzw, r0.x, l(0), r2.xyzw
store_structured u3.xyzw, r0.y, l(0), r1.xyzw
ret 
// Approximately 20 instruction slots used
