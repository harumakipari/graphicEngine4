//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CLOTH_SIMULATE_CBUFFER
// {
//
//   float g;                           // Offset:    0 Size:     4 [unused]
//   uint vertexCount;                  // Offset:    4 Size:     4
//   float align[2];                    // Offset:   16 Size:    20 [unused]
//
// }
//
// Resource bind info for inVertices
// {
//
//   struct
//   {
//       
//       float3 position;               // Offset:    0
//       float3 normal;                 // Offset:   12
//       float4 tangent;                // Offset:   24
//       float2 texcoord;               // Offset:   40
//       float3 velocity;               // Offset:   48
//       float3 oldPosition;            // Offset:   60
//       float3 oldVelocity;            // Offset:   72
//       float4 rotation;               // Offset:   84
//       uint isPinned;                 // Offset:  100
//
//   } $Element;                        // Offset:    0 Size:   104
//
// }
//
// Resource bind info for clothEdgeSRV
// {
//
//   struct
//   {
//       
//       uint neighbor;                 // Offset:    0
//       float3 delta;                  // Offset:    4
//       float restLength;              // Offset:   16
//
//   } $Element;                        // Offset:    0 Size:    20
//
// }
//
// Resource bind info for outVertices
// {
//
//   struct
//   {
//       
//       float3 position;               // Offset:    0
//       float3 normal;                 // Offset:   12
//       float4 tangent;                // Offset:   24
//       float2 texcoord;               // Offset:   40
//       float3 velocity;               // Offset:   48
//       float3 oldPosition;            // Offset:   60
//       float3 oldVelocity;            // Offset:   72
//       float4 rotation;               // Offset:   84
//       uint isPinned;                 // Offset:  100
//
//   } $Element;                        // Offset:    0 Size:   104
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// inVertices                        texture  struct         r/o             t0      1 
// clothEdgeSRV                      texture  struct         r/o             t1      1 
// outVertices                           UAV  struct         r/w             u0      1 
// CLOTH_SIMULATE_CBUFFER            cbuffer      NA          NA           cb10      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_4_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB10[1], immediateIndexed
dcl_resource_structured t0, 104
dcl_resource_structured t1, 20
dcl_uav_structured u0, 104
dcl_input vThreadID.x
dcl_temps 25
dcl_thread_group 16, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- id.x; vThreadID.y <- id.y; vThreadID.z <- id.z
//
#line 159 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ClothConstraintCS.hlsl"
uge r0.x, vThreadID.x, cb10[0].y
if_nz r0.x

#line 161
  ret 

#line 162
endif 

#line 164
ld_structured r0.x, vThreadID.x, l(0), t0.xxxx  // r0.x <- inVertex.position.x
ld_structured r0.y, vThreadID.x, l(4), t0.xxxx  // r0.y <- inVertex.position.y
ld_structured r0.z, vThreadID.x, l(8), t0.xxxx  // r0.z <- inVertex.position.z
ld_structured r1.x, vThreadID.x, l(12), t0.xxxx  // r1.x <- inVertex.normal.x
ld_structured r1.y, vThreadID.x, l(16), t0.xxxx  // r1.y <- inVertex.normal.y
ld_structured r1.z, vThreadID.x, l(20), t0.xxxx  // r1.z <- inVertex.normal.z
ld_structured r1.w, vThreadID.x, l(24), t0.xxxx  // r1.w <- inVertex.tangent.x
ld_structured r2.x, vThreadID.x, l(28), t0.xxxx  // r2.x <- inVertex.tangent.y
ld_structured r2.y, vThreadID.x, l(32), t0.xxxx  // r2.y <- inVertex.tangent.z
ld_structured r2.z, vThreadID.x, l(36), t0.xxxx  // r2.z <- inVertex.tangent.w
ld_structured r2.w, vThreadID.x, l(40), t0.xxxx  // r2.w <- inVertex.texcoord.x
ld_structured r3.x, vThreadID.x, l(44), t0.xxxx  // r3.x <- inVertex.texcoord.y
ld_structured r4.x, vThreadID.x, l(48), t0.xxxx  // r4.x <- inVertex.velocity.x
ld_structured r4.y, vThreadID.x, l(52), t0.xxxx  // r4.y <- inVertex.velocity.y
ld_structured r4.z, vThreadID.x, l(56), t0.xxxx  // r4.z <- inVertex.velocity.z
ld_structured r3.y, vThreadID.x, l(60), t0.xxxx  // r3.y <- inVertex.oldPosition.x
ld_structured r3.z, vThreadID.x, l(64), t0.xxxx  // r3.z <- inVertex.oldPosition.y
ld_structured r3.w, vThreadID.x, l(68), t0.xxxx  // r3.w <- inVertex.oldPosition.z
ld_structured r5.x, vThreadID.x, l(72), t0.xxxx  // r5.x <- inVertex.oldVelocity.x
ld_structured r5.y, vThreadID.x, l(76), t0.xxxx  // r5.y <- inVertex.oldVelocity.y
ld_structured r5.z, vThreadID.x, l(80), t0.xxxx  // r5.z <- inVertex.oldVelocity.z
ld_structured r5.w, vThreadID.x, l(84), t0.xxxx  // r5.w <- inVertex.rotation.x
ld_structured r6.x, vThreadID.x, l(88), t0.xxxx  // r6.x <- inVertex.rotation.y
ld_structured r6.y, vThreadID.x, l(92), t0.xxxx  // r6.y <- inVertex.rotation.z
ld_structured r6.z, vThreadID.x, l(96), t0.xxxx  // r6.z <- inVertex.rotation.w
ld_structured r6.w, vThreadID.x, l(100), t0.xxxx  // r6.w <- inVertex.isPinned

#line 165
mov r1.xyzw, r1.xyzw  // r1.x <- outVertex.normal.x; r1.y <- outVertex.normal.y; r1.z <- outVertex.normal.z; r1.w <- outVertex.tangent.x
mov r2.xyzw, r2.xyzw  // r2.x <- outVertex.tangent.y; r2.y <- outVertex.tangent.z; r2.z <- outVertex.tangent.w; r2.w <- outVertex.texcoord.x
mov r3.xyzw, r3.xyzw  // r3.x <- outVertex.texcoord.y; r3.y <- outVertex.oldPosition.x; r3.z <- outVertex.oldPosition.y; r3.w <- outVertex.oldPosition.z
mov r5.xyzw, r5.xyzw  // r5.x <- outVertex.oldVelocity.x; r5.y <- outVertex.oldVelocity.y; r5.z <- outVertex.oldVelocity.z; r5.w <- outVertex.rotation.x
mov r6.xyzw, r6.xyzw  // r6.x <- outVertex.rotation.y; r6.y <- outVertex.rotation.z; r6.z <- outVertex.rotation.w; r6.w <- outVertex.isPinned

#line 168
mov r0.w, l(1)
ieq r0.w, r0.w, r6.w
if_nz r0.w

#line 170
  mov r0.xyz, r0.xyzx  // r0.x <- outVertex.position.x; r0.y <- outVertex.position.y; r0.z <- outVertex.position.z

#line 171
  mov r7.xyz, l(0,0,0,0)  // r7.x <- outVertex.velocity.x; r7.y <- outVertex.velocity.y; r7.z <- outVertex.velocity.z

#line 172
  store_structured u0.x, vThreadID.x, l(0), r0.x
  store_structured u0.x, vThreadID.x, l(4), r0.y
  store_structured u0.x, vThreadID.x, l(8), r0.z
  store_structured u0.x, vThreadID.x, l(12), r1.x
  store_structured u0.x, vThreadID.x, l(16), r1.y
  store_structured u0.x, vThreadID.x, l(20), r1.z
  store_structured u0.x, vThreadID.x, l(24), r1.w
  store_structured u0.x, vThreadID.x, l(28), r2.x
  store_structured u0.x, vThreadID.x, l(32), r2.y
  store_structured u0.x, vThreadID.x, l(36), r2.z
  store_structured u0.x, vThreadID.x, l(40), r2.w
  store_structured u0.x, vThreadID.x, l(44), r3.x
  store_structured u0.x, vThreadID.x, l(48), r7.x
  store_structured u0.x, vThreadID.x, l(52), r7.y
  store_structured u0.x, vThreadID.x, l(56), r7.z
  store_structured u0.x, vThreadID.x, l(60), r3.y
  store_structured u0.x, vThreadID.x, l(64), r3.z
  store_structured u0.x, vThreadID.x, l(68), r3.w
  store_structured u0.x, vThreadID.x, l(72), r5.x
  store_structured u0.x, vThreadID.x, l(76), r5.y
  store_structured u0.x, vThreadID.x, l(80), r5.z
  store_structured u0.x, vThreadID.x, l(84), r5.w
  store_structured u0.x, vThreadID.x, l(88), r6.x
  store_structured u0.x, vThreadID.x, l(92), r6.y
  store_structured u0.x, vThreadID.x, l(96), r6.z
  store_structured u0.x, vThreadID.x, l(100), r6.w

#line 173
  ret 

#line 174
endif 

#line 176
mov r7.xyzw, l(0,0,0,0)  // r7.x <- errorMatrix._m00; r7.y <- errorMatrix._m01; r7.z <- errorMatrix._m02; r7.w <- errorMatrix._m03
mov r8.xyzw, l(0,0,0,0)  // r8.x <- errorMatrix._m10; r8.y <- errorMatrix._m11; r8.z <- errorMatrix._m12; r8.w <- errorMatrix._m13
mov r9.xyzw, l(0,0,0,0)  // r9.x <- errorMatrix._m20; r9.y <- errorMatrix._m21; r9.z <- errorMatrix._m22; r9.w <- errorMatrix._m23
mov r10.xyzw, l(0,0,0,0)  // r10.x <- errorMatrix._m30; r10.y <- errorMatrix._m31; r10.z <- errorMatrix._m32; r10.w <- errorMatrix._m33

#line 177
ld_structured r11.x, vThreadID.x, l(0), t0.xxxx  // r11.x <- currentPosition.x
ld_structured r11.y, vThreadID.x, l(4), t0.xxxx  // r11.y <- currentPosition.y
ld_structured r11.z, vThreadID.x, l(8), t0.xxxx  // r11.z <- currentPosition.z

#line 178
mov r0.w, l(8)
imul null, r0.w, r0.w, vThreadID.x  // r0.w <- baseEdge

#line 179
mov r4.w, l(0)  // r4.w <- i
mov r12.x, r7.x  // r12.x <- errorMatrix._m00
mov r12.y, r8.x  // r12.y <- errorMatrix._m10
mov r12.z, r9.x  // r12.z <- errorMatrix._m20
mov r12.w, r10.x  // r12.w <- errorMatrix._m30
mov r13.x, r7.y  // r13.x <- errorMatrix._m01
mov r13.y, r8.y  // r13.y <- errorMatrix._m11
mov r13.z, r9.y  // r13.z <- errorMatrix._m21
mov r13.w, r10.y  // r13.w <- errorMatrix._m31
mov r14.x, r7.z  // r14.x <- errorMatrix._m02
mov r14.y, r8.z  // r14.y <- errorMatrix._m12
mov r14.z, r9.z  // r14.z <- errorMatrix._m22
mov r14.w, r10.z  // r14.w <- errorMatrix._m32
mov r15.x, r7.w  // r15.x <- errorMatrix._m03
mov r15.y, r8.w  // r15.y <- errorMatrix._m13
mov r15.z, r9.w  // r15.z <- errorMatrix._m23
mov r15.w, r10.w  // r15.w <- errorMatrix._m33
mov r11.w, r4.w  // r11.w <- i
loop 
  mov r16.x, l(8)
  ult r16.x, r11.w, r16.x
  breakc_z r16.x

#line 181
  iadd r16.x, r0.w, r11.w
  ld_structured r17.x, r16.x, l(0), t1.xxxx  // r17.x <- edge.neighbor
  ld_structured r18.x, r16.x, l(4), t1.xxxx  // r18.x <- edge.delta.x
  ld_structured r18.y, r16.x, l(8), t1.xxxx  // r18.y <- edge.delta.y
  ld_structured r18.z, r16.x, l(12), t1.xxxx  // r18.z <- edge.delta.z

#line 182
  ieq r16.x, r17.x, l(-1)
  if_nz r16.x

#line 184
    iadd r11.w, r11.w, l(1)
    continue 

#line 185
  endif 

#line 186
  mov r18.xyz, r18.xyzx  // r18.x <- delta.x; r18.y <- delta.y; r18.z <- delta.z

#line 187
  ld_structured r16.x, r17.x, l(0), t0.xxxx
  ld_structured r16.y, r17.x, l(4), t0.xxxx
  ld_structured r16.z, r17.x, l(8), t0.xxxx
  mov r17.xyz, -r11.xyzx
  add r16.xyz, r16.xyzx, r17.xyzx  // r16.x <- currentDelta.x; r16.y <- currentDelta.y; r16.z <- currentDelta.z

#line 189
  nop 
  mov r18.w, l(0)
  mov r18.xyzw, r18.xyzw

#line 100
  mov r17.x, -r18.z  // r17.x <- <RightMultiMatrix return value>._m01
  mov r19.x, -r18.x  // r19.x <- <RightMultiMatrix return value>._m03
  mov r20.y, -r18.x  // r20.y <- <RightMultiMatrix return value>._m12
  mov r19.y, -r18.y  // r19.y <- <RightMultiMatrix return value>._m13
  mov r21.z, -r18.y  // r21.z <- <RightMultiMatrix return value>._m20
  mov r19.z, -r18.z  // r19.z <- <RightMultiMatrix return value>._m23
  mov r21.xyw, r18.wzwx  // r21.x <- <RightMultiMatrix return value>._m00; r21.y <- <RightMultiMatrix return value>._m10; r21.w <- <RightMultiMatrix return value>._m30
  mov r17.yzw, r18.wwxy  // r17.y <- <RightMultiMatrix return value>._m11; r17.z <- <RightMultiMatrix return value>._m21; r17.w <- <RightMultiMatrix return value>._m31
  mov r20.xzw, r18.yywz  // r20.x <- <RightMultiMatrix return value>._m02; r20.z <- <RightMultiMatrix return value>._m22; r20.w <- <RightMultiMatrix return value>._m32
  mov r19.w, r18.w  // r19.w <- <RightMultiMatrix return value>._m33

#line 189
  nop 
  mov r16.w, l(0)
  mov r16.xyzw, r16.xyzw

#line 109
  mov r18.x, -r16.y  // r18.x <- <LeftMultiMatrix return value>._m02
  mov r22.x, -r16.x  // r22.x <- <LeftMultiMatrix return value>._m03
  mov r23.y, -r16.z  // r23.y <- <LeftMultiMatrix return value>._m10
  mov r22.y, -r16.y  // r22.y <- <LeftMultiMatrix return value>._m13
  mov r24.z, -r16.x  // r24.z <- <LeftMultiMatrix return value>._m21
  mov r22.z, -r16.z  // r22.z <- <LeftMultiMatrix return value>._m23
  mov r23.xzw, r16.wwyx  // r23.x <- <LeftMultiMatrix return value>._m00; r23.z <- <LeftMultiMatrix return value>._m20; r23.w <- <LeftMultiMatrix return value>._m30
  mov r24.xyw, r16.zwzy  // r24.x <- <LeftMultiMatrix return value>._m01; r24.y <- <LeftMultiMatrix return value>._m11; r24.w <- <LeftMultiMatrix return value>._m31
  mov r18.yzw, r16.xxwz  // r18.y <- <LeftMultiMatrix return value>._m12; r18.z <- <LeftMultiMatrix return value>._m22; r18.w <- <LeftMultiMatrix return value>._m32
  mov r22.w, r16.w  // r22.w <- <LeftMultiMatrix return value>._m33

#line 189
  mov r16.xyzw, -r23.xyzw
  mov r23.xyzw, -r24.xyzw
  mov r18.xyzw, -r18.xyzw
  mov r22.xyzw, -r22.xyzw
  add r16.xyzw, r16.xyzw, r21.xyzw  // r16.x <- m._m00; r16.y <- m._m10; r16.z <- m._m20; r16.w <- m._m30
  add r17.xyzw, r17.xyzw, r23.xyzw  // r17.x <- m._m01; r17.y <- m._m11; r17.z <- m._m21; r17.w <- m._m31
  add r18.xyzw, r18.xyzw, r20.xyzw  // r18.x <- m._m02; r18.y <- m._m12; r18.z <- m._m22; r18.w <- m._m32
  add r19.xyzw, r19.xyzw, r22.xyzw  // r19.x <- m._m03; r19.y <- m._m13; r19.z <- m._m23; r19.w <- m._m33

#line 190
  dp4 r20.x, r16.xyzw, r16.xyzw
  dp4 r21.x, r16.xyzw, r17.xyzw
  dp4 r22.x, r16.xyzw, r18.xyzw
  dp4 r23.x, r16.xyzw, r19.xyzw
  dp4 r20.y, r17.xyzw, r16.xyzw
  dp4 r21.y, r17.xyzw, r17.xyzw
  dp4 r22.y, r17.xyzw, r18.xyzw
  dp4 r23.y, r17.xyzw, r19.xyzw
  dp4 r20.z, r18.xyzw, r16.xyzw
  dp4 r21.z, r18.xyzw, r17.xyzw
  dp4 r22.z, r18.xyzw, r18.xyzw
  dp4 r23.z, r18.xyzw, r19.xyzw
  dp4 r20.w, r19.xyzw, r16.xyzw
  dp4 r21.w, r19.xyzw, r17.xyzw
  dp4 r22.w, r19.xyzw, r18.xyzw
  dp4 r23.w, r19.xyzw, r19.xyzw
  add r12.xyzw, r12.xyzw, r20.xyzw
  add r13.xyzw, r13.xyzw, r21.xyzw
  add r14.xyzw, r14.xyzw, r22.xyzw
  add r15.xyzw, r15.xyzw, r23.xyzw

#line 179
  iadd r11.w, r11.w, l(1)

#line 191
endloop 

#line 193
mov r7.x, r5.w  // r7.x <- currentRotation.x
mov r7.yzw, r6.xxyz  // r7.y <- currentRotation.y; r7.z <- currentRotation.z; r7.w <- currentRotation.w

#line 195
dp4 r8.x, r7.xyzw, r12.xyzw
dp4 r8.y, r7.xyzw, r13.xyzw
dp4 r8.z, r7.xyzw, r14.xyzw
dp4 r8.w, r7.xyzw, r15.xyzw
mul r8.xyzw, r8.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000)  // r8.x <- rotationGrad.x; r8.y <- rotationGrad.y; r8.z <- rotationGrad.z; r8.w <- rotationGrad.w

#line 196
mov r0.w, l(0.250000)  // r0.w <- thread

#line 197
mul r8.xyzw, r0.wwww, r8.xyzw
mov r8.xyzw, -r8.xyzw
add r7.xyzw, r7.xyzw, r8.xyzw
dp4 r0.w, r7.xyzw, r7.xyzw
rsq r0.w, r0.w
mul r7.xyzw, r0.wwww, r7.xyzw  // r7.x <- newRotation.x; r7.y <- newRotation.y; r7.z <- newRotation.z; r7.w <- newRotation.w

#line 198
mov r7.xyzw, r7.xyzw  // r7.x <- outVertex.rotation.x; r7.y <- outVertex.rotation.y; r7.z <- outVertex.rotation.z; r7.w <- outVertex.rotation.w

#line 200
mov r4.xyz, r4.xyzx  // r4.x <- outVertex.velocity.x; r4.y <- outVertex.velocity.y; r4.z <- outVertex.velocity.z

#line 201
mov r0.xyz, r0.xyzx  // r0.x <- outVertex.position.x; r0.y <- outVertex.position.y; r0.z <- outVertex.position.z

#line 205
store_structured u0.x, vThreadID.x, l(0), r0.x
store_structured u0.x, vThreadID.x, l(4), r0.y
store_structured u0.x, vThreadID.x, l(8), r0.z
store_structured u0.x, vThreadID.x, l(12), r1.x
store_structured u0.x, vThreadID.x, l(16), r1.y
store_structured u0.x, vThreadID.x, l(20), r1.z
store_structured u0.x, vThreadID.x, l(24), r1.w
store_structured u0.x, vThreadID.x, l(28), r2.x
store_structured u0.x, vThreadID.x, l(32), r2.y
store_structured u0.x, vThreadID.x, l(36), r2.z
store_structured u0.x, vThreadID.x, l(40), r2.w
store_structured u0.x, vThreadID.x, l(44), r3.x
store_structured u0.x, vThreadID.x, l(48), r4.x
store_structured u0.x, vThreadID.x, l(52), r4.y
store_structured u0.x, vThreadID.x, l(56), r4.z
store_structured u0.x, vThreadID.x, l(60), r3.y
store_structured u0.x, vThreadID.x, l(64), r3.z
store_structured u0.x, vThreadID.x, l(68), r3.w
store_structured u0.x, vThreadID.x, l(72), r5.x
store_structured u0.x, vThreadID.x, l(76), r5.y
store_structured u0.x, vThreadID.x, l(80), r5.z
store_structured u0.x, vThreadID.x, l(84), r7.x
store_structured u0.x, vThreadID.x, l(88), r7.y
store_structured u0.x, vThreadID.x, l(92), r7.z
store_structured u0.x, vThreadID.x, l(96), r7.w
store_structured u0.x, vThreadID.x, l(100), r6.w

#line 206
ret 
// Approximately 215 instruction slots used
