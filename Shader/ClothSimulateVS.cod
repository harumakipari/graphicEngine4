//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4 [unused]
//   bool hasTangent;                   // Offset:   84 Size:     4 [unused]
//   int skin;                          // Offset:   88 Size:     4 [unused]
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64 [unused]
//
// }
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 vviewProjection;// Offset:    0 Size:    64
//   float4 vcameraPositon;             // Offset:   64 Size:    16 [unused]
//   row_major float4x4 vview;          // Offset:   80 Size:    64 [unused]
//   row_major float4x4 vprojection;    // Offset:  144 Size:    64 [unused]
//   row_major float4x4 vinverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 vinverseViewProjection;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 vinvView;       // Offset:  336 Size:    64 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// VELOCITY                 0   xyz         4     NONE   float       
// OLDPOSITION              0   xyz         5     NONE   float       
// OLDVELOCITY              0   xyz         6     NONE   float       
// ROTATION                 0   xyzw        7     NONE   float   xyzw
// ISPINNED                 0   x           8     NONE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB8[4], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xy
dcl_input v7.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xy
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- vin.position.x; v0.y <- vin.position.y; v0.z <- vin.position.z; v0.w <- vin.position.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; v1.w <- vin.normal.w; 
//   v2.x <- vin.tangent.x; v2.y <- vin.tangent.y; v2.z <- vin.tangent.z; v2.w <- vin.tangent.w; 
//   v3.x <- vin.texcoord.x; v3.y <- vin.texcoord.y; 
//   v4.x <- vin.velocity.x; v4.y <- vin.velocity.y; v4.z <- vin.velocity.z; 
//   v5.x <- vin.oldPosition.x; v5.y <- vin.oldPosition.y; v5.z <- vin.oldPosition.z; 
//   v6.x <- vin.oldVelocity.x; v6.y <- vin.oldVelocity.y; v6.z <- vin.oldVelocity.z; 
//   v7.x <- vin.rotation.x; v7.y <- vin.rotation.y; v7.z <- vin.rotation.z; v7.w <- vin.rotation.w; 
//   v8.x <- vin.isPinned; 
//   o4.x <- <main return value>.texcoord.x; o4.y <- <main return value>.texcoord.y; 
//   o3.x <- <main return value>.wTangent.x; o3.y <- <main return value>.wTangent.y; o3.z <- <main return value>.wTangent.z; o3.w <- <main return value>.wTangent.w; 
//   o2.x <- <main return value>.wNormal.x; o2.y <- <main return value>.wNormal.y; o2.z <- <main return value>.wNormal.z; o2.w <- <main return value>.wNormal.w; 
//   o1.x <- <main return value>.wPosition.x; o1.y <- <main return value>.wPosition.y; o1.z <- <main return value>.wPosition.z; o1.w <- <main return value>.wPosition.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 39 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ClothSimulateVS.hlsl"
mov r0.x, v2.w  // r0.x <- sigma

#line 41
itof r0.y, l(1)  // r0.y <- vin.position.w

#line 42
mul r1.xyzw, cb0[0].xxxx, cb8[0].xyzw
mul r2.xyzw, cb0[0].yyyy, cb8[1].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, cb0[0].zzzz, cb8[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, cb0[0].wwww, cb8[3].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, cb0[1].xxxx, cb8[0].xyzw
mul r3.xyzw, cb0[1].yyyy, cb8[1].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[1].zzzz, cb8[2].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[1].wwww, cb8[3].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[2].xxxx, cb8[0].xyzw
mul r4.xyzw, cb0[2].yyyy, cb8[1].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[2].zzzz, cb8[2].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[2].wwww, cb8[3].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[3].xxxx, cb8[0].xyzw
mul r5.xyzw, cb0[3].yyyy, cb8[1].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[3].zzzz, cb8[2].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[3].wwww, cb8[3].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r1.xyzw, r1.xyzw, v0.xxxx
mul r2.xyzw, r2.xyzw, v0.yyyy
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r3.xyzw, v0.zzzz
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.yyyy, r4.xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- vout.position.x; r1.y <- vout.position.y; r1.z <- vout.position.z; r1.w <- vout.position.w

#line 45
mul r2.xyzw, v0.xxxx, cb0[0].xyzw
mul r3.xyzw, v0.yyyy, cb0[1].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, v0.zzzz, cb0[2].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, r0.yyyy, cb0[3].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- vout.wPosition.x; r2.y <- vout.wPosition.y; r2.z <- vout.wPosition.z; r2.w <- vout.wPosition.w

#line 48
mov r3.xyz, v1.xyzx  // r3.x <- normal.x; r3.y <- normal.y; r3.z <- normal.z

#line 49
mov r4.xyz, v2.xyzx  // r4.x <- tangent.x; r4.y <- tangent.y; r4.z <- tangent.z

#line 52
nop 
mov r3.xyz, r3.xyzx
mov r5.xyzw, v7.xyzw

#line 29
mov r3.w, l(0)
mov r3.xyzw, r3.xyzw  // r3.x <- vq.x; r3.y <- vq.y; r3.z <- vq.z; r3.w <- vq.w

#line 30
mov r6.x, -r5.x  // r6.x <- qi.x
mov r6.y, -r5.y  // r6.y <- qi.y
mov r6.z, -r5.z  // r6.z <- qi.z
mov r6.w, r5.w  // r6.w <- qi.w

#line 32
nop 
nop 
mov r5.xyzw, r5.xyzw
mov r3.xyzw, r3.xyzw

#line 18
mul r0.y, r3.x, r5.w
mul r0.z, r3.w, r5.x
add r0.y, r0.z, r0.y
mul r0.z, r3.z, r5.y
add r0.y, r0.z, r0.y
mul r0.z, r3.y, r5.z
mov r0.z, -r0.z
add r7.x, r0.z, r0.y  // r7.x <- <QuatMul return value>.x
mul r0.y, r3.y, r5.w
mul r0.z, r3.z, r5.x
mov r0.z, -r0.z
add r0.y, r0.z, r0.y
mul r0.z, r3.w, r5.y
add r0.y, r0.z, r0.y
mul r0.z, r3.x, r5.z
add r7.y, r0.z, r0.y  // r7.y <- <QuatMul return value>.y
mul r0.y, r3.z, r5.w
mul r0.z, r3.y, r5.x
add r0.y, r0.z, r0.y
mul r0.z, r3.x, r5.y
mov r0.z, -r0.z
add r0.y, r0.z, r0.y
mul r0.z, r3.w, r5.z
add r7.z, r0.z, r0.y  // r7.z <- <QuatMul return value>.z
mul r0.y, r3.w, r5.w
dp3 r0.z, r5.xyzx, r3.xyzx
mov r0.z, -r0.z
add r7.w, r0.z, r0.y  // r7.w <- <QuatMul return value>.w

#line 32
mov r7.xyzw, r7.xyzw
mov r6.xyzw, r6.xyzw

#line 18
mul r0.y, r6.x, r7.w
mul r0.z, r6.w, r7.x
add r0.y, r0.z, r0.y
mul r0.z, r6.z, r7.y
add r0.y, r0.z, r0.y
mul r0.z, r6.y, r7.z
mov r0.z, -r0.z
add r3.x, r0.z, r0.y  // r3.x <- <QuatMul return value>.x
mul r0.y, r6.y, r7.w
mul r0.z, r6.z, r7.x
mov r0.z, -r0.z
add r0.y, r0.z, r0.y
mul r0.z, r6.w, r7.y
add r0.y, r0.z, r0.y
mul r0.z, r6.x, r7.z
add r3.y, r0.z, r0.y  // r3.y <- <QuatMul return value>.y
mul r0.y, r6.z, r7.w
mul r0.z, r6.y, r7.x
add r0.y, r0.z, r0.y
mul r0.z, r6.x, r7.y
mov r0.z, -r0.z
add r0.y, r0.z, r0.y
mul r0.z, r6.w, r7.z
add r3.z, r0.z, r0.y  // r3.z <- <QuatMul return value>.z

#line 32
mov r3.xyz, r3.xyzx  // r3.x <- r.x; r3.y <- r.y; r3.z <- r.z

#line 33
mov r3.xyz, r3.xyzx  // r3.x <- <RotateByQuaternion return value>.x; r3.y <- <RotateByQuaternion return value>.y; r3.z <- <RotateByQuaternion return value>.z

#line 52
mov r3.xyz, r3.xyzx  // r3.x <- normal.x; r3.y <- normal.y; r3.z <- normal.z

#line 53
nop 
mov r4.xyz, r4.xyzx
mov r5.xyzw, v7.xyzw

#line 29
mov r4.w, l(0)
mov r4.xyzw, r4.xyzw  // r4.x <- vq.x; r4.y <- vq.y; r4.z <- vq.z; r4.w <- vq.w

#line 30
mov r6.x, -r5.x
mov r6.y, -r5.y
mov r6.z, -r5.z
mov r6.w, r5.w

#line 32
nop 
nop 
mov r5.xyzw, r5.xyzw
mov r4.xyzw, r4.xyzw

#line 18
mul r0.y, r4.x, r5.w
mul r0.z, r4.w, r5.x
add r0.y, r0.z, r0.y
mul r0.z, r4.z, r5.y
add r0.y, r0.z, r0.y
mul r0.z, r4.y, r5.z
mov r0.z, -r0.z
add r7.x, r0.z, r0.y  // r7.x <- <QuatMul return value>.x
mul r0.y, r4.y, r5.w
mul r0.z, r4.z, r5.x
mov r0.z, -r0.z
add r0.y, r0.z, r0.y
mul r0.z, r4.w, r5.y
add r0.y, r0.z, r0.y
mul r0.z, r4.x, r5.z
add r7.y, r0.z, r0.y  // r7.y <- <QuatMul return value>.y
mul r0.y, r4.z, r5.w
mul r0.z, r4.y, r5.x
add r0.y, r0.z, r0.y
mul r0.z, r4.x, r5.y
mov r0.z, -r0.z
add r0.y, r0.z, r0.y
mul r0.z, r4.w, r5.z
add r7.z, r0.z, r0.y  // r7.z <- <QuatMul return value>.z
mul r0.y, r4.w, r5.w
dp3 r0.z, r5.xyzx, r4.xyzx
mov r0.z, -r0.z
add r7.w, r0.z, r0.y

#line 32
mov r7.xyzw, r7.xyzw
mov r6.xyzw, r6.xyzw

#line 18
mul r0.y, r6.x, r7.w
mul r0.z, r6.w, r7.x
add r0.y, r0.z, r0.y
mul r0.z, r6.z, r7.y
add r0.y, r0.z, r0.y
mul r0.z, r6.y, r7.z
mov r0.z, -r0.z
add r4.x, r0.z, r0.y  // r4.x <- <QuatMul return value>.x
mul r0.y, r6.y, r7.w
mul r0.z, r6.z, r7.x
mov r0.z, -r0.z
add r0.y, r0.z, r0.y
mul r0.z, r6.w, r7.y
add r0.y, r0.z, r0.y
mul r0.z, r6.x, r7.z
add r4.y, r0.z, r0.y  // r4.y <- <QuatMul return value>.y
mul r0.y, r6.z, r7.w
mul r0.z, r6.y, r7.x
add r0.y, r0.z, r0.y
mul r0.z, r6.x, r7.y
mov r0.z, -r0.z
add r0.y, r0.z, r0.y
mul r0.z, r6.w, r7.z
add r4.z, r0.z, r0.y  // r4.z <- <QuatMul return value>.z

#line 32
mov r4.xyz, r4.xyzx  // r4.x <- r.x; r4.y <- r.y; r4.z <- r.z

#line 33
mov r4.xyz, r4.xyzx  // r4.x <- <RotateByQuaternion return value>.x; r4.y <- <RotateByQuaternion return value>.y; r4.z <- <RotateByQuaternion return value>.z

#line 53
mov r4.xyz, r4.xyzx  // r4.x <- tangent.x; r4.y <- tangent.y; r4.z <- tangent.z

#line 57
mul r5.xyzw, r3.xxxx, cb0[0].xyzw
mul r6.xyzw, r3.yyyy, cb0[1].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r3.xyzw, r3.zzzz, cb0[2].xyzw
add r3.xyzw, r3.xyzw, r5.xyzw
mul r5.xyzw, cb0[3].xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
add r3.xyzw, r3.xyzw, r5.xyzw
dp4 r0.y, r3.xyzw, r3.xyzw
rsq r0.y, r0.y
mul r3.xyzw, r0.yyyy, r3.xyzw  // r3.x <- vout.wNormal.x; r3.y <- vout.wNormal.y; r3.z <- vout.wNormal.z; r3.w <- vout.wNormal.w

#line 61
mul r5.xyzw, r4.xxxx, cb0[0].xyzw
mul r6.xyzw, r4.yyyy, cb0[1].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r4.xyzw, r4.zzzz, cb0[2].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[3].xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
add r4.xyzw, r4.xyzw, r5.xyzw
dp4 r0.y, r4.xyzw, r4.xyzw
rsq r0.y, r0.y
mul r0.yzw, r0.yyyy, r4.xxyz  // r0.y <- vout.wTangent.x; r0.z <- vout.wTangent.y; r0.w <- vout.wTangent.z

#line 62
mov r0.x, r0.x  // r0.x <- vout.wTangent.w

#line 64
mov r4.xy, v3.xyxx  // r4.x <- vout.texcoord.x; r4.y <- vout.texcoord.y

#line 72
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r2.xyzw
mov o2.xyzw, r3.xyzw
mov o3.xyz, r0.yzwy
mov o3.w, r0.x
mov o4.xy, r4.xyxx
ret 
// Approximately 215 instruction slots used
