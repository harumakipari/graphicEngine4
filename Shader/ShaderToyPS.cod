//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SHADERTOY_CONSTANTS
// {
//
//   float4 iResolution;                // Offset:    0 Size:    16
//   float4 iMouse;                     // Offset:   16 Size:    16
//   float4 iChannelResolution[4];      // Offset:   32 Size:    64 [unused]
//   float iTime;                       // Offset:   96 Size:     4
//   float iFrame;                      // Offset:  100 Size:     4 [unused]
//   float iPad0;                       // Offset:  104 Size:     4 [unused]
//   float iPad1;                       // Offset:  108 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// SHADERTOY_CONSTANTS               cbuffer      NA          NA            cb7      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB7[7], immediateIndexed
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 14
mad r0.xy, -cb7[0].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), v0.xyxx
div r0.yz, r0.xxyx, cb7[0].yyyy
div r1.xy, cb7[1].xyxx, cb7[0].xyxx
add r1.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
dp2 r0.x, r0.yzyy, r0.yzyy
sqrt r0.x, r0.x
mad r0.x, -r0.x, l(0.333333), l(1.300000)
add r1.z, -r0.x, l(1.000000)
mad r0.x, r1.z, l(0.100000), r0.x
max r0.x, r0.x, l(0.000000)
mul r0.x, r0.x, l(0.900000)
mov r0.w, l(1.000000)
dp3 r1.z, r0.yzwy, r0.yzwy
rsq r1.z, r1.z
mul r2.xyz, r0.yzwy, r1.zzzz
mul r0.w, cb7[6].x, l(0.300000)
add r3.xyz, r0.yzyy, cb7[6].xxxx
min r0.y, cb7[0].x, cb7[0].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), -r0.y
mov r4.yz, l(0,2.000000,4.000000,0)
mov r5.w, l(1.000000)
mov r6.w, l(0)
mov r7.w, l(-3.000000)
mov r8.xyz, r0.xxxx
mov r8.w, l(0)
mov r4.x, l(0)
loop 
  ge r1.z, r4.x, l(1.000000)
  breakc_nz r1.z
  frc r1.z, r4.x
  mad r9.x, r1.z, l(16.000000), r1.x
  mul r10.xyz, r4.xxxx, l(564.299988, -5.000000, 1564.300049, 0.000000)
  sincos r1.zw, null, r10.xxxz
  mul r1.w, r1.w, l(9570.299805)
  mad r1.z, r1.z, l(4570.299805), -r0.w
  frc r1.z, r1.z
  mad r9.y, r1.z, l(-10.000000), r1.y
  mad r11.w, r4.x, l(-5.000000), l(5.000000)
  frc r1.z, r1.w
  lt r1.z, r4.x, r1.z
  add r10.xzw, r3.xxyz, r4.xxyz
  sincos null, r10.xzw, r10.xxzw
  mad r5.xyz, r10.xzwx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  mov r9.z, r10.y
  add r11.xyz, r9.xyzx, l(-8.000000, 5.000000, 8.000000, 0.000000)
  dp3 r1.w, r11.xyzx, r2.xyzx
  mad r9.xyz, r2.xyzx, r1.wwww, l(0.000000, 0.000000, -3.000000, 0.000000)
  add r9.yzw, -r9.xxyz, r11.xxyw
  dp3 r2.w, r9.yzwy, r9.yzwy
  sqrt r2.w, r2.w
  lt r3.w, r2.w, l(1.000000)
  and r3.w, r1.z, r3.w
  if_nz r3.w
    mad r3.w, r4.x, l(563.340027), cb7[6].x
    add r2.w, -r2.w, l(1.000000)
    sqrt r2.w, r2.w
    add r4.w, r1.w, -r2.w
    mad r10.xyz, r2.xyzx, r4.wwww, l(0.000000, 0.000000, -3.000000, 0.000000)
    mov r6.xyz, -r11.xywx
    add r10.yzw, r6.xxyz, r10.xxyz
    sincos r7.x, r11.x, r3.w
    sincos r12.x, null, -r3.w
    mov r12.y, r11.x
    dp2 r10.x, r12.yxyy, r10.ywyy
    mov r12.z, r7.x
    dp2 r4.w, r12.zyzz, r10.ywyy
    mul r3.w, r3.w, l(0.700000)
    sincos r7.x, r11.x, r3.w
    sincos r13.x, null, -r3.w
    mov r13.y, r11.x
    dp2 r3.w, r13.yxyy, r10.xzxx
    mov r13.z, r7.x
    dp2 r10.y, r13.zyzz, r10.xzxx
    min r7.x, |r4.w|, |r3.w|
    max r10.z, |r4.w|, |r3.w|
    div r10.z, l(1.000000, 1.000000, 1.000000, 1.000000), r10.z
    mul r7.x, r7.x, r10.z
    mul r10.z, r7.x, r7.x
    mad r10.w, r10.z, l(0.020835), l(-0.085133)
    mad r10.w, r10.z, r10.w, l(0.180141)
    mad r10.w, r10.z, r10.w, l(-0.330299)
    mad r10.z, r10.z, r10.w, l(0.999866)
    mul r10.w, r7.x, r10.z
    lt r11.x, |r4.w|, |r3.w|
    mad r10.w, r10.w, l(-2.000000), l(1.570796)
    and r10.w, r11.x, r10.w
    mad r7.x, r7.x, r10.z, r10.w
    lt r10.z, r4.w, -r4.w
    and r10.z, r10.z, l(0xc0490fdb)
    add r7.x, r7.x, r10.z
    min r10.z, r4.w, r3.w
    max r3.w, r4.w, r3.w
    lt r4.w, r10.z, -r10.z
    ge r3.w, r3.w, -r3.w
    and r3.w, r3.w, r4.w
    movc r10.x, r3.w, -r7.x, r7.x
    add r10.xy, |r10.xyxx|, l(-0.200000, -0.250000, 0.000000, 0.000000)
    max r10.zw, r10.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
    dp2 r3.w, r10.zwzz, r10.zwzz
    sqrt r3.w, r3.w
    max r4.w, r10.y, r10.x
    min r4.w, r4.w, l(0.000000)
    add r3.w, r3.w, r4.w
    add r1.w, r1.w, r2.w
    mad r10.xyz, r2.xyzx, r1.wwww, r6.wwzw
    mov r7.yz, r6.xxyx
    add r10.yzw, r7.yyzw, r10.xxyz
    dp2 r10.x, r12.yxyy, r10.ywyy
    dp2 r1.w, r12.zyzz, r10.ywyy
    dp2 r2.w, r13.yxyy, r10.xzxx
    dp2 r6.y, r13.zyzz, r10.xzxx
    min r4.w, |r1.w|, |r2.w|
    max r6.z, |r1.w|, |r2.w|
    div r6.z, l(1.000000, 1.000000, 1.000000, 1.000000), r6.z
    mul r4.w, r4.w, r6.z
    mul r6.z, r4.w, r4.w
    mad r7.x, r6.z, l(0.020835), l(-0.085133)
    mad r7.x, r6.z, r7.x, l(0.180141)
    mad r7.x, r6.z, r7.x, l(-0.330299)
    mad r6.z, r6.z, r7.x, l(0.999866)
    mul r7.x, r4.w, r6.z
    lt r7.y, |r1.w|, |r2.w|
    mad r7.x, r7.x, l(-2.000000), l(1.570796)
    and r7.x, r7.y, r7.x
    mad r4.w, r4.w, r6.z, r7.x
    lt r6.z, r1.w, -r1.w
    and r6.z, r6.z, l(0xc0490fdb)
    add r4.w, r4.w, r6.z
    min r6.z, r1.w, r2.w
    max r1.w, r1.w, r2.w
    lt r2.w, r6.z, -r6.z
    ge r1.w, r1.w, -r1.w
    and r1.w, r1.w, r2.w
    movc r6.x, r1.w, -r4.w, r4.w
    add r6.xy, |r6.xyxx|, l(-0.200000, -0.250000, 0.000000, 0.000000)
    max r7.xy, r6.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
    dp2 r1.w, r7.xyxx, r7.xyxx
    sqrt r1.w, r1.w
    max r2.w, r6.y, r6.x
    min r2.w, r2.w, l(0.000000)
    add r1.w, r1.w, r2.w
    min r1.w, r1.w, r3.w
  else 
    mov r1.w, l(1.000000)
  endif 
  dp2 r9.x, l(0.000000, -1.000000, 0.000000, 0.000000), r9.yzyy
  dp2 r6.y, l(1.000000, 0.000000, 0.000000, 0.000000), r9.yzyy
  dp2 r2.w, r9.xwxx, r9.xwxx
  sqrt r6.x, r2.w
  add r6.xy, |r6.xyxx|, l(-0.300000, -0.001000, 0.000000, 0.000000)
  max r2.w, r6.y, r6.x
  min r2.w, r2.w, l(0.000000)
  max r6.xy, r6.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  dp2 r3.w, r6.xyxx, r6.xyxx
  sqrt r3.w, r3.w
  add r2.w, r2.w, r3.w
  ieq r1.z, r1.z, l(0)
  lt r2.w, r2.w, l(0.070000)
  and r1.z, r1.z, r2.w
  dp2 r6.x, l(0.866025, -0.500000, 0.000000, 0.000000), r9.yzyy
  dp2 r2.w, l(0.500000, 0.866025, 0.000000, 0.000000), r9.yzyy
  mad r2.w, -cb7[6].x, l(0.200000), r2.w
  mul r2.w, r2.w, l(10.000000)
  ge r3.w, r2.w, -r2.w
  frc r2.w, |r2.w|
  movc r2.w, r3.w, r2.w, -r2.w
  mad r6.y, r2.w, l(0.100000), l(-0.050000)
  add r6.xy, |r6.xyxx|, l(-1.000000, -0.020000, 0.000000, 0.000000)
  max r7.xy, r6.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  dp2 r2.w, r7.xyxx, r7.xyxx
  sqrt r2.w, r2.w
  max r3.w, r6.y, r6.x
  min r3.w, r3.w, l(0.000000)
  add r2.w, r2.w, r3.w
  movc r1.z, r1.z, r2.w, r1.w
  add r1.z, -r0.y, r1.z
  mul_sat r1.z, r0.z, r1.z
  mad r1.w, r1.z, l(-2.000000), l(3.000000)
  mul r1.z, r1.z, r1.z
  mul r1.z, r1.z, r1.w
  add r9.xyzw, r5.xyzw, -r8.xyzw
  mad r8.xyzw, r1.zzzz, r9.xyzw, r8.xyzw
  add r4.x, r4.x, l(0.016667)
endloop 
mov o0.xyzw, r8.xyzw
ret 
// Approximately 187 instruction slots used
