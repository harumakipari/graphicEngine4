//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 vviewProjection;// Offset:    0 Size:    64 [unused]
//   float4 vcameraPositon;             // Offset:   64 Size:    16 [unused]
//   row_major float4x4 vview;          // Offset:   80 Size:    64 [unused]
//   row_major float4x4 vprojection;    // Offset:  144 Size:    64 [unused]
//   row_major float4x4 vinverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 vinverseViewProjection;// Offset:  272 Size:    64
//   row_major float4x4 vinvView;       // Offset:  336 Size:    64 [unused]
//
// }
//
// cbuffer PROJECTION_MAPPING_CONSTANT_BUFFER
// {
//
//   row_major float4x4 projectionMappingTransforms[32];// Offset:    0 Size:  2048
//   uint4 enableMapping[8];            // Offset: 2048 Size:   128
//   uint4 textureId[8];                // Offset: 2176 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler_states[1]                 sampler      NA          NA             s1      1 
// sampler_states[3]                 sampler      NA          NA             s3      1 
// projectionMappingTexture[0]       texture  float4          2d            t15      1 
// projectionMappingTexture[1]       texture  float4          2d            t16      1 
// sceneTexture                      texture  float4          2d            t20      1 
// depthTexture                      texture  float4          2d            t21      1 
// PROJECTION_MAPPING_CONSTANT_BUFFER    cbuffer      NA          NA            cb5      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB8[21], immediateIndexed
dcl_constantbuffer CB5[144], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t16
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 57 "C:\Users\2240225\Desktop\3Dsoftbody\Shader\ScreenSpaceProjectionMappingPS.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t21.yzxw, s1
mov r0.z, r0.z  // r0.z <- depth

#line 58
nop 
mov r1.xy, v1.xyxx
mov r0.z, r0.z
mov r2.x, cb8[17].x
mov r3.x, cb8[17].y
mov r4.x, cb8[17].z
mov r5.x, cb8[17].w
mov r2.y, cb8[18].x
mov r3.y, cb8[18].y
mov r4.y, cb8[18].z
mov r5.y, cb8[18].w
mov r2.z, cb8[19].x
mov r3.z, cb8[19].y
mov r4.z, cb8[19].z
mov r5.z, cb8[19].w
mov r6.xyzw, cb8[20].xyzw

#line 18
mul r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
mov r1.zw, l(-0.000000,-0.000000,-1.000000,-1.000000)
add r0.xy, r1.zwzz, r1.xyxx  // r0.x <- ndc.x; r0.y <- ndc.y

#line 19
mov r0.y, -r0.y

#line 21
mov r0.w, l(1.000000)
mov r0.xyzw, r0.xyzw  // r0.x <- clipPos.x; r0.y <- clipPos.y; r0.z <- clipPos.z; r0.w <- clipPos.w

#line 23
mov r2.w, r6.x
dp4 r1.x, r0.xyzw, r2.xyzw  // r1.x <- worldPos.x
mov r3.w, r6.y
dp4 r1.y, r0.xyzw, r3.xyzw  // r1.y <- worldPos.y
mov r4.w, r6.z
dp4 r1.z, r0.xyzw, r4.xyzw  // r1.z <- worldPos.z
mov r5.w, r6.w
dp4 r0.x, r0.xyzw, r5.xyzw  // r0.x <- worldPos.w

#line 25
div r0.xyz, r1.xyzx, r0.xxxx  // r0.x <- <ScreenToWorld return value>.x; r0.y <- <ScreenToWorld return value>.y; r0.z <- <ScreenToWorld return value>.z

#line 58
mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 59
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t20.xyzw, s1  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[128].x
if_nz r1.w

#line 66
  mov r1.w, cb5[136].x  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx
  mov r0.w, l(1.000000)
  mov r2.x, cb5[0].x
  mov r3.x, cb5[0].y
  mov r4.x, cb5[0].z
  mov r5.x, cb5[0].w
  mov r2.y, cb5[1].x
  mov r3.y, cb5[1].y
  mov r4.y, cb5[1].z
  mov r5.y, cb5[1].w
  mov r2.z, cb5[2].x
  mov r3.z, cb5[2].y
  mov r4.z, cb5[2].z
  mov r5.z, cb5[2].w
  mov r6.xyzw, cb5[3].xyzw
  nop 
  mov r1.w, r1.w

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x

#line 49
    nop 
    mov r1.w, r1.w
    mov r3.x, r3.x
    mov r3.y, r3.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[128].y
if_nz r1.w

#line 66
  mov r1.w, cb5[136].y  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[4].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[4].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[4].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[4].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[5].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[5].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[5].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[5].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[6].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[6].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[6].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[6].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[7].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[128].z
if_nz r1.w

#line 66
  mov r1.w, cb5[136].z  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[8].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[8].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[8].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[8].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[9].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[9].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[9].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[9].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[10].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[10].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[10].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[10].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[11].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[128].w
if_nz r1.w

#line 66
  mov r1.w, cb5[136].w  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[12].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[12].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[12].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[12].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[13].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[13].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[13].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[13].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[14].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[14].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[14].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[14].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[15].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[129].x
if_nz r1.w

#line 66
  mov r1.w, cb5[137].x  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[16].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[16].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[16].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[16].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[17].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[17].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[17].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[17].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[18].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[18].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[18].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[18].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[19].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[129].y
if_nz r1.w

#line 66
  mov r1.w, cb5[137].y  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[20].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[20].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[20].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[20].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[21].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[21].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[21].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[21].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[22].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[22].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[22].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[22].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[23].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[129].z
if_nz r1.w

#line 66
  mov r1.w, cb5[137].z  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[24].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[24].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[24].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[24].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[25].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[25].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[25].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[25].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[26].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[26].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[26].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[26].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[27].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[129].w
if_nz r1.w

#line 66
  mov r1.w, cb5[137].w  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[28].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[28].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[28].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[28].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[29].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[29].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[29].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[29].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[30].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[30].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[30].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[30].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[31].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[130].x
if_nz r1.w

#line 66
  mov r1.w, cb5[138].x  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[32].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[32].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[32].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[32].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[33].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[33].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[33].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[33].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[34].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[34].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[34].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[34].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[35].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[130].y
if_nz r1.w

#line 66
  mov r1.w, cb5[138].y  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[36].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[36].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[36].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[36].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[37].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[37].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[37].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[37].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[38].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[38].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[38].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[38].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[39].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[130].z
if_nz r1.w

#line 66
  mov r1.w, cb5[138].z  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[40].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[40].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[40].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[40].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[41].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[41].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[41].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[41].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[42].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[42].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[42].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[42].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[43].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[130].w
if_nz r1.w

#line 66
  mov r1.w, cb5[138].w  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[44].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[44].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[44].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[44].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[45].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[45].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[45].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[45].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[46].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[46].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[46].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[46].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[47].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[131].x
if_nz r1.w

#line 66
  mov r1.w, cb5[139].x  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[48].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[48].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[48].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[48].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[49].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[49].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[49].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[49].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[50].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[50].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[50].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[50].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[51].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[131].y
if_nz r1.w

#line 66
  mov r1.w, cb5[139].y  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[52].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[52].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[52].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[52].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[53].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[53].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[53].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[53].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[54].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[54].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[54].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[54].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[55].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[131].z
if_nz r1.w

#line 66
  mov r1.w, cb5[139].z  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[56].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[56].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[56].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[56].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[57].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[57].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[57].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[57].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[58].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[58].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[58].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[58].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[59].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[131].w
if_nz r1.w

#line 66
  mov r1.w, cb5[139].w  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[60].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[60].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[60].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[60].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[61].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[61].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[61].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[61].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[62].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[62].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[62].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[62].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[63].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[132].x
if_nz r1.w

#line 66
  mov r1.w, cb5[140].x  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[64].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[64].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[64].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[64].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[65].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[65].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[65].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[65].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[66].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[66].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[66].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[66].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[67].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[132].y
if_nz r1.w

#line 66
  mov r1.w, cb5[140].y  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[68].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[68].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[68].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[68].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[69].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[69].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[69].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[69].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[70].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[70].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[70].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[70].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[71].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[132].z
if_nz r1.w

#line 66
  mov r1.w, cb5[140].z  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[72].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[72].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[72].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[72].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[73].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[73].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[73].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[73].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[74].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[74].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[74].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[74].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[75].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[132].w
if_nz r1.w

#line 66
  mov r1.w, cb5[140].w  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[76].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[76].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[76].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[76].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[77].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[77].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[77].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[77].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[78].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[78].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[78].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[78].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[79].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[133].x
if_nz r1.w

#line 66
  mov r1.w, cb5[141].x  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[80].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[80].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[80].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[80].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[81].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[81].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[81].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[81].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[82].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[82].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[82].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[82].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[83].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[133].y
if_nz r1.w

#line 66
  mov r1.w, cb5[141].y  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[84].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[84].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[84].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[84].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[85].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[85].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[85].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[85].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[86].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[86].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[86].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[86].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[87].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[133].z
if_nz r1.w

#line 66
  mov r1.w, cb5[141].z  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[88].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[88].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[88].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[88].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[89].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[89].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[89].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[89].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[90].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[90].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[90].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[90].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[91].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[133].w
if_nz r1.w

#line 66
  mov r1.w, cb5[141].w  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[92].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[92].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[92].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[92].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[93].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[93].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[93].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[93].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[94].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[94].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[94].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[94].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[95].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[134].x
if_nz r1.w

#line 66
  mov r1.w, cb5[142].x  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[96].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[96].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[96].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[96].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[97].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[97].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[97].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[97].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[98].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[98].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[98].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[98].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[99].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[134].y
if_nz r1.w

#line 66
  mov r1.w, cb5[142].y  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[100].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[100].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[100].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[100].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[101].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[101].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[101].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[101].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[102].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[102].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[102].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[102].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[103].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[134].z
if_nz r1.w

#line 66
  mov r1.w, cb5[142].z  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[104].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[104].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[104].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[104].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[105].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[105].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[105].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[105].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[106].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[106].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[106].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[106].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[107].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[134].w
if_nz r1.w

#line 66
  mov r1.w, cb5[142].w  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[108].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[108].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[108].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[108].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[109].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[109].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[109].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[109].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[110].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[110].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[110].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[110].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[111].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[135].x
if_nz r1.w

#line 66
  mov r1.w, cb5[143].x  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[112].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[112].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[112].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[112].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[113].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[113].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[113].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[113].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[114].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[114].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[114].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[114].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[115].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[135].y
if_nz r1.w

#line 66
  mov r1.w, cb5[143].y  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[116].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[116].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[116].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[116].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[117].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[117].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[117].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[117].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[118].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[118].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[118].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[118].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[119].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[135].z
if_nz r1.w

#line 66
  mov r1.w, cb5[143].z  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[120].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[120].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[120].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[120].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[121].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[121].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[121].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[121].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[122].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[122].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[122].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[122].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[123].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r2.w, r0.xyzw, r5.xyzw  // r2.w <- projectionTexturePosition.w

#line 44
  div r2.xyz, r2.xyzx, r2.wwww

#line 45
  mul r2.x, r2.x, l(0.500000)
  add r3.x, r2.x, l(0.500000)  // r3.x <- projectionTexturePosition.x

#line 46
  mov r2.x, -r2.y
  mul r2.x, r2.x, l(0.500000)
  add r3.y, r2.x, l(0.500000)  // r3.y <- projectionTexturePosition.y

#line 47
  max r2.x, r2.z, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  eq r2.x, r2.z, r2.x
  if_nz r2.x  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r3.x, r3.x  // r3.x <- texcoord.x
    mov r3.y, r3.y  // r3.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t15.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r3.xyxx, t16.xyzw, s3  // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r1.w <- texture_id; r2.z <- projectionTexturePosition.z; r2.w <- projectionTexturePosition.w; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r2.x <- <ProjectionTextureSample return value>.x; r2.y <- <ProjectionTextureSample return value>.y; r2.z <- <ProjectionTextureSample return value>.z; r2.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r2.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r2.xyzw, r2.xyzw  // r2.x <- projectionTextureColor.x; r2.y <- projectionTextureColor.y; r2.z <- projectionTextureColor.z; r2.w <- projectionTextureColor.w

#line 50
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r7.yzw, r7.xxxx, r2.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 64
ine r1.w, l(0, 0, 0, 0), cb5[135].w
if_nz r1.w

#line 66
  mov r1.w, cb5[143].w  // r1.w <- t

#line 67
  nop 
  mov r0.xyz, r0.xyzx  // r0.x <- worldPosition.x; r0.y <- worldPosition.y; r0.z <- worldPosition.z
  mov r0.w, l(1.000000)  // r0.w <- worldPosition.w
  mov r2.x, cb5[124].x  // r2.x <- projectionMappingTransform._m00
  mov r3.x, cb5[124].y  // r3.x <- projectionMappingTransform._m01
  mov r4.x, cb5[124].z  // r4.x <- projectionMappingTransform._m02
  mov r5.x, cb5[124].w  // r5.x <- projectionMappingTransform._m03
  mov r2.y, cb5[125].x  // r2.y <- projectionMappingTransform._m10
  mov r3.y, cb5[125].y  // r3.y <- projectionMappingTransform._m11
  mov r4.y, cb5[125].z  // r4.y <- projectionMappingTransform._m12
  mov r5.y, cb5[125].w  // r5.y <- projectionMappingTransform._m13
  mov r2.z, cb5[126].x  // r2.z <- projectionMappingTransform._m20
  mov r3.z, cb5[126].y  // r3.z <- projectionMappingTransform._m21
  mov r4.z, cb5[126].z  // r4.z <- projectionMappingTransform._m22
  mov r5.z, cb5[126].w  // r5.z <- projectionMappingTransform._m23
  mov r6.xyzw, cb5[127].xyzw  // r6.x <- projectionMappingTransform._m30; r6.y <- projectionMappingTransform._m31; r6.z <- projectionMappingTransform._m32; r6.w <- projectionMappingTransform._m33
  nop 
  mov r1.w, r1.w  // r1.w <- texture_id

#line 41
  itof r7.x, l(10)  // r7.x <- colorIntensity

#line 42
  itof r7.yzw, l(0, 0, 0, 0)  // r7.y <- projectionMappingColor.x; r7.z <- projectionMappingColor.y; r7.w <- projectionMappingColor.z

#line 43
  mov r2.w, r6.x
  dp4 r2.x, r0.xyzw, r2.xyzw  // r2.x <- projectionTexturePosition.x
  mov r3.w, r6.y
  dp4 r2.y, r0.xyzw, r3.xyzw  // r2.y <- projectionTexturePosition.y
  mov r4.w, r6.z
  dp4 r2.z, r0.xyzw, r4.xyzw  // r2.z <- projectionTexturePosition.z
  mov r5.w, r6.w
  dp4 r0.x, r0.xyzw, r5.xyzw  // r0.x <- projectionTexturePosition.w

#line 44
  div r0.xyz, r2.xyzx, r0.xxxx  // r0.x <- projectionTexturePosition.x; r0.y <- projectionTexturePosition.y; r0.z <- projectionTexturePosition.z

#line 45
  mul r0.x, r0.x, l(0.500000)
  add r2.x, r0.x, l(0.500000)  // r2.x <- projectionTexturePosition.x

#line 46
  mov r0.x, -r0.y
  mul r0.x, r0.x, l(0.500000)
  add r2.y, r0.x, l(0.500000)  // r2.y <- projectionTexturePosition.y

#line 47
  max r0.x, r0.z, l(0.000000)
  min r0.x, r0.x, l(1.000000)
  eq r0.x, r0.z, r0.x
  if_nz r0.x

#line 49
    nop 
    mov r1.w, r1.w  // r1.w <- texture_id
    mov r2.x, r2.x  // r2.x <- texcoord.x
    mov r2.y, r2.y  // r2.y <- texcoord.y

#line 30
    switch r1.w

#line 32
      case l(0)
      sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r2.xyxx, t15.xyzw, s3  // r0.x <- <ProjectionTextureSample return value>.x; r0.y <- <ProjectionTextureSample return value>.y; r0.z <- <ProjectionTextureSample return value>.z; r0.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r0.w <- worldPosition.w; r1.w <- texture_id; r0.z <- projectionTexturePosition.z; r1.w <- texture_id

#line 33
      case l(1)
      sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r2.xyxx, t16.xyzw, s3  // r0.x <- <ProjectionTextureSample return value>.x; r0.y <- <ProjectionTextureSample return value>.y; r0.z <- <ProjectionTextureSample return value>.z; r0.w <- <ProjectionTextureSample return value>.w
      mov r1.w, l(-1)
      break   // r1.w <- t; r0.w <- worldPosition.w; r1.w <- texture_id; r0.z <- projectionTexturePosition.z; r1.w <- texture_id

#line 34
      default 
      mov r1.w, l(0)
      break   // r1.w <- t; r1.w <- texture_id; r1.w <- texture_id
    endswitch   // r0.x <- <ProjectionTextureSample return value>.x; r0.y <- <ProjectionTextureSample return value>.y; r0.z <- <ProjectionTextureSample return value>.z; r0.w <- <ProjectionTextureSample return value>.w

#line 35
    if_z r1.w
      itof r0.xyzw, l(0, 0, 0, 0)
    endif 

#line 49
    mov r0.xyzw, r0.xyzw  // r0.x <- projectionTextureColor.x; r0.y <- projectionTextureColor.y; r0.z <- projectionTextureColor.z; r0.w <- projectionTextureColor.w

#line 50
    mul r0.xyz, r0.wwww, r0.xyzx
    mul r7.yzw, r7.xxxx, r0.xxyz

#line 51
  endif 

#line 52
  mov r7.yzw, r7.yyzw  // r7.y <- <ProjectionMapping return value>.x; r7.z <- <ProjectionMapping return value>.y; r7.w <- <ProjectionMapping return value>.z

#line 67
  add r1.xyz, r1.xyzx, r7.yzwy

#line 68
endif 

#line 71
mov o0.xyz, r1.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 2214 instruction slots used
