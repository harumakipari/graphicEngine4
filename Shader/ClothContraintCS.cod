//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// Resource bind info for clothVerticesUAV
// {
//
//   struct
//   {
//       
//       float3 position;               // Offset:    0
//       float3 normal;                 // Offset:   12
//       float4 tangent;                // Offset:   24
//       float2 texcoord;               // Offset:   40
//       float3 velocity;               // Offset:   48
//       uint isPinned;                 // Offset:   60
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// clothVerticesUAV                      UAV  struct         r/w             u0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_4_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_uav_structured u0, 64
dcl_input vThreadID.x
dcl_temps 16
dcl_thread_group 16, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- id.x; vThreadID.y <- id.y; vThreadID.z <- id.z
//
#line 42 "C:\Users\2240225\Desktop\3D shape matching with quaternions\Shader\ClothContraintCS.hlsl"
ld_structured r0.x, vThreadID.x, l(0), u0.xxxx
ld_structured r1.x, vThreadID.x, l(4), u0.xxxx
ld_structured r2.x, vThreadID.x, l(8), u0.xxxx
ld_structured r3.x, vThreadID.x, l(12), u0.xxxx
ld_structured r4.x, vThreadID.x, l(16), u0.xxxx
ld_structured r5.x, vThreadID.x, l(20), u0.xxxx
ld_structured r6.x, vThreadID.x, l(24), u0.xxxx
ld_structured r7.x, vThreadID.x, l(28), u0.xxxx
ld_structured r8.x, vThreadID.x, l(32), u0.xxxx
ld_structured r9.x, vThreadID.x, l(36), u0.xxxx
ld_structured r10.x, vThreadID.x, l(40), u0.xxxx
ld_structured r11.x, vThreadID.x, l(44), u0.xxxx
ld_structured r12.x, vThreadID.x, l(48), u0.xxxx
ld_structured r13.x, vThreadID.x, l(52), u0.xxxx
ld_structured r14.x, vThreadID.x, l(56), u0.xxxx
ld_structured r15.x, vThreadID.x, l(60), u0.xxxx
mov r0.x, r0.x  // r0.x <- writeVertex.position.x
mov r1.x, r1.x  // r1.x <- writeVertex.position.y
mov r2.x, r2.x  // r2.x <- writeVertex.position.z
mov r3.x, r3.x  // r3.x <- writeVertex.normal.x
mov r4.x, r4.x  // r4.x <- writeVertex.normal.y
mov r5.x, r5.x  // r5.x <- writeVertex.normal.z
mov r6.x, r6.x  // r6.x <- writeVertex.tangent.x
mov r7.x, r7.x  // r7.x <- writeVertex.tangent.y
mov r8.x, r8.x  // r8.x <- writeVertex.tangent.z
mov r9.x, r9.x  // r9.x <- writeVertex.tangent.w
mov r10.x, r10.x  // r10.x <- writeVertex.texcoord.x
mov r11.x, r11.x  // r11.x <- writeVertex.texcoord.y
mov r12.x, r12.x  // r12.x <- writeVertex.velocity.x
mov r13.x, r13.x  // r13.x <- writeVertex.velocity.y
mov r14.x, r14.x  // r14.x <- writeVertex.velocity.z
mov r15.x, r15.x  // r15.x <- writeVertex.isPinned

#line 43
store_structured u0.x, vThreadID.x, l(0), r0.x
store_structured u0.x, vThreadID.x, l(4), r1.x
store_structured u0.x, vThreadID.x, l(8), r2.x
store_structured u0.x, vThreadID.x, l(12), r3.x
store_structured u0.x, vThreadID.x, l(16), r4.x
store_structured u0.x, vThreadID.x, l(20), r5.x
store_structured u0.x, vThreadID.x, l(24), r6.x
store_structured u0.x, vThreadID.x, l(28), r7.x
store_structured u0.x, vThreadID.x, l(32), r8.x
store_structured u0.x, vThreadID.x, l(36), r9.x
store_structured u0.x, vThreadID.x, l(40), r10.x
store_structured u0.x, vThreadID.x, l(44), r11.x
store_structured u0.x, vThreadID.x, l(48), r12.x
store_structured u0.x, vThreadID.x, l(52), r13.x
store_structured u0.x, vThreadID.x, l(56), r14.x
store_structured u0.x, vThreadID.x, l(60), r15.x

#line 44
ret 
// Approximately 49 instruction slots used
