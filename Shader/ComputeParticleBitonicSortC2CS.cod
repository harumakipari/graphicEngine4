//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer COMPUTE_PARTICLE_BITONIC_SORT_CONSTANT_BUFFER
// {
//
//   uint increment;                    // Offset:    0 Size:     4
//   uint direction;                    // Offset:    4 Size:     4
//   uint sortDummy[2];                 // Offset:   16 Size:    20 [unused]
//
// }
//
// Resource bind info for particleHeaderBuffer
// {
//
//   struct ParticleHeader
//   {
//       
//       uint alive;                    // Offset:    0
//       uint particleIndex;            // Offset:    4
//       float depth;                   // Offset:    8
//       uint dummy;                    // Offset:   12
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleHeaderBuffer                  UAV  struct         r/w             u3      1 
// COMPUTE_PARTICLE_BITONIC_SORT_CONSTANT_BUFFER    cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB11[1], immediateIndexed
dcl_uav_structured u3, 16
dcl_input vThreadID.x
dcl_temps 7
dcl_tgsm_structured g0, 16, 1024
dcl_thread_group 512, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- dispatchThreadId.x; vThreadID.y <- dispatchThreadId.y; vThreadID.z <- dispatchThreadId.z
//
#line 10 "C:\Users\2240225\Desktop\3Dsoftbody\Shader\ComputeParticleBitonicSortC2CS.hlsl"
mov r0.x, vThreadID.x  // r0.x <- t

#line 11
mov r0.y, l(1023)  // r0.y <- wgBits

#line 13
mov r0.z, cb11[0].x  // r0.z <- inc
mov r0.w, cb11[0].x  // r0.w <- increment
mov r1.x, r0.z  // r1.x <- inc
loop 
  ilt r1.y, l(0), r1.x
  breakc_z r1.y

#line 15
  ineg r1.y, l(1)
  iadd r1.y, r1.y, r1.x
  and r1.y, r0.x, r1.y  // r1.y <- low

#line 16
  ishl r1.z, r0.x, l(1)
  ineg r1.y, r1.y
  iadd r1.y, r1.y, r1.z  // r1.y <- i

#line 17
  and r1.z, r1.y, cb11[0].y
  mov r1.w, l(0)
  ieq r1.z, r1.w, r1.z  // r1.z <- reverse

#line 21
  ieq r1.w, r0.w, r1.x
  if_nz r1.w

#line 24
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.x, r1.y, l(0), u3.xxxx  // r2.x <- x0.alive
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.z, r1.y, l(4), u3.xxxx  // r2.z <- x0.particleIndex
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.y, r1.y, l(8), u3.xxxx  // r2.y <- x0.depth
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.w, r1.y, l(12), u3.xxxx  // r2.w <- x0.dummy

#line 25
    iadd r1.w, r1.x, r1.y
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r3.x, r1.w, l(0), u3.xxxx  // r3.x <- x1.alive
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r3.z, r1.w, l(4), u3.xxxx  // r3.z <- x1.particleIndex
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r3.y, r1.w, l(8), u3.xxxx  // r3.y <- x1.depth
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r3.w, r1.w, l(12), u3.xxxx  // r3.w <- x1.dummy

#line 26
  else 

#line 30
    sync_g_t

#line 31
    and r1.w, r0.y, r1.y
    ld_structured r2.x, r1.w, l(0), g0.xxxx  // r2.x <- x0.alive
    ld_structured r2.z, r1.w, l(4), g0.xxxx  // r2.z <- x0.particleIndex
    ld_structured r2.y, r1.w, l(8), g0.xxxx  // r2.y <- x0.depth
    ld_structured r2.w, r1.w, l(12), g0.xxxx  // r2.w <- x0.dummy

#line 32
    iadd r1.w, r1.x, r1.y
    and r1.w, r0.y, r1.w
    ld_structured r3.x, r1.w, l(0), g0.xxxx  // r3.x <- x1.alive
    ld_structured r3.z, r1.w, l(4), g0.xxxx  // r3.z <- x1.particleIndex
    ld_structured r3.y, r1.w, l(8), g0.xxxx  // r3.y <- x1.depth
    ld_structured r3.w, r1.w, l(12), g0.xxxx  // r3.w <- x1.dummy

#line 33
  endif 

#line 37
  mov r4.xz, r2.xxyx  // r4.x <- auxa.alive; r4.z <- auxa.depth
  mov r4.yw, r2.zzzw  // r4.y <- auxa.particleIndex; r4.w <- auxa.dummy

#line 38
  mov r5.xz, r3.xxyx  // r5.x <- auxb.alive; r5.z <- auxb.depth
  mov r5.yw, r3.zzzw  // r5.y <- auxb.particleIndex; r5.w <- auxb.dummy

#line 39
  and r1.z, r1.z, l(1)
  nop 
  mov r2.xy, r2.xyxx
  mov r3.xy, r3.xyxx

#line 7 "C:\Users\2240225\Desktop\3Dsoftbody\Shader\ComputeParticleBitonicSort.hlsli"
  ult r1.w, r3.x, r2.x
  ieq r6.x, r2.x, r3.x
  lt r6.y, r3.y, r2.y
  and r6.x, r6.y, r6.x
  or r1.w, r1.w, r6.x  // r1.w <- <comparer return value>

#line 39 "C:\Users\2240225\Desktop\3Dsoftbody\Shader\ComputeParticleBitonicSortC2CS.hlsl"
  and r1.w, r1.w, l(1)
  xor r1.z, r1.w, r1.z
  ine r1.z, l(0, 0, 0, 0), r1.z
  if_nz r1.z

#line 41
    mov r2.xyzw, r5.xzyw

#line 42
    mov r3.xyzw, r4.xzyw

#line 43
  endif 

#line 47
  ieq r1.z, r1.x, l(1)
  if_nz r1.z

#line 50
    store_structured u3.x, r1.y, l(0), r2.x
    store_structured u3.x, r1.y, l(4), r2.z
    store_structured u3.x, r1.y, l(8), r2.y
    store_structured u3.x, r1.y, l(12), r2.w

#line 51
    iadd r1.z, r1.y, l(1)
    store_structured u3.x, r1.z, l(0), r3.x
    store_structured u3.x, r1.z, l(4), r3.z
    store_structured u3.x, r1.z, l(8), r3.y
    store_structured u3.x, r1.z, l(12), r3.w

#line 52
  else 

#line 56
    sync_g_t

#line 57
    and r1.z, r0.y, r1.y
    store_structured g0.x, r1.z, l(0), r2.x
    store_structured g0.x, r1.z, l(4), r2.z
    store_structured g0.x, r1.z, l(8), r2.y
    store_structured g0.x, r1.z, l(12), r2.w

#line 58
    iadd r1.y, r1.x, r1.y
    and r1.y, r0.y, r1.y
    store_structured g0.x, r1.y, l(0), r3.x
    store_structured g0.x, r1.y, l(4), r3.z
    store_structured g0.x, r1.y, l(8), r3.y
    store_structured g0.x, r1.y, l(12), r3.w

#line 59
  endif 

#line 60
  ishr r1.x, r1.x, l(1)
endloop 

#line 61
ret 
// Approximately 90 instruction slots used
