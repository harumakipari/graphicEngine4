//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   bool enableSSAO;                   // Offset:    0 Size:     4 [unused]
//   float reflectionIntensity;         // Offset:    4 Size:     4 [unused]
//   float time;                        // Offset:    8 Size:     4 [unused]
//   bool enableCascadedShadowMaps;     // Offset:   12 Size:     4 [unused]
//   bool enableSSR;                    // Offset:   16 Size:     4 [unused]
//   bool enableFog;                    // Offset:   20 Size:     4 [unused]
//   bool enableBloom;                  // Offset:   24 Size:     4 [unused]
//   float deltaTime;                   // Offset:   28 Size:     4
//   float gravity;                     // Offset:   32 Size:     4
//
// }
//
// Resource bind info for clothVerticesSRV
// {
//
//   struct
//   {
//       
//       float4 position;               // Offset:    0
//       float4 normal;                 // Offset:   16
//       float4 tangent;                // Offset:   32
//       float4 texcoord;               // Offset:   48
//       float4 oldVelocity;            // Offset:   64
//       float4 velocity;               // Offset:   80
//       float4 newPosition;            // Offset:   96
//
//   } $Element;                        // Offset:    0 Size:   112
//
// }
//
// Resource bind info for clothEdges
// {
//
//   struct
//   {
//       
//       uint id;                       // Offset:    0
//       float restLength;              // Offset:    4
//       float3 delta;                  // Offset:    8
//
//   } $Element;                        // Offset:    0 Size:    20
//
// }
//
// Resource bind info for clothVerticesUAV
// {
//
//   struct
//   {
//       
//       float4 position;               // Offset:    0
//       float4 normal;                 // Offset:   16
//       float4 tangent;                // Offset:   32
//       float4 texcoord;               // Offset:   48
//       float4 oldVelocity;            // Offset:   64
//       float4 velocity;               // Offset:   80
//       float4 newPosition;            // Offset:   96
//
//   } $Element;                        // Offset:    0 Size:   112
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// clothVerticesSRV                  texture  struct         r/o             t0      1 
// clothEdges                        texture  struct         r/o             t1      1 
// clothVerticesUAV                      UAV  struct         r/w             u0      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_4_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[3], immediateIndexed
dcl_resource_structured t0, 112
dcl_resource_structured t1, 20
dcl_uav_structured u0, 112
dcl_input vThreadID.x
dcl_temps 22
dcl_thread_group 16, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- id.x; vThreadID.y <- id.y; vThreadID.z <- id.z
//
#line 68 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ClothCS.hlsl"
ld_structured r0.x, vThreadID.x, l(0), t0.xxxx  // r0.x <- readVertex.position.x
ld_structured r0.y, vThreadID.x, l(4), t0.xxxx  // r0.y <- readVertex.position.y
ld_structured r0.z, vThreadID.x, l(8), t0.xxxx  // r0.z <- readVertex.position.z
ld_structured r0.w, vThreadID.x, l(12), t0.xxxx  // r0.w <- readVertex.position.w
ld_structured r1.x, vThreadID.x, l(64), t0.xxxx  // r1.x <- readVertex.oldVelocity.x
ld_structured r2.x, vThreadID.x, l(80), t0.xxxx  // r2.x <- readVertex.velocity.x
ld_structured r2.y, vThreadID.x, l(84), t0.xxxx  // r2.y <- readVertex.velocity.y
ld_structured r2.z, vThreadID.x, l(88), t0.xxxx  // r2.z <- readVertex.velocity.z

#line 69
ld_structured r3.x, vThreadID.x, l(16), u0.xxxx
ld_structured r4.x, vThreadID.x, l(20), u0.xxxx
ld_structured r5.x, vThreadID.x, l(24), u0.xxxx
ld_structured r6.x, vThreadID.x, l(28), u0.xxxx
ld_structured r7.x, vThreadID.x, l(32), u0.xxxx
ld_structured r8.x, vThreadID.x, l(36), u0.xxxx
ld_structured r9.x, vThreadID.x, l(40), u0.xxxx
ld_structured r10.x, vThreadID.x, l(44), u0.xxxx
ld_structured r11.x, vThreadID.x, l(48), u0.xxxx
ld_structured r12.x, vThreadID.x, l(52), u0.xxxx
ld_structured r13.x, vThreadID.x, l(56), u0.xxxx
ld_structured r14.x, vThreadID.x, l(60), u0.xxxx
ld_structured r15.x, vThreadID.x, l(64), u0.xxxx
ld_structured r16.x, vThreadID.x, l(68), u0.xxxx
ld_structured r17.x, vThreadID.x, l(72), u0.xxxx
ld_structured r18.x, vThreadID.x, l(76), u0.xxxx
mov r3.x, r3.x  // r3.x <- writeVertex.normal.x
mov r4.x, r4.x  // r4.x <- writeVertex.normal.y
mov r5.x, r5.x  // r5.x <- writeVertex.normal.z
mov r6.x, r6.x  // r6.x <- writeVertex.normal.w
mov r7.x, r7.x  // r7.x <- writeVertex.tangent.x
mov r8.x, r8.x  // r8.x <- writeVertex.tangent.y
mov r9.x, r9.x  // r9.x <- writeVertex.tangent.z
mov r10.x, r10.x  // r10.x <- writeVertex.tangent.w
mov r11.x, r11.x  // r11.x <- writeVertex.texcoord.x
mov r12.x, r12.x  // r12.x <- writeVertex.texcoord.y
mov r13.x, r13.x  // r13.x <- writeVertex.texcoord.z
mov r14.x, r14.x  // r14.x <- writeVertex.texcoord.w
mov r15.x, r15.x  // r15.x <- writeVertex.oldVelocity.x
mov r16.x, r16.x  // r16.x <- writeVertex.oldVelocity.y
mov r17.x, r17.x  // r17.x <- writeVertex.oldVelocity.z
mov r18.x, r18.x  // r18.x <- writeVertex.oldVelocity.w

#line 142
eq r1.x, r1.x, l(1.000000)
if_nz r1.x

#line 145
  itof r1.xyzw, l(0, 0, 0, 0)  // r1.x <- writeVertex.velocity.x; r1.y <- writeVertex.velocity.y; r1.z <- writeVertex.velocity.z; r1.w <- writeVertex.velocity.w

#line 146
  mov r19.xyzw, r0.xyzw  // r19.x <- writeVertex.newPosition.x; r19.y <- writeVertex.newPosition.y; r19.z <- writeVertex.newPosition.z; r19.w <- writeVertex.newPosition.w

#line 147
  mov r0.xyzw, r0.xyzw  // r0.x <- writeVertex.position.x; r0.y <- writeVertex.position.y; r0.z <- writeVertex.position.z; r0.w <- writeVertex.position.w

#line 148
  store_structured u0.x, vThreadID.x, l(0), r0.x
  store_structured u0.x, vThreadID.x, l(4), r0.y
  store_structured u0.x, vThreadID.x, l(8), r0.z
  store_structured u0.x, vThreadID.x, l(12), r0.w
  store_structured u0.x, vThreadID.x, l(16), r3.x
  store_structured u0.x, vThreadID.x, l(20), r4.x
  store_structured u0.x, vThreadID.x, l(24), r5.x
  store_structured u0.x, vThreadID.x, l(28), r6.x
  store_structured u0.x, vThreadID.x, l(32), r7.x
  store_structured u0.x, vThreadID.x, l(36), r8.x
  store_structured u0.x, vThreadID.x, l(40), r9.x
  store_structured u0.x, vThreadID.x, l(44), r10.x
  store_structured u0.x, vThreadID.x, l(48), r11.x
  store_structured u0.x, vThreadID.x, l(52), r12.x
  store_structured u0.x, vThreadID.x, l(56), r13.x
  store_structured u0.x, vThreadID.x, l(60), r14.x
  store_structured u0.x, vThreadID.x, l(64), r15.x
  store_structured u0.x, vThreadID.x, l(68), r16.x
  store_structured u0.x, vThreadID.x, l(72), r17.x
  store_structured u0.x, vThreadID.x, l(76), r18.x
  store_structured u0.x, vThreadID.x, l(80), r1.x
  store_structured u0.x, vThreadID.x, l(84), r1.y
  store_structured u0.x, vThreadID.x, l(88), r1.z
  store_structured u0.x, vThreadID.x, l(92), r1.w
  store_structured u0.x, vThreadID.x, l(96), r19.x
  store_structured u0.x, vThreadID.x, l(100), r19.y
  store_structured u0.x, vThreadID.x, l(104), r19.z
  store_structured u0.x, vThreadID.x, l(108), r19.w

#line 149
  ret 

#line 150
endif 

#line 152
mov r0.xyz, r0.xyzx  // r0.x <- curretPosition.x; r0.y <- curretPosition.y; r0.z <- curretPosition.z

#line 153
mov r2.xyz, r2.xyzx  // r2.x <- currentVelocity.x; r2.y <- currentVelocity.y; r2.z <- currentVelocity.z

#line 154
mov r1.xyz, l(0,0,0,0)  // r1.x <- force.x; r1.y <- force.y; r1.z <- force.z

#line 158
mov r0.w, l(0)  // r0.w <- i
mov r3.yzw, r1.xxyz  // r3.y <- force.x; r3.z <- force.y; r3.w <- force.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.w, r1.w, l(4)
  breakc_z r2.w

#line 160
  mov r2.w, l(4)
  imul null, r2.w, r2.w, vThreadID.x
  iadd r2.w, r1.w, r2.w
  ld_structured r19.x, r2.w, l(0), t1.xxxx  // r19.x <- edge.id
  ld_structured r20.x, r2.w, l(4), t1.xxxx  // r20.x <- edge.restLength

#line 161
  ieq r2.w, r19.x, l(-1)
  if_nz r2.w

#line 162
    iadd r1.w, r1.w, l(1)
    continue 
  endif 

#line 164
  ld_structured r21.x, r19.x, l(0), t0.xxxx  // r21.x <- neighbor.position.x
  ld_structured r21.y, r19.x, l(4), t0.xxxx  // r21.y <- neighbor.position.y
  ld_structured r21.z, r19.x, l(8), t0.xxxx  // r21.z <- neighbor.position.z

#line 165
  mov r21.xyz, r21.xyzx  // r21.x <- neighborPos.x; r21.y <- neighborPos.y; r21.z <- neighborPos.z

#line 167
  mov r4.yzw, -r21.xxyz
  add r4.yzw, r0.xxyz, r4.yyzw  // r4.y <- delta.x; r4.z <- delta.y; r4.w <- delta.z

#line 168
  dp3 r2.w, r4.yzwy, r4.yzwy
  sqrt r2.w, r2.w  // r2.w <- dist

#line 169
  lt r5.y, l(0.000001), r2.w
  if_nz r5.y

#line 171
    mov r5.y, -r20.x
    add r5.y, r2.w, r5.y
    mul r5.y, r5.y, l(-20000.000000)
    div r4.yzw, r4.yyzw, r2.wwww
    mul r4.yzw, r4.yyzw, r5.yyyy
    add r3.yzw, r3.yyzw, r4.yyzw

#line 172
  endif 

#line 158
  iadd r1.w, r1.w, l(1)

#line 174
endloop 

#line 177
mul r1.y, cb1[2].x, l(-0.100000)
mov r1.xz, l(0,0,0,0)
add r1.xyz, r1.xyzx, r3.yzwy  // r1.x <- force.x; r1.y <- force.y; r1.z <- force.z

#line 180
mul r3.yzw, r2.xxyz, l(0.000000, -0.040000, -0.040000, -0.040000)
add r1.xyz, r1.xyzx, r3.yzwy

#line 183
div r1.xyz, r1.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)  // r1.x <- acceleration.x; r1.y <- acceleration.y; r1.z <- acceleration.z

#line 184
mul r1.xyz, r1.xyzx, cb1[1].wwww
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- newVelocity.x; r1.y <- newVelocity.y; r1.z <- newVelocity.z

#line 185
mul r2.xyz, r1.xyzx, cb1[1].wwww
add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- newPosition.x; r0.y <- newPosition.y; r0.z <- newPosition.z

#line 188
lt r2.x, r0.y, l(0.000000)
if_nz r2.x

#line 190
  mov r0.y, l(0)

#line 191
  mov r1.y, l(0)

#line 192
endif 

#line 195
mov r1.w, l(0)
mov r1.xyzw, r1.xyzw  // r1.x <- writeVertex.velocity.x; r1.y <- writeVertex.velocity.y; r1.z <- writeVertex.velocity.z; r1.w <- writeVertex.velocity.w

#line 196
mov r0.w, l(1.000000)
mov r2.xyzw, r0.xyzw  // r2.x <- writeVertex.newPosition.x; r2.y <- writeVertex.newPosition.y; r2.z <- writeVertex.newPosition.z; r2.w <- writeVertex.newPosition.w

#line 197
mov r0.xyzw, r0.xyzw  // r0.x <- writeVertex.position.x; r0.y <- writeVertex.position.y; r0.z <- writeVertex.position.z; r0.w <- writeVertex.position.w

#line 201
store_structured u0.x, vThreadID.x, l(0), r0.x
store_structured u0.x, vThreadID.x, l(4), r0.y
store_structured u0.x, vThreadID.x, l(8), r0.z
store_structured u0.x, vThreadID.x, l(12), r0.w
store_structured u0.x, vThreadID.x, l(16), r3.x
store_structured u0.x, vThreadID.x, l(20), r4.x
store_structured u0.x, vThreadID.x, l(24), r5.x
store_structured u0.x, vThreadID.x, l(28), r6.x
store_structured u0.x, vThreadID.x, l(32), r7.x
store_structured u0.x, vThreadID.x, l(36), r8.x
store_structured u0.x, vThreadID.x, l(40), r9.x
store_structured u0.x, vThreadID.x, l(44), r10.x
store_structured u0.x, vThreadID.x, l(48), r11.x
store_structured u0.x, vThreadID.x, l(52), r12.x
store_structured u0.x, vThreadID.x, l(56), r13.x
store_structured u0.x, vThreadID.x, l(60), r14.x
store_structured u0.x, vThreadID.x, l(64), r15.x
store_structured u0.x, vThreadID.x, l(68), r16.x
store_structured u0.x, vThreadID.x, l(72), r17.x
store_structured u0.x, vThreadID.x, l(76), r18.x
store_structured u0.x, vThreadID.x, l(80), r1.x
store_structured u0.x, vThreadID.x, l(84), r1.y
store_structured u0.x, vThreadID.x, l(88), r1.z
store_structured u0.x, vThreadID.x, l(92), r1.w
store_structured u0.x, vThreadID.x, l(96), r2.x
store_structured u0.x, vThreadID.x, l(100), r2.y
store_structured u0.x, vThreadID.x, l(104), r2.z
store_structured u0.x, vThreadID.x, l(108), r2.w

#line 202
ret 
// Approximately 162 instruction slots used
