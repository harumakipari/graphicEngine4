//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   float iTime;                       // Offset:    0 Size:     4
//   float2 iResolution;                // Offset:    4 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB8[1], immediateIndexed
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 53 "C:\Users\2240225\Desktop\graphicEngine4\Shader\RoundedLoadingPS.hlsl"
mov r0.xy, v0.xyxx  // r0.x <- fragCoord.x; r0.y <- fragCoord.y

#line 55
nop 
mov r0.xy, r0.xyxx

#line 32
nop 
mov r0.xy, r0.xyxx

#line 17
min r0.z, cb8[0].z, cb8[0].y
div r0.xy, r0.xyxx, r0.zzzz  // r0.x <- <remap return value>.x; r0.y <- <remap return value>.y

#line 32
mov r0.xy, r0.xyxx  // r0.x <- uv.x; r0.y <- uv.y

#line 33
div r0.z, l(0.500000), cb8[0].z
mul r1.x, r0.z, cb8[0].y
mov r1.y, l(0.500000)
mov r0.zw, -r1.xxxy
add r0.xy, r0.zwzz, r0.xyxx

#line 35
mov r0.z, l(0)  // r0.z <- geo

#line 37
nop 
mov r0.xy, r0.xyxx
mov r1.xy, l(0,0,0,0)
mov r0.w, l(0.170000)
mov r1.z, l(0.200000)

#line 27
min r1.w, cb8[0].z, cb8[0].y
div r1.w, l(2.000000), r1.w
add r1.w, r1.w, r1.z
mov r2.xy, -r1.xyxx
add r2.xy, r0.xyxx, r2.xyxx
dp2 r2.x, r2.xyxx, r2.xyxx
sqrt r2.x, r2.x
mov r1.z, -r1.z
add r1.w, r1.z, r1.w
add r1.z, r1.z, r2.x
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul r1.z, r1.w, r1.z
max r1.z, r1.z, l(0.000000)
min r1.z, r1.z, l(1.000000)
mul r1.w, r1.z, l(-2.000000)
add r1.w, r1.w, l(3.000000)
mul r1.z, r1.z, r1.z
mul r1.z, r1.z, r1.w
mov r1.z, -r1.z
add r1.z, r1.z, l(1.000000)
min r1.w, cb8[0].z, cb8[0].y
div r1.w, l(2.000000), r1.w
mov r1.w, -r1.w
add r1.w, r0.w, r1.w
mov r1.xy, -r1.xyxx
add r1.xy, r0.xyxx, r1.xyxx
dp2 r1.x, r1.xyxx, r1.xyxx
sqrt r1.x, r1.x
mov r1.y, -r1.w
add r0.w, r0.w, r1.y
add r1.x, r1.y, r1.x
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r0.w, r0.w, r1.x
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)
mul r1.x, r0.w, l(-2.000000)
add r1.x, r1.x, l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.x
mul r0.w, r0.w, r1.z  // r0.w <- <ring return value>

#line 37
add r0.z, r0.w, r0.z

#line 39
mov r0.w, -cb8[0].x
mul r0.w, r0.w, l(4.000000)  // r0.w <- rot

#line 41
sincos null, r1.x, r0.w
sincos r2.x, null, r0.w
sincos r1.z, null, r0.w
mov r1.y, -r1.z
sincos null, r2.y, r0.w
dp2 r1.x, r0.xyxx, r1.xyxx  // r1.x <- uv.x
dp2 r1.y, r0.xyxx, r2.xyxx  // r1.y <- uv.y

#line 43
mov r0.x, -r1.x
max r0.x, r0.x, r1.x
mov r0.y, -r1.y
max r0.w, r0.y, r1.y
min r1.z, r0.w, r0.x
max r1.w, r0.w, r0.x
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul r1.z, r1.w, r1.z
mul r1.w, r1.z, r1.z
mul r2.x, r1.w, l(0.020835)
add r2.x, r2.x, l(-0.085133)
mul r2.x, r1.w, r2.x
add r2.x, r2.x, l(0.180141)
mul r2.x, r1.w, r2.x
add r2.x, r2.x, l(-0.330299)
mul r1.w, r1.w, r2.x
add r1.w, r1.w, l(0.999866)
mul r1.z, r1.w, r1.z
lt r0.x, r0.w, r0.x
mul r0.w, r1.z, l(-2.000000)
add r0.w, r0.w, l(1.570796)
and r0.x, r0.x, r0.w
add r0.x, r1.z, r0.x
lt r0.y, r1.y, r0.y
and r0.y, r0.y, l(0xc0490fdb)
add r0.x, r0.y, r0.x
min r0.y, r1.y, r1.x
max r0.w, r1.y, r1.x
mov r1.z, -r0.y
lt r0.y, r0.y, r1.z
mov r1.z, -r0.w
ge r0.w, r0.w, r1.z
and r0.y, r0.w, r0.y
mov r0.w, -r0.x
movc r0.x, r0.y, r0.w, r0.x
mul r0.x, r0.x, l(3.141590)
mul r0.x, r0.x, l(0.050000)
add r0.x, r0.x, l(0.500000)  // r0.x <- a

#line 45
nop 
mov r1.xy, r1.xyxx
mov r0.yw, l(0,0,0,-0.185000)
mov r1.z, l(0.015000)

#line 22
add r1.w, r1.z, l(0.005000)
mov r0.yw, -r0.yyyw
add r0.yw, r0.yyyw, r1.xxxy
dp2 r0.y, r0.ywyy, r0.ywyy
sqrt r0.y, r0.y
mov r0.w, -r1.z
add r1.x, r0.w, r1.w
add r0.y, r0.w, r0.y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mul r0.y, r0.w, r0.y
max r0.y, r0.y, l(0.000000)
min r0.y, r0.y, l(1.000000)
mul r0.w, r0.y, l(-2.000000)
add r0.w, r0.w, l(3.000000)
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r0.w
mov r0.y, -r0.y
add r0.y, r0.y, l(1.000000)  // r0.y <- <circle return value>

#line 45
max r0.x, r0.y, r0.x

#line 47
mul r0.xyzw, r0.zzzz, r0.xxxx  // r0.x <- fragColor.x; r0.y <- fragColor.y; r0.z <- fragColor.z; r0.w <- fragColor.w

#line 55
mov r0.xyzw, r0.xyzw  // r0.x <- fragColor.x; r0.y <- fragColor.y; r0.z <- fragColor.z; r0.w <- fragColor.w

#line 57
mov o0.xyzw, r0.xyzw
ret 
// Approximately 134 instruction slots used
