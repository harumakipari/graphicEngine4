//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   float iTime;                       // Offset:    0 Size:     4
//   float2 iResolution;                // Offset:    4 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB8[1], immediateIndexed
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 4
div r0.x, l(0.500000), cb8[0].z
mul r0.x, r0.x, cb8[0].y
mov r0.y, l(0.500000)
min r0.z, cb8[0].z, cb8[0].y
div r1.xy, v0.xyxx, r0.zzzz
div r0.z, l(2.000000), r0.z
add r0.xy, -r0.xyxx, r1.xyxx
mul r0.w, cb8[0].x, l(-4.000000)
sincos r1.x, null, -r0.w
sincos r2.x, r3.x, r0.w
mov r1.y, r3.x
mov r1.z, r2.x
dp2 r2.y, r0.yxyy, r1.yzyy
dp2 r2.x, r0.yxyy, r1.xyxx
dp2 r0.x, r0.xyxx, r0.xyxx
sqrt r0.x, r0.x
max r0.y, |r2.y|, |r2.x|
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.w, |r2.y|, |r2.x|
mul r0.y, r0.y, r0.w
mul r0.w, r0.y, r0.y
mad r1.x, r0.w, l(0.020835), l(-0.085133)
mad r1.x, r0.w, r1.x, l(0.180141)
mad r1.x, r0.w, r1.x, l(-0.330299)
mad r0.w, r0.w, r1.x, l(0.999866)
mul r1.x, r0.w, r0.y
mad r1.x, r1.x, l(-2.000000), l(1.570796)
lt r1.y, |r2.y|, |r2.x|
and r1.x, r1.y, r1.x
mad r0.y, r0.y, r0.w, r1.x
lt r0.w, r2.y, -r2.y
and r0.w, r0.w, l(0xc0490fdb)
add r0.y, r0.w, r0.y
min r0.w, r2.y, r2.x
lt r0.w, r0.w, -r0.w
max r1.x, r2.y, r2.x
add r1.yz, r2.xxyx, l(0.000000, -0.000000, 0.185000, 0.000000)
dp2 r1.y, r1.yzyy, r1.yzyy
sqrt r1.y, r1.y
add r1.y, r1.y, l(-0.015000)
mul_sat r1.y, r1.y, l(200.000000)
ge r1.x, r1.x, -r1.x
and r0.w, r0.w, r1.x
movc r0.y, r0.w, -r0.y, r0.y
mad r0.y, r0.y, l(0.157080), l(0.500000)
mad r0.w, r1.y, l(-2.000000), l(3.000000)
mul r1.x, r1.y, r1.y
mad r0.w, -r0.w, r1.x, l(1.000000)
max r0.y, r0.w, r0.y
add r0.w, -r0.z, l(0.170000)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
add r1.x, -r0.w, r0.x
add r0.x, r0.x, l(-0.200000)
mul_sat r0.x, r0.z, r0.x
add r0.z, -r0.w, l(0.170000)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mul_sat r0.z, r0.z, r1.x
mad r0.w, r0.z, l(-2.000000), l(3.000000)
mul r0.z, r0.z, r0.z
mul r0.z, r0.z, r0.w
mad r0.w, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mad r0.x, -r0.w, r0.x, l(1.000000)
mul r0.x, r0.z, r0.x
mul o0.xyzw, r0.xxxx, r0.yyyy
ret 
// Approximately 66 instruction slots used
