//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 cameraPositon;              // Offset:   64 Size:    16 [unused]
//   row_major float4x4 view;           // Offset:   80 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset:  144 Size:    64 [unused]
//   row_major float4x4 inverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 inverseViewProjection;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 invView;        // Offset:  336 Size:    64
//
// }
//
// Resource bind info for particleDataBuffer
// {
//
//   struct ParticleData
//   {
//       
//       float4 parameter;              // Offset:    0
//       float4 position;               // Offset:   16
//       float4 rotation;               // Offset:   32
//       float4 scale;                  // Offset:   48
//       float4 velocity;               // Offset:   64
//       float4 acceleration;           // Offset:   80
//       float4 texcoord;               // Offset:   96
//       float4 color;                  // Offset:  112
//       float4 customData;             // Offset:  128
//
//   } $Element;                        // Offset:    0 Size:   144
//
// }
//
// Resource bind info for particleHeaderBuffer
// {
//
//   struct ParticleHeader
//   {
//       
//       uint alive;                    // Offset:    0
//       uint particleIndex;            // Offset:    4
//       float depth;                   // Offset:    8
//       uint dummy;                    // Offset:   12
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleDataBuffer                texture  struct         r/o             t0      1 
// particleHeaderBuffer              texture  struct         r/o             t1      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb4      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// VERTEX_ID                0   x           0     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.500000, -0.500000, 0, 1.000000},
                              { 0.500000, -0.500000, 0, 1.000000},
                              { -0.500000, 0.500000, 0, 1.000000},
                              { 0.500000, 0.500000, 0, 1.000000},
                              { 0, 0, 0, 0},
                              { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 1.000000, 1.000000, 0, 0} }
dcl_constantbuffer CB4[23], immediateIndexed
dcl_resource_structured t0, 144
dcl_resource_structured t1, 16
dcl_input v[1][0].x
dcl_temps 8
dcl_inputprimitive point 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_maxout 4
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.xy, v[0][0].x, l(0), t1.xyxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r0.zw, r0.y, l(4), t0.xxxy
div r0.z, r0.z, r0.w
movc r0.z, r0.x, r0.z, l(0)
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r1.xyzw, r0.y, l(48), t0.xyzw
add r1.xy, -r1.zwzz, r1.xyxx
mad r0.zw, r0.zzzz, r1.xxxy, r1.zzzw
movc r0.xz, r0.xxxx, r0.zzwz, l(0,0,0,0)
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r1.xyz, r0.y, l(32), t0.xyzx
sincos r1.xyz, r2.xyz, r1.xyzx
mul r3.xyz, r2.yxyy, r2.zzxz
mul r4.xy, r1.xyxx, r1.zzzz
mad r5.x, r4.x, r1.y, r3.x
mul r6.xyzw, r1.zyxz, r2.xzzy
mad r7.x, r4.x, r2.y, -r6.y
mad r5.y, r6.z, r1.y, -r6.w
mad r7.y, r6.z, r2.y, r4.y
mul r5.z, r1.y, r2.x
mov r6.z, -r1.x
dp3 r0.w, cb4[21].xyzx, r5.xyzx
mov r6.y, r3.y
dp3 r1.x, cb4[21].xyzx, r6.xyzx
mov r7.z, r3.z
dp3 r1.y, cb4[21].xyzx, r7.xyzx
dp3 r1.z, cb4[22].xyzx, r5.xyzx
dp3 r1.w, cb4[22].xyzx, r6.xyzx
dp3 r2.x, cb4[22].xyzx, r7.xyzx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r3.xyz, r0.y, l(16), t0.xyzx
mul r4.z, r0.w, r0.x
mul r4.xy, r0.xxxx, r1.yxyy
mul r4.w, r0.x, cb4[21].w
mul r5.yz, r0.zzzz, r1.wwzw
mul r5.x, r0.z, r2.x
mul r5.w, r0.z, cb4[22].w
mov r3.w, l(1.000000)
dp2 r0.x, r4.wzww, r3.xwxx
dp2 r0.z, r4.wyww, r3.ywyy
dp2 r0.w, r4.wxww, r3.zwzz
dp2 r1.x, r5.wzww, r3.xwxx
dp2 r1.y, r5.wyww, r3.ywyy
dp2 r1.z, r5.wxww, r3.zwzz
mul r2.xyzw, r0.zzzz, cb4[1].xyzw
mad r2.xyzw, r0.xxxx, cb4[0].xyzw, r2.xyzw
mad r2.xyzw, r0.wwww, cb4[2].xyzw, r2.xyzw
mad r2.xyzw, r4.wwww, cb4[3].xyzw, r2.xyzw
mul r4.xyzw, r1.yyyy, cb4[1].xyzw
mad r4.xyzw, r1.xxxx, cb4[0].xyzw, r4.xyzw
mad r1.xyzw, r1.zzzz, cb4[2].xyzw, r4.xyzw
mad r1.xyzw, r5.wwww, cb4[3].xyzw, r1.xyzw
mul r4.xyzw, r3.yyyy, cb4[1].xyzw
mad r4.xyzw, r3.xxxx, cb4[0].xyzw, r4.xyzw
mad r3.xyzw, r3.zzzz, cb4[2].xyzw, r4.xyzw
add r3.xyzw, r3.xyzw, cb4[3].xyzw
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r4.xyzw, r0.y, l(96), t0.xyzw
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r0.xyzw, r0.y, l(112), t0.xyzw
mov r5.x, l(0)
loop 
  uge r5.y, r5.x, l(4)
  breakc_nz r5.y
  mul r6.xyzw, r1.xyzw, icb[r5.x + 0].yyyy
  mad r6.xyzw, icb[r5.x + 0].xxxx, r2.xyzw, r6.xyzw
  add r6.xyzw, r3.xyzw, r6.xyzw
  mad r5.yz, r4.zzwz, icb[r5.x + 4].xxyx, r4.xxyx
  mov o0.xyzw, r6.xyzw
  mov o1.xyzw, r0.xyzw
  mov o2.xy, r5.yzyy
  emit_stream m0
  iadd r5.x, r5.x, l(1)
endloop 
cut_stream m0
ret 
// Approximately 71 instruction slots used
