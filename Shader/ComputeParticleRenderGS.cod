//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 vviewProjection;// Offset:    0 Size:    64
//   float4 vcameraPositon;             // Offset:   64 Size:    16 [unused]
//   row_major float4x4 vview;          // Offset:   80 Size:    64 [unused]
//   row_major float4x4 vprojection;    // Offset:  144 Size:    64 [unused]
//   row_major float4x4 vinverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 vinverseViewProjection;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 vinvView;       // Offset:  336 Size:    64
//
// }
//
// Resource bind info for particleDataBuffer
// {
//
//   struct ParticleData
//   {
//       
//       float4 parameter;              // Offset:    0
//       float4 position;               // Offset:   16
//       float4 rotation;               // Offset:   32
//       float4 scale;                  // Offset:   48
//       float4 velocity;               // Offset:   64
//       float4 acceleration;           // Offset:   80
//       float4 texcoord;               // Offset:   96
//       float4 color;                  // Offset:  112
//       float4 customData;             // Offset:  128
//
//   } $Element;                        // Offset:    0 Size:   144
//
// }
//
// Resource bind info for particleHeaderBuffer
// {
//
//   struct ParticleHeader
//   {
//       
//       uint alive;                    // Offset:    0
//       uint particleIndex;            // Offset:    4
//       float depth;                   // Offset:    8
//       uint dummy;                    // Offset:   12
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleDataBuffer                texture  struct         r/o             t0      1 
// particleHeaderBuffer              texture  struct         r/o             t1      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// VERTEX_ID                0   x           0     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
gs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB8[24], immediateIndexed
dcl_resource_structured t0, 144
dcl_resource_structured t1, 16
dcl_input v[1][0].x
dcl_temps 16
dcl_indexableTemp x0[4], 4
dcl_indexableTemp x1[4], 4
dcl_inputprimitive point 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_maxout 4
//
// Initial variable locations:
//   m0 <- output; 
//   v[0][0].x <- gin; 
//   x0 <- vertexPositions; x1 <- vertexTexcoords
//
#line 125 "C:\Users\2240225\Desktop\3Dsoftbody\Shader\ComputeParticleRenderGS.hlsl"
itof r0.zw, l(0, 0, 0, 1)
itof r1.zw, l(0, 0, 0, 1)
itof r2.zw, l(0, 0, 0, 1)
itof r3.zw, l(0, 0, 0, 1)
mov r0.xy, l(-0.500000,-0.500000,0,0)
mov x0[0].xyzw, r0.xyzw
mov r1.xy, l(0.500000,-0.500000,0,0)
mov x0[1].xyzw, r1.xyzw
mov r2.xy, l(-0.500000,0.500000,0,0)
mov x0[2].xyzw, r2.xyzw
mov r3.xy, l(0.500000,0.500000,0,0)
mov x0[3].xyzw, r3.xyzw

#line 132
itof r0.xy, l(0, 0, 0, 0)
itof r0.zw, l(0, 0, 1, 0)
itof r1.xy, l(0, 1, 0, 0)
itof r1.zw, l(0, 0, 1, 1)
mov x1[0].xy, r0.xyxx
mov x1[1].xy, r0.zwzz
mov x1[2].xy, r1.xyxx
mov x1[3].xy, r1.zwzz

#line 95
mov r0.x, v[0][0].x  // r0.x <- vertexId

#line 98
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(0), t1.xxxx
mov r0.z, l(0)
ine r0.y, r0.z, r0.y  // r0.y <- isAlive

#line 99
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.x, r0.x, l(4), t1.xxxx  // r0.x <- particleIndex

#line 102
not r0.z, r0.y
itof r0.w, l(0)
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r1.x, r0.x, l(4), t0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r1.y, r0.x, l(8), t0.xxxx
div r1.x, r1.x, r1.y
movc r0.z, r0.z, r0.w, r1.x  // r0.z <- lifeTimeRate

#line 105
not r0.y, r0.y
itof r1.xy, l(0, 0, 0, 0)
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r2.x, r0.x, l(56), t0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r2.y, r0.x, l(60), t0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r3.x, r0.x, l(48), t0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r3.y, r0.x, l(52), t0.xxxx
mov r1.zw, -r2.xxxy
add r1.zw, r1.zzzw, r3.xxxy
mul r0.zw, r0.zzzz, r1.zzzw
add r0.zw, r0.zzzw, r2.xxxy
movc r1.xy, r0.yyyy, r1.xyxx, r0.zwzz  // r1.x <- size.x; r1.y <- size.y

#line 109
mov r2.xyzw, cb8[21].xyzw  // r2.x <- billbordMatrix._m00; r2.y <- billbordMatrix._m01; r2.z <- billbordMatrix._m02; r2.w <- billbordMatrix._m03
mov r3.xyzw, cb8[22].xyzw  // r3.x <- billbordMatrix._m10; r3.y <- billbordMatrix._m11; r3.z <- billbordMatrix._m12; r3.w <- billbordMatrix._m13
mov r4.xyzw, cb8[23].xyzw  // r4.x <- billbordMatrix._m20; r4.y <- billbordMatrix._m21; r4.z <- billbordMatrix._m22; r4.w <- billbordMatrix._m23

#line 110
itof r5.xyz, l(0, 0, 0, 0)  // r5.x <- billbordMatrix._m30; r5.y <- billbordMatrix._m31; r5.z <- billbordMatrix._m32

#line 111
mov r5.w, l(1.000000)  // r5.w <- billbordMatrix._m33

#line 114
nop 
itof r6.z, l(1)
mov r1.xy, r1.xyxx

#line 7
mov r7.x, r1.x  // r7.x <- m._m00

#line 8
mov r7.y, l(0)  // r7.y <- m._m01

#line 9
mov r7.z, l(0)  // r7.z <- m._m02

#line 10
mov r7.w, l(0)  // r7.w <- m._m03

#line 12
mov r1.x, l(0)  // r1.x <- m._m10

#line 13
mov r1.y, r1.y  // r1.y <- m._m11

#line 14
mov r1.z, l(0)  // r1.z <- m._m12

#line 15
mov r1.w, l(0)  // r1.w <- m._m13

#line 17
mov r6.x, l(0)  // r6.x <- m._m20

#line 18
mov r6.y, l(0)  // r6.y <- m._m21

#line 19
mov r6.z, r6.z  // r6.z <- m._m22

#line 20
mov r6.w, l(0)  // r6.w <- m._m23

#line 22
mov r8.x, l(0)  // r8.x <- m._m30

#line 23
mov r8.y, l(0)  // r8.y <- m._m31

#line 24
mov r8.z, l(0)  // r8.z <- m._m32

#line 25
mov r8.w, l(1.000000)  // r8.w <- m._m33

#line 26
mov r7.x, r7.x  // r7.x <- <MatrixScaling return value>._m00
mov r7.y, r7.y  // r7.y <- <MatrixScaling return value>._m01
mov r7.z, r7.z  // r7.z <- <MatrixScaling return value>._m02
mov r7.w, r7.w  // r7.w <- <MatrixScaling return value>._m03
mov r1.x, r1.x  // r1.x <- <MatrixScaling return value>._m10
mov r1.y, r1.y  // r1.y <- <MatrixScaling return value>._m11
mov r1.z, r1.z  // r1.z <- <MatrixScaling return value>._m12
mov r1.w, r1.w  // r1.w <- <MatrixScaling return value>._m13
mov r6.x, r6.x  // r6.x <- <MatrixScaling return value>._m20
mov r6.y, r6.y  // r6.y <- <MatrixScaling return value>._m21
mov r6.z, r6.z  // r6.z <- <MatrixScaling return value>._m22
mov r6.w, r6.w  // r6.w <- <MatrixScaling return value>._m23
mov r8.x, r8.x  // r8.x <- <MatrixScaling return value>._m30
mov r8.y, r8.y  // r8.y <- <MatrixScaling return value>._m31
mov r8.z, r8.z  // r8.z <- <MatrixScaling return value>._m32
mov r8.w, r8.w  // r8.w <- <MatrixScaling return value>._m33

#line 114
mov r7.xyzw, r7.xyzw  // r7.x <- scaleMatrix._m00; r7.y <- scaleMatrix._m01; r7.z <- scaleMatrix._m02; r7.w <- scaleMatrix._m03
mov r1.xyzw, r1.xyzw  // r1.x <- scaleMatrix._m10; r1.y <- scaleMatrix._m11; r1.z <- scaleMatrix._m12; r1.w <- scaleMatrix._m13
mov r6.xyzw, r6.xyzw  // r6.x <- scaleMatrix._m20; r6.y <- scaleMatrix._m21; r6.z <- scaleMatrix._m22; r6.w <- scaleMatrix._m23
mov r8.xyzw, r8.xyzw  // r8.x <- scaleMatrix._m30; r8.y <- scaleMatrix._m31; r8.z <- scaleMatrix._m32; r8.w <- scaleMatrix._m33

#line 115
nop 
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(32), t0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r0.z, r0.x, l(36), t0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r0.w, r0.x, l(40), t0.xxxx

#line 35
sincos r9.x, null, r0.y  // r9.x <- sp
sincos null, r0.y, r0.y  // r0.y <- cp

#line 36
sincos r9.y, null, r0.z  // r9.y <- sy
sincos null, r0.z, r0.z  // r0.z <- cy

#line 37
sincos r9.z, null, r0.w  // r9.z <- sr
sincos null, r0.w, r0.w  // r0.w <- cr

#line 40
mul r9.w, r0.z, r0.w
mul r10.x, r9.x, r9.z
mul r10.x, r9.y, r10.x
add r10.x, r9.w, r10.x  // r10.x <- m._m00

#line 41
mul r11.x, r0.y, r9.z  // r11.x <- m._m01

#line 42
mul r9.w, r9.x, r9.z
mul r9.w, r0.z, r9.w
mul r12.x, r9.y, r0.w
mov r12.x, -r12.x
add r12.x, r9.w, r12.x  // r12.x <- m._m02

#line 43
mov r13.x, l(0)  // r13.x <- m._m03

#line 45
mul r9.w, r9.x, r0.w
mul r9.w, r9.y, r9.w
mul r14.x, r0.z, r9.z
mov r14.x, -r14.x
add r10.y, r9.w, r14.x  // r10.y <- m._m10

#line 46
mul r11.y, r0.y, r0.w  // r11.y <- m._m11

#line 47
mul r9.z, r9.y, r9.z
mul r0.w, r9.x, r0.w
mul r0.w, r0.z, r0.w
add r12.y, r0.w, r9.z  // r12.y <- m._m12

#line 48
mov r13.y, l(0)  // r13.y <- m._m13

#line 50
mul r10.z, r0.y, r9.y  // r10.z <- m._m20

#line 51
mov r11.z, -r9.x  // r11.z <- m._m21

#line 52
mul r12.z, r0.z, r0.y  // r12.z <- m._m22

#line 53
mov r13.z, l(0)  // r13.z <- m._m23

#line 55
mov r10.w, l(0)  // r10.w <- m._m30

#line 56
mov r11.w, l(0)  // r11.w <- m._m31

#line 57
mov r12.w, l(0)  // r12.w <- m._m32

#line 58
mov r13.w, l(1.000000)  // r13.w <- m._m33

#line 59
mov r10.x, r10.x  // r10.x <- <MatrixRotationRollPitchYaw return value>._m00
mov r10.y, r10.y  // r10.y <- <MatrixRotationRollPitchYaw return value>._m10
mov r10.z, r10.z  // r10.z <- <MatrixRotationRollPitchYaw return value>._m20
mov r10.w, r10.w  // r10.w <- <MatrixRotationRollPitchYaw return value>._m30
mov r11.x, r11.x  // r11.x <- <MatrixRotationRollPitchYaw return value>._m01
mov r11.y, r11.y  // r11.y <- <MatrixRotationRollPitchYaw return value>._m11
mov r11.z, r11.z  // r11.z <- <MatrixRotationRollPitchYaw return value>._m21
mov r11.w, r11.w  // r11.w <- <MatrixRotationRollPitchYaw return value>._m31
mov r12.x, r12.x  // r12.x <- <MatrixRotationRollPitchYaw return value>._m02
mov r12.y, r12.y  // r12.y <- <MatrixRotationRollPitchYaw return value>._m12
mov r12.z, r12.z  // r12.z <- <MatrixRotationRollPitchYaw return value>._m22
mov r12.w, r12.w  // r12.w <- <MatrixRotationRollPitchYaw return value>._m32
mov r13.x, r13.x  // r13.x <- <MatrixRotationRollPitchYaw return value>._m03
mov r13.y, r13.y  // r13.y <- <MatrixRotationRollPitchYaw return value>._m13
mov r13.z, r13.z  // r13.z <- <MatrixRotationRollPitchYaw return value>._m23
mov r13.w, r13.w  // r13.w <- <MatrixRotationRollPitchYaw return value>._m33

#line 115
dp4 r9.x, r2.xyzw, r10.xyzw  // r9.x <- rotationMatrix._m00
dp4 r14.x, r2.xyzw, r11.xyzw  // r14.x <- rotationMatrix._m01
dp4 r15.x, r2.xyzw, r12.xyzw  // r15.x <- rotationMatrix._m02
dp4 r2.x, r2.xyzw, r13.xyzw  // r2.x <- rotationMatrix._m03
dp4 r9.y, r3.xyzw, r10.xyzw  // r9.y <- rotationMatrix._m10
dp4 r14.y, r3.xyzw, r11.xyzw  // r14.y <- rotationMatrix._m11
dp4 r15.y, r3.xyzw, r12.xyzw  // r15.y <- rotationMatrix._m12
dp4 r2.y, r3.xyzw, r13.xyzw  // r2.y <- rotationMatrix._m13
dp4 r9.z, r4.xyzw, r10.xyzw  // r9.z <- rotationMatrix._m20
dp4 r14.z, r4.xyzw, r11.xyzw  // r14.z <- rotationMatrix._m21
dp4 r15.z, r4.xyzw, r12.xyzw  // r15.z <- rotationMatrix._m22
dp4 r2.z, r4.xyzw, r13.xyzw  // r2.z <- rotationMatrix._m23
dp4 r9.w, r5.xyzw, r10.xyzw  // r9.w <- rotationMatrix._m30
dp4 r14.w, r5.xyzw, r11.xyzw  // r14.w <- rotationMatrix._m31
dp4 r15.w, r5.xyzw, r12.xyzw  // r15.w <- rotationMatrix._m32
dp4 r2.w, r5.xyzw, r13.xyzw  // r2.w <- rotationMatrix._m33

#line 116
nop 
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r3.w, r0.x, l(16), t0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r4.w, r0.x, l(20), t0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r5.w, r0.x, l(24), t0.xxxx

#line 66
mov r3.x, l(1.000000)  // r3.x <- m._m00

#line 67
mov r4.x, l(0)  // r4.x <- m._m01

#line 68
mov r5.x, l(0)  // r5.x <- m._m02

#line 69
mov r10.x, l(0)  // r10.x <- m._m03

#line 71
mov r3.y, l(0)  // r3.y <- m._m10

#line 72
mov r4.y, l(1.000000)  // r4.y <- m._m11

#line 73
mov r5.y, l(0)  // r5.y <- m._m12

#line 74
mov r10.y, l(0)  // r10.y <- m._m13

#line 76
mov r3.z, l(0)  // r3.z <- m._m20

#line 77
mov r4.z, l(0)  // r4.z <- m._m21

#line 78
mov r5.z, l(1.000000)  // r5.z <- m._m22

#line 79
mov r10.z, l(0)  // r10.z <- m._m23

#line 81
mov r3.w, r3.w  // r3.w <- m._m30

#line 82
mov r4.w, r4.w  // r4.w <- m._m31

#line 83
mov r5.w, r5.w  // r5.w <- m._m32

#line 84
mov r10.w, l(1.000000)  // r10.w <- m._m33

#line 85
mov r3.x, r3.x  // r3.x <- <MatrixTranslation return value>._m00
mov r3.y, r3.y  // r3.y <- <MatrixTranslation return value>._m10
mov r3.z, r3.z  // r3.z <- <MatrixTranslation return value>._m20
mov r3.w, r3.w  // r3.w <- <MatrixTranslation return value>._m30
mov r4.x, r4.x  // r4.x <- <MatrixTranslation return value>._m01
mov r4.y, r4.y  // r4.y <- <MatrixTranslation return value>._m11
mov r4.z, r4.z  // r4.z <- <MatrixTranslation return value>._m21
mov r4.w, r4.w  // r4.w <- <MatrixTranslation return value>._m31
mov r5.x, r5.x  // r5.x <- <MatrixTranslation return value>._m02
mov r5.y, r5.y  // r5.y <- <MatrixTranslation return value>._m12
mov r5.z, r5.z  // r5.z <- <MatrixTranslation return value>._m22
mov r5.w, r5.w  // r5.w <- <MatrixTranslation return value>._m32
mov r10.x, r10.x  // r10.x <- <MatrixTranslation return value>._m03
mov r10.y, r10.y  // r10.y <- <MatrixTranslation return value>._m13
mov r10.z, r10.z  // r10.z <- <MatrixTranslation return value>._m23
mov r10.w, r10.w  // r10.w <- <MatrixTranslation return value>._m33

#line 116
mov r3.xyzw, r3.xyzw  // r3.x <- translationMatrix._m00; r3.y <- translationMatrix._m10; r3.z <- translationMatrix._m20; r3.w <- translationMatrix._m30
mov r4.xyzw, r4.xyzw  // r4.x <- translationMatrix._m01; r4.y <- translationMatrix._m11; r4.z <- translationMatrix._m21; r4.w <- translationMatrix._m31
mov r5.xyzw, r5.xyzw  // r5.x <- translationMatrix._m02; r5.y <- translationMatrix._m12; r5.z <- translationMatrix._m22; r5.w <- translationMatrix._m32
mov r10.xyzw, r10.xyzw  // r10.x <- translationMatrix._m03; r10.y <- translationMatrix._m13; r10.z <- translationMatrix._m23; r10.w <- translationMatrix._m33

#line 117
dp4 r11.x, r7.xyzw, r9.xyzw
dp4 r11.y, r7.xyzw, r14.xyzw
dp4 r11.z, r7.xyzw, r15.xyzw
dp4 r11.w, r7.xyzw, r2.xyzw
dp4 r7.x, r1.xyzw, r9.xyzw
dp4 r7.y, r1.xyzw, r14.xyzw
dp4 r7.z, r1.xyzw, r15.xyzw
dp4 r7.w, r1.xyzw, r2.xyzw
dp4 r1.x, r6.xyzw, r9.xyzw
dp4 r1.y, r6.xyzw, r14.xyzw
dp4 r1.z, r6.xyzw, r15.xyzw
dp4 r1.w, r6.xyzw, r2.xyzw
dp4 r6.x, r8.xyzw, r9.xyzw
dp4 r6.y, r8.xyzw, r14.xyzw
dp4 r6.z, r8.xyzw, r15.xyzw
dp4 r6.w, r8.xyzw, r2.xyzw
dp4 r0.y, r11.xyzw, r3.xyzw  // r0.y <- worldMatrix._m00
dp4 r0.z, r11.xyzw, r4.xyzw  // r0.z <- worldMatrix._m01
dp4 r0.w, r11.xyzw, r5.xyzw  // r0.w <- worldMatrix._m02
dp4 r2.x, r11.xyzw, r10.xyzw  // r2.x <- worldMatrix._m03
dp4 r2.y, r7.xyzw, r3.xyzw  // r2.y <- worldMatrix._m10
dp4 r2.z, r7.xyzw, r4.xyzw  // r2.z <- worldMatrix._m11
dp4 r2.w, r7.xyzw, r5.xyzw  // r2.w <- worldMatrix._m12
dp4 r7.x, r7.xyzw, r10.xyzw  // r7.x <- worldMatrix._m13
dp4 r7.y, r1.xyzw, r3.xyzw  // r7.y <- worldMatrix._m20
dp4 r7.z, r1.xyzw, r4.xyzw  // r7.z <- worldMatrix._m21
dp4 r7.w, r1.xyzw, r5.xyzw  // r7.w <- worldMatrix._m22
dp4 r1.x, r1.xyzw, r10.xyzw  // r1.x <- worldMatrix._m23
dp4 r1.y, r6.xyzw, r3.xyzw  // r1.y <- worldMatrix._m30
dp4 r1.z, r6.xyzw, r4.xyzw  // r1.z <- worldMatrix._m31
dp4 r1.w, r6.xyzw, r5.xyzw  // r1.w <- worldMatrix._m32
dp4 r3.x, r6.xyzw, r10.xyzw  // r3.x <- worldMatrix._m33

#line 118
mul r4.xyzw, r0.yyyy, cb8[0].xyzw
mul r5.xyzw, r0.zzzz, cb8[1].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r0.wwww, cb8[2].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r2.xxxx, cb8[3].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r2.yyyy, cb8[0].xyzw
mul r6.xyzw, r2.zzzz, cb8[1].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r2.xyzw, r2.wwww, cb8[2].xyzw
add r2.xyzw, r2.xyzw, r5.xyzw
mul r5.xyzw, r7.xxxx, cb8[3].xyzw
add r2.xyzw, r2.xyzw, r5.xyzw
mul r5.xyzw, r7.yyyy, cb8[0].xyzw
mul r6.xyzw, r7.zzzz, cb8[1].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, r7.wwww, cb8[2].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, r1.xxxx, cb8[3].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, r1.yyyy, cb8[0].xyzw
mul r7.xyzw, r1.zzzz, cb8[1].xyzw
add r6.xyzw, r6.xyzw, r7.xyzw
mul r1.xyzw, r1.wwww, cb8[2].xyzw
add r1.xyzw, r1.xyzw, r6.xyzw
mul r3.xyzw, r3.xxxx, cb8[3].xyzw
add r1.xyzw, r1.xyzw, r3.xyzw
mov r3.x, r4.x  // r3.x <- worldViewProjectionMatrix._m00
mov r3.y, r2.x  // r3.y <- worldViewProjectionMatrix._m10
mov r3.z, r5.x  // r3.z <- worldViewProjectionMatrix._m20
mov r3.w, r1.x  // r3.w <- worldViewProjectionMatrix._m30
mov r6.x, r4.y  // r6.x <- worldViewProjectionMatrix._m01
mov r6.y, r2.y  // r6.y <- worldViewProjectionMatrix._m11
mov r6.z, r5.y  // r6.z <- worldViewProjectionMatrix._m21
mov r6.w, r1.y  // r6.w <- worldViewProjectionMatrix._m31
mov r7.x, r4.z  // r7.x <- worldViewProjectionMatrix._m02
mov r7.y, r2.z  // r7.y <- worldViewProjectionMatrix._m12
mov r7.z, r5.z  // r7.z <- worldViewProjectionMatrix._m22
mov r7.w, r1.z  // r7.w <- worldViewProjectionMatrix._m32
mov r1.x, r4.w  // r1.x <- worldViewProjectionMatrix._m03
mov r1.y, r2.w  // r1.y <- worldViewProjectionMatrix._m13
mov r1.z, r5.w  // r1.z <- worldViewProjectionMatrix._m23
mov r1.w, r1.w  // r1.w <- worldViewProjectionMatrix._m33

#line 121
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r2.x, r0.x, l(96), t0.xxxx  // r2.x <- texcoord.x
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r2.y, r0.x, l(100), t0.xxxx  // r2.y <- texcoord.y
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r2.z, r0.x, l(104), t0.xxxx  // r2.z <- texcoord.z
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r2.w, r0.x, l(108), t0.xxxx  // r2.w <- texcoord.w

#line 122
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r4.x, r0.x, l(112), t0.xxxx  // r4.x <- color.x
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r4.y, r0.x, l(116), t0.xxxx  // r4.y <- color.y
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r4.z, r0.x, l(120), t0.xxxx  // r4.z <- color.z
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r4.w, r0.x, l(124), t0.xxxx  // r4.w <- color.w

#line 139
mov r0.x, l(0)  // r0.x <- i
mov r0.y, r0.x  // r0.y <- i
loop 
  mov r0.z, l(4)
  ult r0.z, r0.y, r0.z
  breakc_z r0.z

#line 142
  mov r5.xyzw, x0[r0.y + 0].xyzw
  dp4 r8.x, r5.xyzw, r3.xyzw  // r8.x <- element.position.x
  dp4 r8.y, r5.xyzw, r6.xyzw  // r8.y <- element.position.y
  dp4 r8.z, r5.xyzw, r7.xyzw  // r8.z <- element.position.z
  dp4 r8.w, r5.xyzw, r1.xyzw  // r8.w <- element.position.w

#line 143
  mov r0.zw, x1[r0.y + 0].xxxy
  mul r0.zw, r0.zzzw, r2.zzzw
  add r0.zw, r0.zzzw, r2.xxxy  // r0.z <- element.texcoord.x; r0.w <- element.texcoord.y

#line 144
  mov r5.xyzw, r4.xyzw  // r5.x <- element.color.x; r5.y <- element.color.y; r5.z <- element.color.z; r5.w <- element.color.w

#line 145
  mov o0.xyzw, r8.xyzw
  mov o1.xyzw, r5.xyzw
  mov o2.xy, r0.zwzz
  emit_stream m0

#line 146
  iadd r0.y, r0.y, l(1)
endloop 

#line 147
cut_stream m0

#line 148
ret 
// Approximately 305 instruction slots used
