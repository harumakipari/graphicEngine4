//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PARTICLE_SYSTEM_CONSTANTS
// {
//
//   float4 emissionPosition;           // Offset:    0 Size:    16 [unused]
//   float2 emissionOffset;             // Offset:   16 Size:     8 [unused]
//   float2 emissionSize;               // Offset:   24 Size:     8 [unused]
//   float2 emisionConeAngle;           // Offset:   32 Size:     8 [unused]
//   float2 emissionSpeed;              // Offset:   40 Size:     8 [unused]
//   float2 emissionAngularSpeed;       // Offset:   48 Size:     8 [unused]
//   float2 lifespan;                   // Offset:   56 Size:     8 [unused]
//   float2 spawnDelay;                 // Offset:   64 Size:     8 [unused]
//   float2 fadeDuration;               // Offset:   72 Size:     8 [unused]
//   float4 emissionStartColor;         // Offset:   80 Size:    16 [unused]
//   float4 emissionEndColor;           // Offset:   96 Size:    16 [unused]
//   float currentTime;                 // Offset:  112 Size:     4 [unused]
//   float deltaTime;                   // Offset:  116 Size:     4 [unused]
//   float _noiseScale;                 // Offset:  120 Size:     4 [unused]
//   float gravity;                     // Offset:  124 Size:     4 [unused]
//   uint2 spriteSheetGrid;             // Offset:  128 Size:     8
//   uint maxParticleCount;             // Offset:  136 Size:     4 [unused]
//   float3 direction;                  // Offset:  144 Size:    12 [unused]
//   float strength;                    // Offset:  156 Size:     4 [unused]
//   row_major float4x4 nodeWorldTransform;// Offset:  160 Size:    64 [unused]
//   row_major float4x4 worldTransform; // Offset:  224 Size:    64 [unused]
//   float2 radius;                     // Offset:  288 Size:     8 [unused]
//   bool loop;                         // Offset:  296 Size:     4 [unused]
//   int type;                          // Offset:  300 Size:     4 [unused]
//      = 0x00000000 
//   int isStatic;                      // Offset:  304 Size:     4 [unused]
//
// }
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 vviewProjection;// Offset:    0 Size:    64
//   float4 vcameraPositon;             // Offset:   64 Size:    16 [unused]
//   row_major float4x4 vview;          // Offset:   80 Size:    64 [unused]
//   row_major float4x4 vprojection;    // Offset:  144 Size:    64 [unused]
//   row_major float4x4 vinverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 vinverseViewProjection;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 vinvView;       // Offset:  336 Size:    64 [unused]
//
// }
//
// Resource bind info for particleBuffer
// {
//
//   struct Particle
//   {
//       
//       int state;                     // Offset:    0
//       float4 color;                  // Offset:    4
//       float3 position;               // Offset:   20
//       float mass;                    // Offset:   32
//       float angle;                   // Offset:   36
//       float angularSpeed;            // Offset:   40
//       float3 velocity;               // Offset:   44
//       float lifespan;                // Offset:   56
//       float age;                     // Offset:   60
//       float2 size;                   // Offset:   64
//       uint chip;                     // Offset:   72
//
//   } $Element;                        // Offset:    0 Size:    76
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleBuffer                    texture  struct         r/o             t9      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb8      1 
// PARTICLE_SYSTEM_CONSTANTS         cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// VERTEXID                 0   x           0     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
gs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB9[9], immediateIndexed
dcl_constantbuffer CB8[4], immediateIndexed
dcl_resource_structured t9, 76
dcl_input v[1][0].x
dcl_temps 7
dcl_indexableTemp x0[4], 4
dcl_indexableTemp x1[4], 4
dcl_inputprimitive point 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_maxout 4
//
// Initial variable locations:
//   m0 <- output; 
//   v[0][0].x <- input; 
//   x0 <- corners; x1 <- texcoords
//
#line 16 "C:\Users\2240225\Desktop\3Dsoftbody\Shader\ParticleGS.hlsl"
mov x0[0].xy, l(-1.000000,-1.000000,0,0)
mov x0[1].xy, l(-1.000000,1.000000,0,0)
mov x0[2].xy, l(1.000000,-1.000000,0,0)
mov x0[3].xy, l(1.000000,1.000000,0,0)

#line 23
mov x1[0].xy, l(0,1.000000,0,0)
mov x1[1].xy, l(0,0,0,0)
mov x1[2].xy, l(1.000000,1.000000,0,0)
mov x1[3].xy, l(1.000000,0,0,0)

#line 31
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r0.x, v[0][0].x, l(4), t9.xxxx  // r0.x <- p.color.x
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r0.y, v[0][0].x, l(8), t9.xxxx  // r0.y <- p.color.y
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r0.z, v[0][0].x, l(12), t9.xxxx  // r0.z <- p.color.z
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r0.w, v[0][0].x, l(16), t9.xxxx  // r0.w <- p.color.w
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r1.x, v[0][0].x, l(20), t9.xxxx  // r1.x <- p.position.x
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r1.y, v[0][0].x, l(24), t9.xxxx  // r1.y <- p.position.y
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r1.z, v[0][0].x, l(28), t9.xxxx  // r1.z <- p.position.z
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r1.w, v[0][0].x, l(36), t9.xxxx  // r1.w <- p.angle
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r2.x, v[0][0].x, l(56), t9.xxxx  // r2.x <- p.lifespan
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r2.y, v[0][0].x, l(60), t9.xxxx  // r2.y <- p.age
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r2.z, v[0][0].x, l(64), t9.xxxx  // r2.z <- p.size.x
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r2.w, v[0][0].x, l(68), t9.xxxx  // r2.w <- p.size.y
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r3.x, v[0][0].x, l(72), t9.xxxx  // r3.x <- p.chip

#line 34
ge r3.y, l(0.000000), r2.y
ge r3.z, r2.y, r2.x
or r3.y, r3.z, r3.y
if_nz r3.y

#line 36
  ret 

#line 37
endif 

#line 40
mov r3.y, l(1.777778)  // r3.y <- aspectRatio

#line 42
div r2.x, r2.y, r2.x
max r2.x, r2.x, l(0.000000)
min r2.x, r2.x, l(1.000000)  // r2.x <- ageGaradient

#line 44
mov r2.y, -r2.z
add r2.y, r2.y, r2.w
mul r2.x, r2.y, r2.x
add r2.x, r2.x, r2.z  // r2.x <- size

#line 55
itof r3.z, l(1)
mul r4.xyzw, r1.xxxx, cb8[0].xyzw
mul r5.xyzw, r1.yyyy, cb8[1].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r1.zzzz, cb8[2].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r3.zzzz, cb8[3].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw  // r4.x <- element.position.x; r4.y <- element.position.y; r4.z <- element.position.z; r4.w <- element.position.w

#line 60
mov r3.z, x0[0].x
sincos null, r3.w, r1.w
mul r3.z, r3.w, r3.z
mov r3.w, x0[0].y
sincos r5.x, null, r1.w
mul r3.w, r3.w, r5.x
mov r3.w, -r3.w
add r5.x, r3.w, r3.z  // r5.x <- corner.x

#line 61
mov r3.z, x0[0].x
sincos r3.w, null, r1.w
mul r3.z, r3.w, r3.z
mov r3.w, x0[0].y
sincos null, r5.z, r1.w
mul r3.w, r3.w, r5.z
add r5.y, r3.w, r3.z  // r5.y <- corner.y

#line 65
mul r2.y, r3.y, r2.x
mul r3.zw, r2.xxxy, r5.xxxy
add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- element.position.x; r3.w <- element.position.y

#line 67
mov r0.xyzw, r0.xyzw  // r0.x <- element.color.x; r0.y <- element.color.y; r0.z <- element.color.z; r0.w <- element.color.w

#line 76
mov r4.xy, x1[0].xyxx
utof r5.xy, cb9[8].xyxx
div r4.xy, r4.xyxx, r5.xyxx  // r4.x <- texcoord.x; r4.y <- texcoord.y

#line 77
utof r5.xy, cb9[8].xyxx
div r5.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r5.xyxx  // r5.x <- gridSize.x; r5.y <- gridSize.y

#line 78
udiv null, r5.z, r3.x, cb9[8].x  // r5.z <- x

#line 79
udiv r5.w, null, r3.x, cb9[8].x  // r5.w <- y

#line 80
utof r6.x, r5.z
utof r6.y, r5.w
mul r5.xy, r5.xyxx, r6.xyxx
add r4.xy, r4.xyxx, r5.xyxx  // r4.x <- element.texcoord.x; r4.y <- element.texcoord.y

#line 84
mov o0.xy, r3.zwzz
mov o0.zw, r4.zzzw
mov o1.xyzw, r0.xyzw
mov o2.xy, r4.xyxx
emit_stream m0

#line 55
itof r3.z, l(1)
mul r4.xyzw, r1.xxxx, cb8[0].xyzw
mul r5.xyzw, r1.yyyy, cb8[1].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r1.zzzz, cb8[2].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r3.zzzz, cb8[3].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw  // r4.x <- element.position.x; r4.y <- element.position.y; r4.z <- element.position.z; r4.w <- element.position.w

#line 60
mov r3.z, x0[1].x
sincos null, r3.w, r1.w
mul r3.z, r3.w, r3.z
mov r3.w, x0[1].y
sincos r5.x, null, r1.w
mul r3.w, r3.w, r5.x
mov r3.w, -r3.w
add r5.x, r3.w, r3.z  // r5.x <- corner.x

#line 61
mov r3.z, x0[1].x
sincos r3.w, null, r1.w
mul r3.z, r3.w, r3.z
mov r3.w, x0[1].y
sincos null, r5.z, r1.w
mul r3.w, r3.w, r5.z
add r5.y, r3.w, r3.z  // r5.y <- corner.y

#line 65
mul r2.z, r3.y, r2.x
mul r3.zw, r2.xxxz, r5.xxxy
add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- element.position.x; r3.w <- element.position.y

#line 67
mov r0.xyzw, r0.xyzw

#line 76
mov r4.xy, x1[1].xyxx
utof r5.xy, cb9[8].xyxx
div r4.xy, r4.xyxx, r5.xyxx  // r4.x <- texcoord.x; r4.y <- texcoord.y

#line 77
utof r5.xy, cb9[8].xyxx
div r5.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r5.xyxx  // r5.x <- gridSize.x; r5.y <- gridSize.y

#line 78
udiv null, r2.z, r3.x, cb9[8].x  // r2.z <- x

#line 79
udiv r5.z, null, r3.x, cb9[8].x  // r5.z <- y

#line 80
utof r6.x, r2.z
utof r6.y, r5.z
mul r5.xy, r5.xyxx, r6.xyxx
add r4.xy, r4.xyxx, r5.xyxx  // r4.x <- element.texcoord.x; r4.y <- element.texcoord.y

#line 84
mov o0.xy, r3.zwzz
mov o0.zw, r4.zzzw
mov o1.xyzw, r0.xyzw
mov o2.xy, r4.xyxx
emit_stream m0

#line 55
itof r2.z, l(1)
mul r4.xyzw, r1.xxxx, cb8[0].xyzw
mul r5.xyzw, r1.yyyy, cb8[1].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r1.zzzz, cb8[2].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r2.zzzz, cb8[3].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw  // r4.x <- element.position.x; r4.y <- element.position.y; r4.z <- element.position.z; r4.w <- element.position.w

#line 60
mov r2.z, x0[2].x
sincos null, r3.z, r1.w
mul r2.z, r2.z, r3.z
mov r3.z, x0[2].y
sincos r3.w, null, r1.w
mul r3.z, r3.w, r3.z
mov r3.z, -r3.z
add r5.x, r2.z, r3.z  // r5.x <- corner.x

#line 61
mov r2.z, x0[2].x
sincos r3.z, null, r1.w
mul r2.z, r2.z, r3.z
mov r3.z, x0[2].y
sincos null, r3.w, r1.w
mul r3.z, r3.w, r3.z
add r5.y, r2.z, r3.z  // r5.y <- corner.y

#line 65
mul r2.w, r3.y, r2.x
mul r2.zw, r2.xxxw, r5.xxxy
add r2.zw, r2.zzzw, r4.xxxy  // r2.z <- element.position.x; r2.w <- element.position.y

#line 67
mov r0.xyzw, r0.xyzw

#line 76
mov r3.zw, x1[2].xxxy
utof r4.xy, cb9[8].xyxx
div r3.zw, r3.zzzw, r4.xxxy  // r3.z <- texcoord.x; r3.w <- texcoord.y

#line 77
utof r4.xy, cb9[8].xyxx
div r4.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r4.xyxx  // r4.x <- gridSize.x; r4.y <- gridSize.y

#line 78
udiv null, r5.x, r3.x, cb9[8].x  // r5.x <- x

#line 79
udiv r5.y, null, r3.x, cb9[8].x  // r5.y <- y

#line 80
utof r6.x, r5.x
utof r6.y, r5.y
mul r4.xy, r4.xyxx, r6.xyxx
add r3.zw, r3.zzzw, r4.xxxy  // r3.z <- element.texcoord.x; r3.w <- element.texcoord.y

#line 84
mov o0.xy, r2.zwzz
mov o0.zw, r4.zzzw
mov o1.xyzw, r0.xyzw
mov o2.xy, r3.zwzz
emit_stream m0

#line 55
itof r2.z, l(1)
mul r4.xyzw, r1.xxxx, cb8[0].xyzw
mul r5.xyzw, r1.yyyy, cb8[1].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r1.zzzz, cb8[2].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r2.zzzz, cb8[3].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw  // r4.x <- element.position.x; r4.y <- element.position.y; r4.z <- element.position.z; r4.w <- element.position.w

#line 60
mov r1.x, x0[3].x
sincos null, r1.y, r1.w
mul r1.x, r1.y, r1.x
mov r1.y, x0[3].y
sincos r1.z, null, r1.w
mul r1.y, r1.z, r1.y
mov r1.y, -r1.y
add r1.x, r1.y, r1.x  // r1.x <- corner.x

#line 61
mov r1.z, x0[3].x
sincos r2.z, null, r1.w
mul r1.z, r1.z, r2.z
mov r2.z, x0[3].y
sincos null, r1.w, r1.w
mul r1.w, r1.w, r2.z
add r1.y, r1.w, r1.z  // r1.y <- corner.y

#line 65
mul r2.y, r3.y, r2.x
mul r1.xy, r1.xyxx, r2.xyxx
add r1.xy, r1.xyxx, r4.xyxx  // r1.x <- element.position.x; r1.y <- element.position.y

#line 67
mov r0.xyzw, r0.xyzw

#line 76
mov r1.zw, x1[3].xxxy
utof r2.xy, cb9[8].xyxx
div r1.zw, r1.zzzw, r2.xxxy  // r1.z <- texcoord.x; r1.w <- texcoord.y

#line 77
utof r2.xy, cb9[8].xyxx
div r2.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r2.xyxx  // r2.x <- gridSize.x; r2.y <- gridSize.y

#line 78
udiv null, r2.z, r3.x, cb9[8].x  // r2.z <- x

#line 79
udiv r2.w, null, r3.x, cb9[8].x  // r2.w <- y

#line 80
utof r3.x, r2.z
utof r3.y, r2.w
mul r2.xy, r2.xyxx, r3.xyxx
add r1.zw, r1.zzzw, r2.xxxy  // r1.z <- element.texcoord.x; r1.w <- element.texcoord.y

#line 84
mov o0.xy, r1.xyxx
mov o0.zw, r4.zzzw
mov o1.xyzw, r0.xyzw
mov o2.xy, r1.zwzz
emit_stream m0

#line 86
cut_stream m0

#line 87
ret 
// Approximately 209 instruction slots used
