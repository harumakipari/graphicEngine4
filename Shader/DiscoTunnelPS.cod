//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   float iTime;                       // Offset:    0 Size:     4
//   float2 iResolution;                // Offset:    4 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB8[1], immediateIndexed
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 44 "C:\Users\2240225\Desktop\graphicEngine4\Shader\DiscoTunnelPS.hlsl"
mov r0.xy, v0.xyxx  // r0.x <- fragCoord.x; r0.y <- fragCoord.y

#line 46
nop 
mov r0.xy, r0.xyxx

#line 17
mul r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
mov r0.zw, -cb8[0].yyyz
add r0.xy, r0.zwzz, r0.xyxx
min r0.z, cb8[0].z, cb8[0].y
div r0.xy, r0.xyxx, r0.zzzz  // r0.x <- p.x; r0.y <- p.y

#line 18
mul r0.z, cb8[0].x, l(25.000000)  // r0.z <- camZ

#line 19
nop 
mov r0.z, r0.z

#line 9
mul r0.w, r0.z, l(0.100000)
sincos r0.w, null, r0.w
mul r0.w, r0.w, l(1.000000)
add r0.w, r0.w, l(0.000000)
mul r1.x, r0.z, l(0.031000)
sincos null, r1.x, r1.x
mul r1.x, r1.x, l(4.000000)
sincos r1.x, null, r1.x
mul r1.x, r1.x, l(1.000000)
add r0.w, r0.w, r1.x
mul r1.x, r0.z, l(0.009100)
sincos r1.x, null, r1.x
mul r1.x, r1.x, l(3.000000)
sincos r1.x, null, r1.x
mul r1.x, r1.x, l(3.000000)
add r1.x, r0.w, r1.x
mul r0.w, r0.z, l(0.100000)
sincos null, r0.w, r0.w
mul r0.w, r0.w, l(1.000000)
add r0.w, r0.w, l(0.000000)
mul r1.z, r0.z, l(0.031000)
sincos null, r1.z, r1.z
mul r1.z, r1.z, l(4.000000)
sincos null, r1.z, r1.z
mul r1.z, r1.z, l(1.000000)
add r0.w, r0.w, r1.z
mul r1.z, r0.z, l(0.009100)
sincos r1.z, null, r1.z
mul r1.z, r1.z, l(3.000000)
sincos null, r1.z, r1.z
mul r1.z, r1.z, l(3.000000)
add r1.y, r0.w, r1.z
mul r1.xy, r1.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)  // r1.x <- <position return value>.x; r1.y <- <position return value>.y

#line 19
mov r1.xy, r1.xyxx  // r1.x <- cam.x; r1.y <- cam.y

#line 21
mov r0.w, l(0.500000)  // r0.w <- dt

#line 22
add r1.z, r0.w, cb8[0].x
mul r1.z, r1.z, l(25.000000)  // r1.z <- camZ2

#line 23
nop 
mov r1.z, r1.z

#line 9
mul r1.w, r1.z, l(0.100000)
sincos r1.w, null, r1.w
mul r1.w, r1.w, l(1.000000)
add r1.w, r1.w, l(0.000000)
mul r2.x, r1.z, l(0.031000)
sincos null, r2.x, r2.x
mul r2.x, r2.x, l(4.000000)
sincos r2.x, null, r2.x
mul r2.x, r2.x, l(1.000000)
add r1.w, r1.w, r2.x
mul r2.x, r1.z, l(0.009100)
sincos r2.x, null, r2.x
mul r2.x, r2.x, l(3.000000)
sincos r2.x, null, r2.x
mul r2.x, r2.x, l(3.000000)
add r2.x, r1.w, r2.x
mul r1.w, r1.z, l(0.100000)
sincos null, r1.w, r1.w
mul r1.w, r1.w, l(1.000000)
add r1.w, r1.w, l(0.000000)
mul r2.z, r1.z, l(0.031000)
sincos null, r2.z, r2.z
mul r2.z, r2.z, l(4.000000)
sincos null, r2.z, r2.z
mul r2.z, r2.z, l(1.000000)
add r1.w, r1.w, r2.z
mul r1.z, r1.z, l(0.009100)
sincos r1.z, null, r1.z
mul r1.z, r1.z, l(3.000000)
sincos null, r1.z, r1.z
mul r1.z, r1.z, l(3.000000)
add r2.y, r1.z, r1.w
mul r1.zw, r2.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)  // r1.z <- <position return value>.x; r1.w <- <position return value>.y

#line 23
mov r1.zw, r1.zzzw  // r1.z <- cam2.x; r1.w <- cam2.y

#line 24
mov r2.xy, -r1.xyxx
add r1.zw, r1.zzzw, r2.xxxy
div r1.zw, r1.zzzw, r0.wwww  // r1.z <- dcamdt.x; r1.w <- dcamdt.y

#line 26
mov r2.xyz, l(0,0,0,0)  // r2.x <- f.x; r2.y <- f.y; r2.z <- f.z

#line 27
mov r0.w, l(1)  // r0.w <- j
mov r3.xyz, r2.xyzx  // r3.x <- f.x; r3.y <- f.y; r3.z <- f.z
mov r2.w, r0.w  // r2.w <- j
loop 
  ilt r4.x, r2.w, l(300)
  breakc_z r4.x

#line 29
  itof r4.x, r2.w  // r4.x <- i

#line 30
  round_ni r4.y, r0.z
  add r4.x, r4.x, r4.y  // r4.x <- realZ

#line 31
  mov r4.y, -r0.z
  add r4.y, r4.y, r4.x  // r4.y <- screenZ

#line 32
  div r4.z, l(1.000000), r4.y  // r4.z <- r

#line 33
  nop 
  mov r4.x, r4.x

#line 9
  mul r4.w, r4.x, l(0.100000)
  sincos r4.w, null, r4.w
  mul r4.w, r4.w, l(1.000000)
  add r4.w, r4.w, l(0.000000)
  mul r5.x, r4.x, l(0.031000)
  sincos null, r5.x, r5.x
  mul r5.x, r5.x, l(4.000000)
  sincos r5.x, null, r5.x
  mul r5.x, r5.x, l(1.000000)
  add r4.w, r4.w, r5.x
  mul r5.x, r4.x, l(0.009100)
  sincos r5.x, null, r5.x
  mul r5.x, r5.x, l(3.000000)
  sincos r5.x, null, r5.x
  mul r5.x, r5.x, l(3.000000)
  add r5.x, r4.w, r5.x
  mul r4.w, r4.x, l(0.100000)
  sincos null, r4.w, r4.w
  mul r4.w, r4.w, l(1.000000)
  add r4.w, r4.w, l(0.000000)
  mul r5.z, r4.x, l(0.031000)
  sincos null, r5.z, r5.z
  mul r5.z, r5.z, l(4.000000)
  sincos null, r5.z, r5.z
  mul r5.z, r5.z, l(1.000000)
  add r4.w, r4.w, r5.z
  mul r5.z, r4.x, l(0.009100)
  sincos r5.z, null, r5.z
  mul r5.z, r5.z, l(3.000000)
  sincos null, r5.z, r5.z
  mul r5.z, r5.z, l(3.000000)
  add r5.y, r4.w, r5.z
  mul r5.xy, r5.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)  // r5.x <- <position return value>.x; r5.y <- <position return value>.y

#line 33
  mov r5.zw, -r1.xxxy
  add r5.xy, r5.zwzz, r5.xyxx
  mul r5.xy, r5.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000)
  div r5.xy, r5.xyxx, r4.yyyy
  mul r5.zw, r1.zzzw, l(0.000000, 0.000000, 0.400000, 0.400000)
  mov r5.zw, -r5.zzzw
  add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- c.x; r5.y <- c.y

#line 34
  mul r4.w, r4.x, l(0.070000)
  sincos r6.x, null, r4.w
  mul r4.w, r4.x, l(0.100000)
  sincos r6.y, null, r4.w
  mul r4.x, r4.x, l(0.080000)
  sincos r6.z, null, r4.x
  add r6.xyz, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  div r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)  // r6.x <- color.x; r6.y <- color.y; r6.z <- color.z

#line 35
  mul r6.xyz, r6.xyzx, l(0.060000, 0.060000, 0.060000, 0.000000)
  div r4.xyw, r6.xyxz, r4.yyyy
  mov r5.xy, -r5.xyxx
  add r5.xy, r0.xyxx, r5.xyxx
  dp2 r5.x, r5.xyxx, r5.xyxx
  sqrt r5.x, r5.x
  mov r4.z, -r4.z
  add r4.z, r4.z, r5.x
  mov r5.x, -r4.z
  max r4.z, r4.z, r5.x
  add r4.z, r4.z, l(0.010000)
  div r4.xyz, r4.xywx, r4.zzzz
  add r3.xyz, r3.xyzx, r4.xyzx

#line 36
  iadd r2.w, r2.w, l(1)
endloop 

#line 38
mov r3.xyz, r3.xyzx  // r3.x <- fragColor.x; r3.y <- fragColor.y; r3.z <- fragColor.z
mov r3.w, l(1.000000)  // r3.w <- fragColor.w

#line 46
mov r3.xyzw, r3.xyzw  // r3.x <- fragColor.x; r3.y <- fragColor.y; r3.z <- fragColor.z; r3.w <- fragColor.w

#line 48
mov o0.xyzw, r3.xyzw
ret 
// Approximately 170 instruction slots used
