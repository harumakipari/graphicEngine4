//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   float iTime;                       // Offset:    0 Size:     4
//   float2 iResolution;                // Offset:    4 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB8[1], immediateIndexed
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 8
mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), -cb8[0].yzyy
min r0.z, cb8[0].z, cb8[0].y
div r0.xy, r0.xyxx, r0.zzzz
mul r1.xyzw, cb8[0].xxxx, l(25.000000, 2.500000, 0.775000, 0.227500)
sincos r0.zw, null, r1.yyyw
sincos null, r1.yz, r1.zzyz
mul r1.y, r1.y, l(4.000000)
sincos r2.x, r3.x, r1.y
add r0.z, r0.z, r2.x
mul r0.w, r0.w, l(3.000000)
sincos r2.x, r4.x, r0.w
mad r2.x, r2.x, l(3.000000), r0.z
add r0.z, r1.z, r3.x
mad r2.y, r4.x, l(3.000000), r0.z
add r0.z, cb8[0].x, l(0.500000)
mul r1.yzw, r0.zzzz, l(0.000000, 2.500000, 0.775000, 0.227500)
sincos r0.zw, null, r1.yyyw
sincos null, r1.yz, r1.zzyz
mul r1.y, r1.y, l(4.000000)
sincos r3.x, r4.x, r1.y
add r0.z, r0.z, r3.x
mul r0.w, r0.w, l(3.000000)
sincos r3.x, r5.x, r0.w
mad r3.x, r3.x, l(3.000000), r0.z
add r0.z, r1.z, r4.x
mad r3.y, r5.x, l(3.000000), r0.z
add r0.zw, -r2.xxxy, r3.xxxy
round_ni r1.x, r1.x
mov r1.yzw, l(0,0,0,0)
mov r2.z, l(1)
loop 
  ige r2.w, r2.z, l(300)
  breakc_nz r2.w
  itof r2.w, r2.z
  add r2.w, r1.x, r2.w
  mad r3.x, -cb8[0].x, l(25.000000), r2.w
  div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
  mul r4.xyzw, r2.wwww, l(0.100000, 0.031000, 0.009100, 0.070000)
  sincos r5.xyz, null, r4.xzwx
  sincos null, r3.zw, r4.yyyx
  mul r3.z, r3.z, l(4.000000)
  sincos r4.x, r6.x, r3.z
  add r3.z, r4.x, r5.x
  mul r4.x, r5.y, l(3.000000)
  sincos r4.x, r7.x, r4.x
  mad r4.x, r4.x, l(3.000000), r3.z
  add r3.z, r3.w, r6.x
  mad r4.y, r7.x, l(3.000000), r3.z
  add r3.zw, -r2.xxxy, r4.xxxy
  mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 10.000000, 10.000000)
  div r3.zw, r3.zzzw, r3.xxxx
  mad r3.zw, -r0.zzzw, l(0.000000, 0.000000, 0.800000, 0.800000), r3.zzzw
  mul r2.w, r2.w, l(0.080000)
  sincos r5.w, null, r2.w
  add r4.xyz, r5.zxwz, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r4.xyz, r4.xyzx, l(0.030000, 0.030000, 0.030000, 0.000000)
  div r4.xyz, r4.xyzx, r3.xxxx
  add r3.xz, r0.xxyx, -r3.zzwz
  dp2 r2.w, r3.xzxx, r3.xzxx
  sqrt r2.w, r2.w
  add r2.w, -r3.y, r2.w
  add r2.w, |r2.w|, l(0.010000)
  div r3.xyz, r4.xyzx, r2.wwww
  add r1.yzw, r1.yyzw, r3.xxyz
  iadd r2.z, r2.z, l(1)
endloop 
mov o0.xyz, r1.yzwy
mov o0.w, l(1.000000)
ret 
// Approximately 69 instruction slots used
