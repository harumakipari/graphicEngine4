//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4 [unused]
//   bool hasTangent;                   // Offset:   84 Size:     4 [unused]
//   int skin;                          // Offset:   88 Size:     4 [unused]
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64 [unused]
//
// }
//
// cbuffer csmConstants
// {
//
//   struct CsmConstants
//   {
//       
//       row_major float4x4 cascadedMatrices[4];// Offset:    0
//       float4 cascadedPlaneDistances; // Offset:  256
//
//   } csmData;                         // Offset:    0 Size:   272
//
// }
//
// cbuffer ELASTIC_CONSTANT_BUFFER
// {
//
//   float4 p1;                         // Offset:    0 Size:    16
//   float4 p2;                         // Offset:   16 Size:    16
//   float4 p3;                         // Offset:   32 Size:    16
//   float buildProgress;               // Offset:   48 Size:     4 [unused]
//   float buildHeight;                 // Offset:   52 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// csmConstants                      cbuffer      NA          NA            cb3      1 
// ELASTIC_CONSTANT_BUFFER           cbuffer      NA          NA            cb6      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float       
// TANGENT                  0   xyzw        2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float       
// JOINTS                   0   xyzw        4     NONE    uint       
// JOINTS                   1   xyzw        5     NONE    uint       
// WEIGHTS                  0   xyzw        6     NONE   float       
// WEIGHTS                  1   xyzw        7     NONE   float       
// SV_INSTANCEID            0   x           8   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// INSTANCEID               0   x           1     NONE    uint   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB3[17], dynamicIndexed
dcl_constantbuffer CB6[4], immediateIndexed
dcl_input v0.xyzw
dcl_input_sgv v8.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output o1.x
dcl_temps 4
add r0.xyz, -cb6[0].yzxy, cb6[1].yzxy
add r1.xyz, -cb6[1].yzxy, cb6[2].yzxy
max r0.w, cb6[3].y, l(0.000010)
mul r2.xyz, v0.yyyy, cb0[1].xyzx
mad r2.xyz, v0.xxxx, cb0[0].xyzx, r2.xyzx
mad r2.xyz, v0.zzzz, cb0[2].xyzx, r2.xyzx
mad r2.xyz, v0.wwww, cb0[3].xyzx, r2.xyzx
add r3.y, r2.y, -cb6[0].y
div_sat r0.w, r3.y, r0.w
mul r1.xyz, r1.xyzx, r0.wwww
add r1.w, -r0.w, l(1.000000)
mad r0.xyz, r1.wwww, r0.xyzx, r1.xyzx
add r0.xyz, r0.xyzx, r0.xyzx
dp3 r1.x, r0.xyzx, r0.xyzx
sqrt r1.x, r1.x
div r0.xyz, r0.xyzx, r1.xxxx
ge r1.x, r1.x, l(0.000010)
movc r0.xyz, r1.xxxx, r0.xyzx, l(0,1.000000,0,0)
max r1.x, r0.x, l(-1.000000)
min r1.x, r1.x, l(1.000000)
mad r1.y, |r1.x|, l(-0.018729), l(0.074261)
mad r1.y, r1.y, |r1.x|, l(-0.212114)
mad r1.y, r1.y, |r1.x|, l(1.570729)
add r1.z, -|r1.x|, l(1.000000)
sqrt r1.z, r1.z
mul r2.w, r1.z, r1.y
mad r2.w, r2.w, l(-2.000000), l(3.141593)
lt r3.w, r1.x, -r1.x
and r2.w, r2.w, r3.w
mad r1.y, r1.y, r1.z, r2.w
min r1.y, r1.y, l(1.396263)
sincos r1.y, null, r1.y
mov r3.xz, l(0,0,0,0)
add r3.xyz, r3.xyzx, cb6[0].xyzx
add r2.xyz, r2.xyzx, -r3.xyzx
mul r3.xyz, r0.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mad r0.xyz, r0.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000), -r3.xyzx
dp2 r1.z, r0.xzxx, r0.xzxx
sqrt r1.z, r1.z
div r0.xyz, r0.xyzx, r1.zzzz
lt r1.z, l(0.000010), r1.z
mul r3.xyz, r2.yzxy, r0.zxyz
mad r3.xyz, r0.yzxy, r2.zxyz, -r3.xyzx
mul r3.xyz, r1.yyyy, r3.xyzx
mad r3.xyz, r1.xxxx, r2.xyzx, r3.xyzx
add r1.x, -r1.x, l(1.000000)
dp2 r1.y, r0.xzxx, r2.xzxx
mul r1.x, r1.y, r1.x
mad r0.xyz, r1.xxxx, r0.xyzx, r3.xyzx
movc r0.xyz, r1.zzzz, r0.xyzx, r2.xyzx
dp2 r1.x, r0.wwww, r1.wwww
mul r0.w, r0.w, r0.w
mul r1.y, r1.w, r1.w
mul r1.xzw, r1.xxxx, cb6[1].xxyz
mad r1.xyz, r1.yyyy, cb6[0].xyzx, r1.xzwx
mad r1.xyz, r0.wwww, cb6[2].xyzx, r1.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
ishl r0.w, v8.x, l(2)
mul r1.xyzw, r0.yyyy, cb3[r0.w + 1].xyzw
mad r1.xyzw, r0.xxxx, cb3[r0.w + 0].xyzw, r1.xyzw
mad r1.xyzw, r0.zzzz, cb3[r0.w + 2].xyzw, r1.xyzw
add o0.xyzw, r1.xyzw, cb3[r0.w + 3].xyzw
mov o1.x, v8.x
ret 
// Approximately 64 instruction slots used
