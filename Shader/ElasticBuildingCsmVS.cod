//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4 [unused]
//   bool hasTangent;                   // Offset:   84 Size:     4 [unused]
//   int skin;                          // Offset:   88 Size:     4 [unused]
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64 [unused]
//
// }
//
// cbuffer csmConstants
// {
//
//   struct CsmConstants
//   {
//       
//       row_major float4x4 cascadedMatrices[4];// Offset:    0
//       float4 cascadedPlaneDistances; // Offset:  256
//
//   } csmData;                         // Offset:    0 Size:   272
//
// }
//
// cbuffer ELASTIC_CONSTANT_BUFFER
// {
//
//   float4 p1;                         // Offset:    0 Size:    16
//   float4 p2;                         // Offset:   16 Size:    16
//   float4 p3;                         // Offset:   32 Size:    16
//   float buildProgress;               // Offset:   48 Size:     4 [unused]
//   float buildHeight;                 // Offset:   52 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// csmConstants                      cbuffer      NA          NA            cb3      1 
// ELASTIC_CONSTANT_BUFFER           cbuffer      NA          NA            cb6      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float       
// TANGENT                  0   xyzw        2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float       
// JOINTS                   0   xyzw        4     NONE    uint       
// JOINTS                   1   xyzw        5     NONE    uint       
// WEIGHTS                  0   xyzw        6     NONE   float       
// WEIGHTS                  1   xyzw        7     NONE   float       
// SV_INSTANCEID            0   x           8   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// INSTANCEID               0   x           1     NONE    uint   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB3[17], dynamicIndexed
dcl_constantbuffer CB6[4], immediateIndexed
dcl_input v0.xyzw
dcl_input_sgv v8.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output o1.x
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- vin.position.x; v0.y <- vin.position.y; v0.z <- vin.position.z; v0.w <- vin.position.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; v1.w <- vin.normal.w; 
//   v2.x <- vin.tangent.x; v2.y <- vin.tangent.y; v2.z <- vin.tangent.z; v2.w <- vin.tangent.w; 
//   v3.x <- vin.texcoord.x; v3.y <- vin.texcoord.y; 
//   v4.x <- vin.joints[0].x; v4.y <- vin.joints[0].y; v4.z <- vin.joints[0].z; v4.w <- vin.joints[0].w; 
//   v5.x <- vin.joints[1].x; v5.y <- vin.joints[1].y; v5.z <- vin.joints[1].z; v5.w <- vin.joints[1].w; 
//   v6.x <- vin.weights[0].x; v6.y <- vin.weights[0].y; v6.z <- vin.weights[0].z; v6.w <- vin.weights[0].w; 
//   v7.x <- vin.weights[1].x; v7.y <- vin.weights[1].y; v7.z <- vin.weights[1].z; v7.w <- vin.weights[1].w; 
//   v8.x <- instanceId; 
//   o1.x <- <main return value>.instanceId; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 80 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ElasticBuildingCsmVS.hlsl"
mul r0.xyz, v0.xxxx, cb0[0].xyzx
mul r1.xyz, v0.yyyy, cb0[1].xyzx
add r0.xyz, r0.xyzx, r1.xyzx
mul r1.xyz, v0.zzzz, cb0[2].xyzx
add r0.xyz, r0.xyzx, r1.xyzx
mul r1.xyz, v0.wwww, cb0[3].xyzx
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- worldPos4.x; r0.y <- worldPos4.y; r0.z <- worldPos4.z

#line 81
mov r0.xyz, r0.xyzx  // r0.x <- worldPos.x; r0.y <- worldPos.y; r0.z <- worldPos.z

#line 84
max r0.w, cb6[3].y, l(0.000010)  // r0.w <- meshHeight

#line 85
mov r1.x, -cb6[0].y
add r1.x, r0.y, r1.x
div r0.w, r1.x, r0.w
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)  // r0.w <- t

#line 88
nop 
mov r1.xyz, cb6[0].xyzx
mov r2.xyz, cb6[1].xyzx
mov r3.xyz, cb6[2].xyzx
mov r0.w, r0.w

#line 32
mov r1.w, -r0.w
add r1.w, r1.w, l(1.000000)  // r1.w <- u

#line 33
mul r2.w, r1.w, r1.w
mul r1.xyz, r1.xyzx, r2.wwww
itof r2.w, l(2)
mul r1.w, r1.w, r2.w
mul r1.w, r0.w, r1.w
mul r2.xyz, r2.xyzx, r1.wwww
add r1.xyz, r1.xyzx, r2.xyzx
mul r1.w, r0.w, r0.w
mul r2.xyz, r3.xyzx, r1.wwww
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- <QuadricBezier return value>.x; r1.y <- <QuadricBezier return value>.y; r1.z <- <QuadricBezier return value>.z

#line 88
mov r1.xyz, r1.xyzx  // r1.x <- bezierPos.x; r1.y <- bezierPos.y; r1.z <- bezierPos.z

#line 89
nop 
mov r2.xyz, cb6[0].xyzx
mov r3.xyz, cb6[1].xyzx
mov r4.xyz, cb6[2].xyzx
mov r0.w, r0.w

#line 39
itof r5.xyz, l(2, 2, 2, 0)
itof r1.w, l(1)
mov r2.w, -r0.w
add r1.w, r1.w, r2.w
mov r2.xyz, -r2.xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r2.xyz, r1.wwww, r2.xyzx
mov r3.xyz, -r3.xyzx
add r3.xyz, r3.xyzx, r4.xyzx
mul r3.xyz, r0.wwww, r3.xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r2.xyz, r2.xyzx, r5.xyzx  // r2.x <- <QuadricBezierTangent return value>.x; r2.y <- <QuadricBezierTangent return value>.y; r2.z <- <QuadricBezierTangent return value>.z

#line 89
mov r2.xyz, r2.xyzx  // r2.x <- bezierTangentRaw.x; r2.y <- bezierTangentRaw.y; r2.z <- bezierTangentRaw.z

#line 90
nop 
mov r2.xyz, r2.xyzx
itof r3.xyz, l(0, 0, 1, 0)

#line 66
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w  // r0.w <- len

#line 67
lt r1.w, r0.w, l(0.000010)
if_nz r1.w

#line 69
  mov r3.xyz, r3.xyzx

#line 70
endif   // r3.x <- <SafeNormalize return value>.x; r3.y <- <SafeNormalize return value>.y; r3.z <- <SafeNormalize return value>.z

#line 71
if_z r1.w
  div r3.xyz, r2.xyzx, r0.wwww
endif 

#line 90
mov r3.xyz, r3.xyzx  // r3.x <- bezierTangent.x; r3.y <- bezierTangent.y; r3.z <- bezierTangent.z

#line 93
mov r0.w, -cb6[0].y
add r2.y, r0.w, r0.y
itof r2.xz, l(0, 0, 0, 0)
add r2.xyz, r2.xyzx, cb6[0].xyzx  // r2.x <- straightPos.x; r2.y <- straightPos.y; r2.z <- straightPos.z

#line 94
mov r2.xyz, -r2.xyzx
add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- localOffset.x; r0.y <- localOffset.y; r0.z <- localOffset.z

#line 97
itof r2.xyz, l(0, 1, 0, 0)  // r2.x <- up.x; r2.y <- up.y; r2.z <- up.z

#line 98
mul r4.xyz, r3.zxyz, r2.yzxy
mul r5.xyz, r3.yzxy, r2.zxyz
mov r5.xyz, -r5.xyzx
add r4.xyz, r4.xyzx, r5.xyzx  // r4.x <- rotAxisRaw.x; r4.y <- rotAxisRaw.y; r4.z <- rotAxisRaw.z

#line 99
dp3 r0.w, r4.xyzx, r4.xyzx
sqrt r0.w, r0.w  // r0.w <- axisLen

#line 102
mov r0.xyz, r0.xyzx  // r0.x <- rotatedOffset.x; r0.y <- rotatedOffset.y; r0.z <- rotatedOffset.z

#line 106
lt r1.w, l(0.000010), r0.w
if_nz r1.w

#line 109
  div r4.xyz, r4.xyzx, r0.wwww  // r4.x <- rotAxis.x; r4.y <- rotAxis.y; r4.z <- rotAxis.z

#line 111
  dp3 r0.w, r2.xyzx, r3.xyzx
  max r0.w, r0.w, l(-1.000000)
  min r0.w, r0.w, l(1.000000)  // r0.w <- cosAngle

#line 112
  mov r1.w, -r0.w
  max r2.x, r0.w, r1.w
  mov r2.y, -r2.x
  add r2.y, r2.y, l(1.000000)
  sqrt r2.y, r2.y
  mul r2.z, r2.x, l(-0.018729)
  add r2.z, r2.z, l(0.074261)
  mul r2.z, r2.x, r2.z
  add r2.z, r2.z, l(-0.212114)
  mul r2.x, r2.x, r2.z
  add r2.x, r2.x, l(1.570729)
  mul r2.x, r2.y, r2.x
  mul r2.y, r2.x, l(-2.000000)
  add r2.y, r2.y, l(3.141593)
  lt r1.w, r0.w, r1.w
  and r1.w, r1.w, r2.y
  add r1.w, r1.w, r2.x  // r1.w <- angle

#line 113
  mov r2.x, l(1.396263)  // r2.x <- maxAngle

#line 114
  mov r2.y, -r2.x
  max r1.w, r1.w, r2.y
  min r1.w, r2.x, r1.w  // r1.w <- angle

#line 115
  sincos r1.w, null, r1.w  // r1.w <- sinAngle

#line 128
  nop 
  mov r0.xyz, r0.xyzx
  mov r4.xyz, r4.xyzx
  mov r0.w, r0.w
  mov r1.w, r1.w

#line 52
  mul r2.xyz, r0.xyzx, r0.wwww
  mul r3.xyz, r0.zxyz, r4.yzxy
  mul r5.xyz, r0.yzxy, r4.zxyz
  mov r5.xyz, -r5.xyzx
  add r3.xyz, r3.xyzx, r5.xyzx
  mul r3.xyz, r1.wwww, r3.xyzx
  add r2.xyz, r2.xyzx, r3.xyzx
  mov r0.w, -r0.w
  add r0.w, r0.w, l(1.000000)
  dp3 r1.w, r4.xyzx, r0.xyzx
  mul r0.w, r0.w, r1.w
  mul r3.xyz, r4.xyzx, r0.wwww
  add r0.xyz, r2.xyzx, r3.xyzx  // r0.x <- <RodriguesRotate return value>.x; r0.y <- <RodriguesRotate return value>.y; r0.z <- <RodriguesRotate return value>.z

#line 128
  mov r0.xyz, r0.xyzx  // r0.x <- rotatedOffset.x; r0.y <- rotatedOffset.y; r0.z <- rotatedOffset.z

#line 129
endif 

#line 131
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- deformedPos.x; r0.y <- deformedPos.y; r0.z <- deformedPos.z

#line 134
imul null, r0.w, v8.x, l(4)
mul r1.xyzw, r0.xxxx, cb3[r0.w + 0].xyzw
mul r2.xyzw, r0.yyyy, cb3[r0.w + 1].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r0.zzzz, cb3[r0.w + 2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[r0.w + 3].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- vout.position.x; r0.y <- vout.position.y; r0.z <- vout.position.z; r0.w <- vout.position.w

#line 135
mov r1.x, v8.x  // r1.x <- vout.instanceId

#line 136
mov o0.xyzw, r0.xyzw
mov o1.x, r1.x
ret 
// Approximately 138 instruction slots used
