//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64 [unused]
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4
//   bool hasTangent;                   // Offset:   84 Size:     4
//   int skin;                          // Offset:   88 Size:     4 [unused]
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64 [unused]
//
// }
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64 [unused]
//   float4 cameraPositon;              // Offset:   64 Size:    16
//   row_major float4x4 view;           // Offset:   80 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset:  144 Size:    64 [unused]
//   row_major float4x4 inverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 inverseViewProjection;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 invView;        // Offset:  336 Size:    64 [unused]
//
// }
//
// cbuffer LIGHT_CONSTANT_BUFFER
// {
//
//   float4 lightDirection;             // Offset:    0 Size:    16
//   float4 colorLight;                 // Offset:   16 Size:    16
//   float iblIntensity;                // Offset:   32 Size:     4 [unused]
//   int directionalLightEnable;        // Offset:   36 Size:     4 [unused]
//   int pointLightEnable;              // Offset:   40 Size:     4 [unused]
//   int pointLightCount;               // Offset:   44 Size:     4 [unused]
//   
//   struct PointLights
//   {
//       
//       float4 position;               // Offset:   48
//       float4 color;                  // Offset:   64
//       float range;                   // Offset:   80
//       float3 pads;                   // Offset:   84
//
//   } pointLights[8];                  // Offset:   48 Size:   384 [unused]
//
// }
//
// Resource bind info for materials
// {
//
//   struct MaterialConstants
//   {
//       
//       float3 emissiveFactor;         // Offset:    0
//       int alphaMode;                 // Offset:   12
//       float alphaCutoff;             // Offset:   16
//       bool doubleSided;              // Offset:   20
//       
//       struct PbrMetallicRoughness
//       {
//           
//           float4 baseColorFactor;    // Offset:   24
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   40
//               int texcoord;          // Offset:   44
//
//           } basecolorTexture;        // Offset:   40
//           float metallicFactor;      // Offset:   48
//           float roughnessFactor;     // Offset:   52
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   56
//               int texcoord;          // Offset:   60
//
//           } metallicRoughnessTexture;// Offset:   56
//
//       } pbrMetallicRoughness;        // Offset:   24
//       
//       struct NormalTextureInfo
//       {
//           
//           int index;                 // Offset:   64
//           int texcoord;              // Offset:   68
//           float scale;               // Offset:   72
//
//       } normalTexture;               // Offset:   64
//       
//       struct OcclusionTextureInfo
//       {
//           
//           int index;                 // Offset:   76
//           int texcoord;              // Offset:   80
//           float strength;            // Offset:   84
//
//       } occlusionTexture;            // Offset:   76
//       
//       struct TextureInfo
//       {
//           
//           int index;                 // Offset:   88
//           int texcoord;              // Offset:   92
//
//       } emissiveTexture;             // Offset:   88
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerStates[1]                  sampler      NA          NA             s1      1 
// samplerStates[2]                  sampler      NA          NA             s2      1 
// materials                         texture  struct         r/o             t0      1 
// materialTextures[0]               texture  float4          2d             t1      1 
// materialTextures[1]               texture  float4          2d             t2      1 
// materialTextures[2]               texture  float4          2d             t3      1 
// materialTextures[3]               texture  float4          2d             t4      1 
// materialTextures[4]               texture  float4          2d             t5      1 
// diffuseIem                        texture  float4        cube            t33      1 
// specularPmrem                     texture  float4        cube            t34      1 
// lutGgx                            texture  float4          2d            t35      1 
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb4      1 
// LIGHT_CONSTANT_BUFFER             cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy  
// SV_IsFrontFace           0   x           5    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_constantbuffer CB4[5], immediateIndexed
dcl_constantbuffer CB11[2], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_structured t0, 96
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecube (float,float,float,float) t33
dcl_resource_texturecube (float,float,float,float) t34
dcl_resource_texture2d (float,float,float,float) t35
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xy
dcl_input_ps_sgv constant v5.x, is_front_face
dcl_output o0.xyzw
dcl_temps 11
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r0.xyzw, cb0[5].x, l(0), t0.xyzw
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r1.x, cb0[5].x, l(16), t0.xxxx
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r2.xyzw, cb0[5].x, l(24), t0.xyzw
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r1.y, cb0[5].x, l(40), t0.xxxx
ilt r1.y, l(-1), r1.y
if_nz r1.y
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s2
  log r1.yzw, r3.xxyz
  mul r1.yzw, r1.yyzw, l(0.000000, 2.200000, 2.200000, 2.200000)
  exp r3.xyz, r1.yzwy
  mul r2.xyzw, r2.xyzw, r3.xyzw
endif 
movc r0.w, r0.w, r2.w, l(1.000000)
lt r1.x, r0.w, r1.x
discard_nz r1.x
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r1.xyz, cb0[5].x, l(48), t0.xyzx
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r1.w, cb0[5].x, l(64), t0.xxxx
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r3.xy, cb0[5].x, l(72), t0.xyxx
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r4.xy, cb0[5].x, l(84), t0.xyxx
ilt r2.w, l(-1), r4.y
if_nz r2.w
  sample_indexable(texture2d)(float,float,float,float) r4.yzw, v4.xyxx, t4.wxyz, s2
  log r4.yzw, r4.yyzw
  mul r4.yzw, r4.yyzw, l(0.000000, 2.200000, 2.200000, 2.200000)
  exp r4.yzw, r4.yyzw
  mul r0.xyz, r0.xyzx, r4.yzwy
endif 
ilt r1.z, l(-1), r1.z
if_nz r1.z
  sample_indexable(texture2d)(float,float,float,float) r4.yz, v4.xyxx, t2.xyzw, s1
  mul r1.xy, r1.xyxx, r4.zyzz
endif 
ilt r1.z, l(-1), r3.y
if_nz r1.z
  sample_indexable(texture2d)(float,float,float,float) r1.z, v4.xyxx, t5.yzxw, s1
else 
  mov r1.z, l(1.000000)
endif 
add r4.yzw, r2.xxyz, l(0.000000, -0.040000, -0.040000, -0.040000)
mad r4.yzw, r1.xxxx, r4.yyzw, l(0.000000, 0.040000, 0.040000, 0.040000)
mad r2.xyz, r1.xxxx, -r2.xyzx, r2.xyzx
add r5.xyz, -v1.xyzx, cb4[4].xyzx
dp3 r2.w, r5.xyzx, r5.xyzx
rsq r2.w, r2.w
mul r6.xyz, r2.wwww, r5.xyzx
dp3 r3.y, v2.xyzx, v2.xyzx
rsq r3.y, r3.y
mul r7.xyz, r3.yyyy, v2.zxyz
movc r8.xyz, v5.xxxx, r7.yzxy, -r7.yzxy
ilt r1.w, l(-1), r1.w
if_nz r1.w
  dp3 r1.w, v3.xyzx, v3.xyzx
  rsq r1.w, r1.w
  mul r9.xyz, r1.wwww, v3.xyzx
  movc r9.xyz, cb0[5].yyyy, r9.xyzx, l(1.000000,0,0,0)
  movc r1.w, cb0[5].y, v3.w, l(1.000000)
  dp3 r3.y, r7.yzxy, r9.xyzx
  mad r9.xyz, -r7.yzxy, r3.yyyy, r9.xyzx
  dp3 r3.y, r9.xyzx, r9.xyzx
  rsq r3.y, r3.y
  mul r9.xyz, r3.yyyy, r9.xyzx
  mul r10.xyz, r7.xyzx, r9.yzxy
  mad r7.xyz, r7.zxyz, r9.zxyz, -r10.xyzx
  mul r7.xyz, r1.wwww, r7.xyzx
  dp3 r1.w, r7.xyzx, r7.xyzx
  rsq r1.w, r1.w
  mul r7.xyz, r1.wwww, r7.xyzx
  movc r9.xyz, v5.xxxx, r9.xyzx, -r9.xyzx
  movc r7.xyz, v5.xxxx, r7.xyzx, -r7.xyzx
  sample_indexable(texture2d)(float,float,float,float) r10.xyz, v4.xyxx, t3.xyzw, s1
  mad r10.xyz, r10.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mov r3.z, l(1.000000)
  mul r3.xyz, r3.xxzx, r10.xyzx
  dp3 r1.w, r3.xyzx, r3.xyzx
  rsq r1.w, r1.w
  mul r3.xyz, r1.wwww, r3.xyzx
  mul r7.xyz, r7.xyzx, r3.yyyy
  mad r3.xyw, r3.xxxx, r9.xyxz, r7.xyxz
  mad r3.xyz, r3.zzzz, r8.xyzx, r3.xywx
  dp3 r1.w, r3.xyzx, r3.xyzx
  rsq r1.w, r1.w
  mul r8.xyz, r1.wwww, r3.xyzx
endif 
dp3 r1.w, -cb11[0].xyzx, -cb11[0].xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, -cb11[0].xyzx
dp3 r1.w, r8.xyzx, r3.xyzx
max r1.w, r1.w, l(0.000000)
dp3 r3.w, r8.xyzx, r6.xyzx
max r3.w, r3.w, l(0.000000)
lt r5.w, l(0.000000), r1.w
lt r6.w, l(0.000000), r3.w
or r5.w, r5.w, r6.w
if_nz r5.w
  mul r5.w, r1.y, r1.y
  mul r7.xyz, cb11[1].wwww, cb11[1].xyzx
  mad r3.xyz, r5.xyzx, r2.wwww, r3.xyzx
  dp3 r2.w, r3.xyzx, r3.xyzx
  rsq r2.w, r2.w
  mul r3.xyz, r2.wwww, r3.xyzx
  dp3 r2.w, r8.xyzx, r3.xyzx
  max r2.w, r2.w, l(0.000000)
  dp3 r3.x, r3.xyzx, r6.xyzx
  max r3.x, r3.x, l(0.000000)
  mul r5.xyz, r1.wwww, r7.xyzx
  add r7.xyz, -r4.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r3.x, -r3.x, l(1.000000)
  max r3.x, r3.x, l(0.000000)
  mul r3.y, r3.x, r3.x
  mul r3.y, r3.y, r3.y
  mul r3.x, r3.y, r3.x
  mad r3.xyz, r7.xyzx, r3.xxxx, r4.yzwy
  add r7.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r7.xyz, r2.xyzx, r7.xyzx
  mul r7.xyz, r5.xyzx, r7.xyzx
  mul r7.xyz, r7.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000)
  mul r6.w, r5.w, r5.w
  mul r7.w, r3.w, r3.w
  mad r8.w, -r5.w, r5.w, l(1.000000)
  mad r7.w, r7.w, r8.w, r6.w
  sqrt r7.w, r7.w
  mul r9.x, r1.w, r1.w
  mad r8.w, r9.x, r8.w, r6.w
  sqrt r8.w, r8.w
  mul r8.w, r3.w, r8.w
  mad r1.w, r1.w, r7.w, r8.w
  lt r7.w, l(0.000000), r1.w
  div r1.w, l(0.500000), r1.w
  and r1.w, r1.w, r7.w
  mul r2.w, r2.w, r2.w
  mad r5.w, r5.w, r5.w, l(-1.000000)
  mad r2.w, r2.w, r5.w, l(1.000000)
  mul r2.w, r2.w, r2.w
  mul r2.w, r2.w, l(3.141593)
  div r2.w, r6.w, r2.w
  mul r3.xyz, r1.wwww, r3.xyzx
  mul r3.xyz, r2.wwww, r3.xyzx
  mul r3.xyz, r3.xyzx, r5.xyzx
else 
  mov r7.xyz, l(0,0,0,0)
  mov r3.xyz, l(0,0,0,0)
endif 
min r1.x, r3.w, l(1.000000)
mov_sat r5.xy, r1.xyxx
sample_indexable(texture2d)(float,float,float,float) r5.xy, r5.xyxx, t35.xyzw, s1
sample_indexable(texturecube)(float,float,float,float) r9.xyz, r8.xyzx, t33.xyzw, s1
add r1.xw, -r1.yyyx, l(1.000000, 0.000000, 0.000000, 1.000000)
max r10.xyz, r4.yzwy, r1.xxxx
add r10.xyz, -r4.yzwy, r10.xyzx
mul r1.x, r1.w, r1.w
mul r1.x, r1.x, r1.x
mul r1.x, r1.x, r1.w
mad r10.xyz, r10.xyzx, r1.xxxx, r4.yzwy
mad r10.xyz, r10.xyzx, r5.xxxx, r5.yyyy
add r1.x, r5.y, r5.x
add r1.x, -r1.x, l(1.000000)
add r5.xyz, -r4.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r4.yzw, r5.xxyz, l(0.000000, 0.047619, 0.047619, 0.047619), r4.yyzw
mul r5.xyz, r10.xyzx, r1.xxxx
mul r5.xyz, r4.yzwy, r5.xyzx
mad r4.yzw, -r4.yyzw, r1.xxxx, l(0.000000, 1.000000, 1.000000, 1.000000)
div r4.yzw, r5.xxyz, r4.yyzw
add r5.xyz, -r10.xyzx, r4.yzwy
add r5.xyz, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r2.xyz, r2.xyzx, r5.xyzx, r4.yzwy
mad r2.xyz, r2.xyzx, r9.xyzx, r7.xyzx
dp3 r1.x, -r6.xyzx, r8.xyzx
add r1.x, r1.x, r1.x
mad r4.yzw, r8.xxyz, -r1.xxxx, -r6.xxyz
dp3 r1.x, r4.yzwy, r4.yzwy
rsq r1.x, r1.x
mul r4.yzw, r1.xxxx, r4.yyzw
resinfo_indexable(texturecube)(float,float,float,float)_uint r1.x, l(0), t34.wxyz
iadd r1.x, r1.x, l(-1)
utof r1.x, r1.x
mul r1.x, r1.x, r1.y
sample_l_indexable(texturecube)(float,float,float,float) r1.xyw, r4.yzwy, t34.xywz, s1, r1.x
mad r1.xyw, r1.xyxw, r10.xyxz, r3.xyxz
mad r3.xyz, r2.xyzx, r1.zzzz, -r2.xyzx
mad r2.xyz, r4.xxxx, r3.xyzx, r2.xyzx
mad r3.xyz, r1.xywx, r1.zzzz, -r1.xywx
mad r1.xyz, r4.xxxx, r3.xyzx, r1.xywx
add r1.xyz, r1.xyzx, r2.xyzx
add o0.xyz, r0.xyzx, r1.xyzx
mov o0.w, r0.w
ret 
// Approximately 186 instruction slots used
