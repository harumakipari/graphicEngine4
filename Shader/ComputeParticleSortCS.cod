//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// Resource bind info for particleHeaderBuffer
// {
//
//   struct ParticleHeader
//   {
//       
//       uint alive;                    // Offset:    0
//       uint particleIndex;            // Offset:    4
//       float depth;                   // Offset:    8
//       uint dummy;                    // Offset:   12
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// indirectDataBuffer                    UAV    byte         r/w             u2      1 
// particleHeaderBuffer                  UAV  struct         r/w             u3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_uav_raw u2
dcl_uav_structured u3, 16
dcl_temps 4
dcl_thread_group 1, 1, 1

#line 51 "C:\Users\2240225\Desktop\3Dsoftbody\Shader\ComputeParticle.hlsli"
mov r0.x, l(0)  // r0.x <- IndirectArgumentsNumCurrentParticle

#line 12 "C:\Users\2240225\Desktop\3Dsoftbody\Shader\ComputeParticleSortCS.hlsl"
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.x, r0.x, u2.xxxx
mov r0.x, r0.x  // r0.x <- currentNumParticle

#line 13
if_z r0.x

#line 14
  ret 
endif 

#line 18
mov r0.y, l(2)
udiv r0.y, null, r0.x, r0.y  // r0.y <- h
mov r0.z, r0.y  // r0.z <- h
loop 
  ilt r0.w, l(0), r0.z
  breakc_z r0.w

#line 20
  mov r0.z, r0.z  // r0.z <- i
  mov r0.w, r0.z  // r0.w <- i
  loop 
    ult r1.x, r0.w, r0.x
    breakc_z r1.x

#line 22
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.x, r0.w, l(0), u3.xxxx
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.y, r0.w, l(4), u3.xxxx
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.z, r0.w, l(8), u3.xxxx
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.w, r0.w, l(12), u3.xxxx
    mov r1.x, r1.x  // r1.x <- k.alive
    mov r1.y, r1.y  // r1.y <- k.particleIndex
    mov r1.z, r1.z  // r1.z <- k.depth
    mov r1.w, r1.w  // r1.w <- k.dummy

#line 25
    mov r0.w, r0.w  // r0.w <- j
    mov r2.x, r0.w  // r2.x <- j
    loop 
      ige r2.y, r2.x, r0.z
      ineg r2.z, r0.z
      iadd r2.z, r2.z, r2.x
      ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.z, r2.z, l(0), u3.xxxx
      ult r2.z, r2.z, r1.x
      and r2.y, r2.z, r2.y
      breakc_z r2.y

#line 27
      ineg r2.y, r0.z
      iadd r2.y, r2.y, r2.x
      ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.z, r2.y, l(0), u3.xxxx
      ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.w, r2.y, l(4), u3.xxxx
      ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r3.x, r2.y, l(8), u3.xxxx
      ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r2.y, r2.y, l(12), u3.xxxx
      store_structured u3.x, r2.x, l(0), r2.z
      store_structured u3.x, r2.x, l(4), r2.w
      store_structured u3.x, r2.x, l(8), r3.x
      store_structured u3.x, r2.x, l(12), r2.y

#line 28
      ineg r2.y, r0.z
      iadd r2.x, r2.y, r2.x
    endloop 

#line 30
    store_structured u3.x, r2.x, l(0), r1.x
    store_structured u3.x, r2.x, l(4), r1.y
    store_structured u3.x, r2.x, l(8), r1.z
    store_structured u3.x, r2.x, l(12), r1.w

#line 31
    iadd r0.w, r0.w, l(1)  // r0.w <- i
  endloop 

#line 33
  ineg r0.w, r0.z
  ineg r1.x, l(2)
  xor r1.y, r0.z, l(2)
  imax r0.w, r0.z, r0.w
  imax r1.x, r1.x, l(2)
  udiv r0.w, null, r0.w, r1.x
  ineg r1.x, r0.w
  and r1.y, r1.y, l(0x80000000)
  ine r1.y, l(0, 0, 0, 0), r1.y
  movc r0.z, r1.y, r1.x, r0.w  // r0.z <- h
endloop 

#line 35
ret 
// Approximately 66 instruction slots used
