//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 cameraPositon;              // Offset:   64 Size:    16 [unused]
//   row_major float4x4 view;           // Offset:   80 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset:  144 Size:    64 [unused]
//   row_major float4x4 inverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 inverseViewProjection;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 invView;        // Offset:  336 Size:    64 [unused]
//
// }
//
// cbuffer COMPUTE_PARTICLE_COMMON_CONSTANT_BUFFER
// {
//
//   float deltaTime;                   // Offset:    0 Size:     4
//   uint2 textureSplitCount;           // Offset:    4 Size:     8
//   uint systemNumParticles;           // Offset:   12 Size:     4 [unused]
//   uint totalEmitCount;               // Offset:   16 Size:     4 [unused]
//   uint maxEmitParticles;             // Offset:   20 Size:     4 [unused]
//   uint2 commonDummy;                 // Offset:   24 Size:     8 [unused]
//
// }
//
// Resource bind info for particleDataBuffer
// {
//
//   struct ParticleData
//   {
//       
//       float4 parameter;              // Offset:    0
//       float4 position;               // Offset:   16
//       float4 rotation;               // Offset:   32
//       float4 scale;                  // Offset:   48
//       float4 velocity;               // Offset:   64
//       float4 acceleration;           // Offset:   80
//       float4 texcoord;               // Offset:   96
//       float4 color;                  // Offset:  112
//       float4 customData;             // Offset:  128
//
//   } $Element;                        // Offset:    0 Size:   144
//
// }
//
// Resource bind info for particleUnusedBuffer
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for particleHeaderBuffer
// {
//
//   struct ParticleHeader
//   {
//       
//       uint alive;                    // Offset:    0
//       uint particleIndex;            // Offset:    4
//       float depth;                   // Offset:    8
//       uint dummy;                    // Offset:   12
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleDataBuffer                    UAV  struct         r/w             u0      1 
// particleUnusedBuffer                  UAV  struct      append             u1      1 
// indirectDataBuffer                    UAV    byte         r/w             u2      1 
// particleHeaderBuffer                  UAV  struct         r/w             u3      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb4      1 
// COMPUTE_PARTICLE_COMMON_CONSTANT_BUFFER    cbuffer      NA          NA           cb10      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB4[4], immediateIndexed
dcl_constantbuffer CB10[1], immediateIndexed
dcl_uav_structured u0, 144
dcl_uav_structured u1, 4
dcl_uav_raw u2
dcl_uav_structured u3, 16
dcl_input vThreadID.x
dcl_temps 9
dcl_thread_group 1024, 1, 1
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.xy, vThreadID.x, l(0), u3.xyxx
if_z r0.x
  ret 
endif 
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r1.xyz, r0.y, l(0), u0.xyzx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r2.xyz, r0.y, l(16), u0.xyzx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r3.xyz, r0.y, l(64), u0.xyzx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r4.xyz, r0.y, l(80), u0.xyzx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r5.xyzw, r0.y, l(124), u0.yzwx
add r0.z, r1.y, -cb10[0].x
lt r0.w, r0.z, l(0.000000)
if_nz r0.w
  imm_atomic_alloc r6.x, u1
  store_structured u1.x, r6.x, l(0), r0.y
  store_structured u3.x, vThreadID.x, l(0), l(0)
  store_structured u0.x, r0.y, l(4), r0.z
  atomic_iadd u2, l(8), l(1)
  ret 
endif 
add r0.w, r1.x, l(0.500000)
ftoi r0.w, r0.w
switch r0.w
  case l(1)
  mad r6.yzw, r4.xxyz, cb10[0].xxxx, r3.xxyz
  add r7.xyz, -r2.xyzx, r5.xyzx
  dp3 r0.w, r7.xyzx, r7.xyzx
  rsq r0.w, r0.w
  mul r7.xyz, r0.wwww, r7.xyzx
  mul r7.xyz, r6.yzwy, r7.xyzx
  mad r1.xyw, r7.xyxz, cb10[0].xxxx, r2.xyxz
  add r0.w, -r0.z, r1.z
  add r0.w, r0.w, l(0.500000)
  ftou r0.w, r0.w
  utof r7.xy, cb10[0].yzyy
  div r5.yz, l(1.000000, 1.000000, 1.000000, 1.000000), r7.xxyx
  udiv r7.x, r8.x, r0.w, cb10[0].y
  utof r0.w, r8.x
  mul r6.x, r5.y, r0.w
  utof r0.w, r7.x
  mul r5.x, r5.z, r0.w
  break 
  case l(12)
  mad r6.yzw, r4.xxyz, cb10[0].xxxx, r3.xxyz
  mul r7.xyz, r6.yzwy, cb10[0].xxxx
  mad r1.xyw, r7.xyxz, l(5.000000, 5.000000, 0.000000, 5.000000), r2.xyxz
  add r0.w, -r0.z, r1.z
  add r0.w, r0.w, l(0.500000)
  ftou r0.w, r0.w
  utof r7.xy, cb10[0].yzyy
  div r5.yz, l(1.000000, 1.000000, 1.000000, 1.000000), r7.xxyx
  udiv r7.x, r8.x, r0.w, cb10[0].y
  utof r0.w, r8.x
  mul r6.x, r5.y, r0.w
  utof r0.w, r7.x
  mul r5.x, r5.z, r0.w
  mov_sat r5.w, r0.z
  break 
  default 
  mad r6.yzw, r4.xxyz, cb10[0].xxxx, r3.xxyz
  mad r1.xyw, r6.yzyw, cb10[0].xxxx, r2.xyxz
  add r0.w, -r0.z, r1.z
  div r0.w, r0.w, r1.z
  imul null, r1.z, cb10[0].z, cb10[0].y
  utof r1.z, r1.z
  mul r0.w, r0.w, r1.z
  ftou r0.w, r0.w
  imad r1.z, cb10[0].y, cb10[0].z, l(-1)
  umin r0.w, r0.w, r1.z
  utof r2.xy, cb10[0].yzyy
  div r5.yz, l(1.000000, 1.000000, 1.000000, 1.000000), r2.xxyx
  udiv r2.x, r3.x, r0.w, cb10[0].y
  utof r0.w, r3.x
  mul r6.x, r5.y, r0.w
  utof r0.w, r2.x
  mul r5.x, r5.z, r0.w
  mov_sat r5.w, r0.z
  break 
endswitch 
mul r0.w, r1.y, cb4[1].w
mad r0.w, r1.x, cb4[0].w, r0.w
mad r0.w, r1.w, cb4[2].w, r0.w
add r0.w, r0.w, cb4[3].w
store_structured u3.x, vThreadID.x, l(0), r0.x
store_structured u3.x, vThreadID.x, l(8), r0.w
store_structured u0.x, r0.y, l(4), r0.z
store_structured u0.xyz, r0.y, l(16), r1.xywx
store_structured u0.xyz, r0.y, l(64), r6.yzwy
mov r6.yzw, r5.xxyz
store_structured u0.xyzw, r0.y, l(96), r6.xyzw
store_structured u0.x, r0.y, l(124), r5.w
ret 
// Approximately 91 instruction slots used
