//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 vviewProjection;// Offset:    0 Size:    64
//   float4 vcameraPositon;             // Offset:   64 Size:    16 [unused]
//   row_major float4x4 vview;          // Offset:   80 Size:    64 [unused]
//   row_major float4x4 vprojection;    // Offset:  144 Size:    64 [unused]
//   row_major float4x4 vinverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 vinverseViewProjection;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 vinvView;       // Offset:  336 Size:    64 [unused]
//
// }
//
// cbuffer COMPUTE_PARTICLE_COMMON_CONSTANT_BUFFER
// {
//
//   float deltaTime;                   // Offset:    0 Size:     4
//   uint2 textureSplitCount;           // Offset:    4 Size:     8
//   uint systemNumParticles;           // Offset:   12 Size:     4 [unused]
//   uint totalEmitCount;               // Offset:   16 Size:     4 [unused]
//   uint maxEmitParticles;             // Offset:   20 Size:     4 [unused]
//   uint2 commonDummy;                 // Offset:   24 Size:     8 [unused]
//
// }
//
// Resource bind info for particleDataBuffer
// {
//
//   struct ParticleData
//   {
//       
//       float4 parameter;              // Offset:    0
//       float4 position;               // Offset:   16
//       float4 rotation;               // Offset:   32
//       float4 scale;                  // Offset:   48
//       float4 velocity;               // Offset:   64
//       float4 acceleration;           // Offset:   80
//       float4 texcoord;               // Offset:   96
//       float4 color;                  // Offset:  112
//       float4 customData;             // Offset:  128
//
//   } $Element;                        // Offset:    0 Size:   144
//
// }
//
// Resource bind info for particleUnusedBuffer
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for particleHeaderBuffer
// {
//
//   struct ParticleHeader
//   {
//       
//       uint alive;                    // Offset:    0
//       uint particleIndex;            // Offset:    4
//       float depth;                   // Offset:    8
//       uint dummy;                    // Offset:   12
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleDataBuffer                    UAV  struct         r/w             u0      1 
// particleUnusedBuffer                  UAV  struct      append             u1      1 
// indirectDataBuffer                    UAV    byte         r/w             u2      1 
// particleHeaderBuffer                  UAV  struct         r/w             u3      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb8      1 
// COMPUTE_PARTICLE_COMMON_CONSTANT_BUFFER    cbuffer      NA          NA           cb10      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB8[4], immediateIndexed
dcl_constantbuffer CB10[1], immediateIndexed
dcl_uav_structured u0, 144
dcl_uav_structured u1, 4
dcl_uav_raw u2
dcl_uav_structured u3, 16
dcl_input vThreadID.x
dcl_temps 16
dcl_thread_group 1024, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- dispatchThreadId.x; vThreadID.y <- dispatchThreadId.y; vThreadID.z <- dispatchThreadId.z
//
#line 53 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ComputeParticle.hlsli"
mov r0.x, l(8)  // r0.x <- IndirectArgumentsNumDeadParticle

#line 13 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ComputeParticleUpdateCS.hlsl"
mov r0.y, vThreadID.x  // r0.y <- headerIndex

#line 15
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.z, r0.y, l(0), u3.xxxx  // r0.z <- header.alive
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.w, r0.y, l(4), u3.xxxx
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.x, r0.y, l(8), u3.xxxx
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.y, r0.y, l(12), u3.xxxx
mov r0.w, r0.w  // r0.w <- header.particleIndex
mov r1.x, r1.x  // r1.x <- header.depth
mov r1.y, r1.y  // r1.y <- header.dummy

#line 17
mov r0.w, r0.w  // r0.w <- dataIndex

#line 20
if_z r0.z

#line 21
  ret 
endif 

#line 23
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r1.z, r0.w, l(0), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r1.w, r0.w, l(4), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r2.x, r0.w, l(8), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r2.y, r0.w, l(12), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r3.x, r0.w, l(16), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r3.y, r0.w, l(20), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r3.z, r0.w, l(24), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r2.z, r0.w, l(28), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r2.w, r0.w, l(32), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r3.w, r0.w, l(36), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r4.x, r0.w, l(40), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r4.y, r0.w, l(44), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r4.z, r0.w, l(48), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r4.w, r0.w, l(52), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r5.x, r0.w, l(56), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r5.y, r0.w, l(60), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r6.x, r0.w, l(64), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r6.y, r0.w, l(68), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r6.z, r0.w, l(72), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r5.z, r0.w, l(76), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r7.x, r0.w, l(80), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r7.y, r0.w, l(84), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r7.z, r0.w, l(88), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r5.w, r0.w, l(92), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r6.w, r0.w, l(96), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r7.w, r0.w, l(100), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r8.x, r0.w, l(104), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r8.y, r0.w, l(108), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r8.z, r0.w, l(112), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r8.w, r0.w, l(116), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r9.x, r0.w, l(120), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r10.w, r0.w, l(124), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r11.x, r0.w, l(128), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r11.y, r0.w, l(132), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r11.z, r0.w, l(136), u0.xxxx
ld_structured_indexable(structured_buffer, stride=144)(mixed,mixed,mixed,mixed) r9.y, r0.w, l(140), u0.xxxx
mov r1.z, r1.z  // r1.z <- data.parameter.x
mov r2.x, r2.x  // r2.x <- data.parameter.z
mov r2.y, r2.y  // r2.y <- data.parameter.w
mov r3.x, r3.x  // r3.x <- data.position.x
mov r3.y, r3.y  // r3.y <- data.position.y
mov r3.z, r3.z  // r3.z <- data.position.z
mov r2.z, r2.z  // r2.z <- data.position.w
mov r2.w, r2.w  // r2.w <- data.rotation.x
mov r3.w, r3.w  // r3.w <- data.rotation.y
mov r4.x, r4.x  // r4.x <- data.rotation.z
mov r4.y, r4.y  // r4.y <- data.rotation.w
mov r4.z, r4.z  // r4.z <- data.scale.x
mov r4.w, r4.w  // r4.w <- data.scale.y
mov r5.x, r5.x  // r5.x <- data.scale.z
mov r5.y, r5.y  // r5.y <- data.scale.w
mov r6.x, r6.x  // r6.x <- data.velocity.x
mov r6.y, r6.y  // r6.y <- data.velocity.y
mov r6.z, r6.z  // r6.z <- data.velocity.z
mov r5.z, r5.z  // r5.z <- data.velocity.w
mov r7.x, r7.x  // r7.x <- data.acceleration.x
mov r7.y, r7.y  // r7.y <- data.acceleration.y
mov r7.z, r7.z  // r7.z <- data.acceleration.z
mov r5.w, r5.w  // r5.w <- data.acceleration.w
mov r6.w, r6.w  // r6.w <- data.texcoord.x
mov r7.w, r7.w  // r7.w <- data.texcoord.y
mov r8.x, r8.x  // r8.x <- data.texcoord.z
mov r8.y, r8.y  // r8.y <- data.texcoord.w
mov r8.z, r8.z  // r8.z <- data.color.x
mov r8.w, r8.w  // r8.w <- data.color.y
mov r9.x, r9.x  // r9.x <- data.color.z
mov r10.w, r10.w  // r10.w <- data.color.w
mov r11.x, r11.x  // r11.x <- data.customData.x
mov r1.w, r1.w  // r1.w <- data.parameter.y
mov r11.y, r11.y  // r11.y <- data.customData.y
mov r11.z, r11.z  // r11.z <- data.customData.z
mov r9.y, r9.y  // r9.y <- data.customData.w

#line 26
mov r9.z, -cb10[0].x
add r1.w, r1.w, r9.z

#line 27
itof r9.z, l(0)
lt r9.z, r1.w, r9.z
if_nz r9.z

#line 30
  mov r9.z, l(0)  // r9.z <- header.alive

#line 31
  imm_atomic_alloc r12.x, u1
  store_structured u1.x, r12.x, l(0), r0.w

#line 34
  store_structured u3.x, r0.y, l(0), r9.z
  store_structured u3.x, r0.y, l(4), r0.w
  store_structured u3.x, r0.y, l(8), r1.x
  store_structured u3.x, r0.y, l(12), r1.y

#line 35
  store_structured u0.x, r0.w, l(0), r1.z
  store_structured u0.x, r0.w, l(4), r1.w
  store_structured u0.x, r0.w, l(8), r2.x
  store_structured u0.x, r0.w, l(12), r2.y
  store_structured u0.x, r0.w, l(16), r3.x
  store_structured u0.x, r0.w, l(20), r3.y
  store_structured u0.x, r0.w, l(24), r3.z
  store_structured u0.x, r0.w, l(28), r2.z
  store_structured u0.x, r0.w, l(32), r2.w
  store_structured u0.x, r0.w, l(36), r3.w
  store_structured u0.x, r0.w, l(40), r4.x
  store_structured u0.x, r0.w, l(44), r4.y
  store_structured u0.x, r0.w, l(48), r4.z
  store_structured u0.x, r0.w, l(52), r4.w
  store_structured u0.x, r0.w, l(56), r5.x
  store_structured u0.x, r0.w, l(60), r5.y
  store_structured u0.x, r0.w, l(64), r6.x
  store_structured u0.x, r0.w, l(68), r6.y
  store_structured u0.x, r0.w, l(72), r6.z
  store_structured u0.x, r0.w, l(76), r5.z
  store_structured u0.x, r0.w, l(80), r7.x
  store_structured u0.x, r0.w, l(84), r7.y
  store_structured u0.x, r0.w, l(88), r7.z
  store_structured u0.x, r0.w, l(92), r5.w
  store_structured u0.x, r0.w, l(96), r6.w
  store_structured u0.x, r0.w, l(100), r7.w
  store_structured u0.x, r0.w, l(104), r8.x
  store_structured u0.x, r0.w, l(108), r8.y
  store_structured u0.x, r0.w, l(112), r8.z
  store_structured u0.x, r0.w, l(116), r8.w
  store_structured u0.x, r0.w, l(120), r9.x
  store_structured u0.x, r0.w, l(124), r10.w
  store_structured u0.x, r0.w, l(128), r11.x
  store_structured u0.x, r0.w, l(132), r11.y
  store_structured u0.x, r0.w, l(136), r11.z
  store_structured u0.x, r0.w, l(140), r9.y

#line 38
  atomic_iadd u2, r0.x, l(1)

#line 39
  ret 

#line 40
endif   // r0.z <- header.alive

#line 45
add r0.x, r1.z, l(0.500000)
ftoi r0.x, r0.x
switch r0.x

#line 47
  case l(1)

#line 50
  mul r14.xyz, r7.xyzx, cb10[0].xxxx
  add r12.xyz, r14.xyzx, r6.xyzx  // r12.x <- data.velocity.x; r12.y <- data.velocity.y; r12.z <- data.velocity.z

#line 53
  mov r14.xyz, -r3.xyzx
  add r14.xyz, r14.xyzx, r11.xyzx
  dp3 r0.x, r14.xyzx, r14.xyzx
  rsq r0.x, r0.x
  mul r14.xyz, r0.xxxx, r14.xyzx  // r14.x <- vec.x; r14.y <- vec.y; r14.z <- vec.z

#line 56
  mul r14.xyz, r12.xyzx, r14.xyzx
  mul r14.xyz, r14.xyzx, cb10[0].xxxx
  add r13.xyz, r3.xyzx, r14.xyzx  // r13.x <- data.position.x; r13.y <- data.position.y; r13.z <- data.position.z

#line 60
  mov r0.x, -r1.w
  add r0.x, r0.x, r2.x
  add r0.x, r0.x, l(0.500000)
  ftou r0.x, r0.x  // r0.x <- type

#line 61
  utof r1.x, cb10[0].y
  div r10.y, l(1.000000), r1.x  // r10.y <- w

#line 62
  utof r1.x, cb10[0].z
  div r10.z, l(1.000000), r1.x  // r10.z <- h

#line 63
  udiv null, r1.x, r0.x, cb10[0].y
  utof r1.x, r1.x
  mul r8.x, r10.y, r1.x  // r8.x <- uv.x
  udiv r0.x, null, r0.x, cb10[0].y
  utof r0.x, r0.x
  mul r8.y, r10.z, r0.x  // r8.y <- uv.y

#line 64
  mov r8.xy, r8.xyxx  // r8.x <- data.texcoord.x; r8.y <- data.texcoord.y

#line 65
  mov r10.y, r10.y  // r10.y <- data.texcoord.z
  mov r10.z, r10.z  // r10.z <- data.texcoord.w

#line 66
  mov r12.w, r8.x
  mov r12.xyzw, r12.xyzw  // r12.w <- data.texcoord.x
  mov r10.x, r8.y
  mov r10.xyzw, r10.xyzw  // r10.x <- data.texcoord.y
  break   // r3.x <- data.position.x; r3.y <- data.position.y; r3.z <- data.position.z; r6.x <- data.velocity.x; r6.y <- data.velocity.y; r6.z <- data.velocity.z; r6.w <- data.texcoord.x; r7.w <- data.texcoord.y; r8.x <- data.texcoord.z; r8.y <- data.texcoord.w

#line 68
  case l(12)

#line 71
  mul r14.xyz, r7.xyzx, cb10[0].xxxx
  add r12.xyz, r14.xyzx, r6.xyzx  // r12.x <- data.velocity.x; r12.y <- data.velocity.y; r12.z <- data.velocity.z

#line 74
  mul r14.xyz, r12.xyzx, cb10[0].xxxx
  itof r15.xyz, l(5, 5, 5, 0)
  mul r14.xyz, r14.xyzx, r15.xyzx
  add r13.xyz, r14.xyzx, r3.xyzx  // r13.x <- data.position.x; r13.y <- data.position.y; r13.z <- data.position.z

#line 77
  mov r0.x, -r1.w
  add r0.x, r0.x, r2.x
  add r0.x, r0.x, l(0.500000)
  ftou r0.x, r0.x  // r0.x <- type

#line 78
  utof r1.x, cb10[0].y
  div r10.y, l(1.000000), r1.x  // r10.y <- w

#line 79
  utof r1.x, cb10[0].z
  div r10.z, l(1.000000), r1.x  // r10.z <- h

#line 80
  udiv null, r1.x, r0.x, cb10[0].y
  utof r1.x, r1.x
  mul r8.x, r10.y, r1.x  // r8.x <- uv.x
  udiv r0.x, null, r0.x, cb10[0].y
  utof r0.x, r0.x
  mul r8.y, r10.z, r0.x  // r8.y <- uv.y

#line 81
  mov r8.xy, r8.xyxx  // r8.x <- data.texcoord.x; r8.y <- data.texcoord.y

#line 82
  mov r10.y, r10.y  // r10.y <- data.texcoord.z
  mov r10.z, r10.z  // r10.z <- data.texcoord.w

#line 85
  max r0.x, r1.w, l(0.000000)
  min r10.w, r0.x, l(1.000000)

#line 86
  mov r12.w, r8.x
  mov r12.xyzw, r12.xyzw  // r12.w <- data.texcoord.x
  mov r10.x, r8.y
  mov r10.xyzw, r10.xyzw  // r10.x <- data.texcoord.y
  break   // r3.x <- data.position.x; r3.y <- data.position.y; r3.z <- data.position.z; r6.x <- data.velocity.x; r6.y <- data.velocity.y; r6.z <- data.velocity.z; r6.w <- data.texcoord.x; r7.w <- data.texcoord.y; r8.x <- data.texcoord.z; r8.y <- data.texcoord.w

#line 88
  default 

#line 91
  mul r14.xyz, r7.xyzx, cb10[0].xxxx
  add r12.xyz, r14.xyzx, r6.xyzx  // r12.x <- data.velocity.x; r12.y <- data.velocity.y; r12.z <- data.velocity.z

#line 94
  mul r6.xyz, r12.xyzx, cb10[0].xxxx
  add r13.xyz, r6.xyzx, r3.xyzx  // r13.x <- data.position.x; r13.y <- data.position.y; r13.z <- data.position.z

#line 99
  mov r0.x, -r1.w
  add r0.x, r0.x, r2.x
  div r0.x, r0.x, r2.x  // r0.x <- lifeRatio

#line 100
  imul null, r1.x, cb10[0].z, cb10[0].y  // r1.x <- frameCount

#line 101
  utof r3.x, r1.x
  mul r0.x, r0.x, r3.x
  ftou r0.x, r0.x
  mov r3.x, l(1)
  ineg r3.x, r3.x
  iadd r1.x, r1.x, r3.x
  umin r0.x, r0.x, r1.x  // r0.x <- type

#line 103
  utof r1.x, cb10[0].y
  div r10.y, l(1.000000), r1.x  // r10.y <- w

#line 104
  utof r1.x, cb10[0].z
  div r10.z, l(1.000000), r1.x  // r10.z <- h

#line 105
  udiv null, r1.x, r0.x, cb10[0].y
  utof r1.x, r1.x
  mul r3.x, r10.y, r1.x  // r3.x <- uv.x
  udiv r0.x, null, r0.x, cb10[0].y
  utof r0.x, r0.x
  mul r3.y, r10.z, r0.x  // r3.y <- uv.y

#line 106
  mov r3.xy, r3.xyxx  // r3.x <- data.texcoord.x; r3.y <- data.texcoord.y

#line 107
  mov r10.y, r10.y  // r10.y <- data.texcoord.z
  mov r10.z, r10.z  // r10.z <- data.texcoord.w

#line 110
  max r0.x, r1.w, l(0.000000)
  min r10.w, r0.x, l(1.000000)

#line 111
  mov r12.w, r3.x
  mov r12.xyzw, r12.xyzw  // r12.w <- data.texcoord.x
  mov r10.x, r3.y
  mov r10.xyzw, r10.xyzw  // r10.x <- data.texcoord.y
  break   // r1.x <- header.depth; r3.x <- data.position.x; r3.y <- data.position.y; r3.z <- data.position.z; r6.x <- data.velocity.x; r6.y <- data.velocity.y; r6.z <- data.velocity.z; r6.w <- data.texcoord.x; r7.w <- data.texcoord.y; r8.x <- data.texcoord.z; r8.y <- data.texcoord.w

#line 113
endswitch   // r12.x <- data.velocity.x; r12.y <- data.velocity.y; r12.z <- data.velocity.z; r13.x <- data.position.x; r13.y <- data.position.y; r13.z <- data.position.z; r10.y <- data.texcoord.z; r10.z <- data.texcoord.w; r12.w <- data.texcoord.x; r10.x <- data.texcoord.y

#line 116
itof r0.x, l(1)
mul r1.x, r13.x, cb8[0].w
mul r3.x, r13.y, cb8[1].w
add r1.x, r1.x, r3.x
mul r3.x, r13.z, cb8[2].w
add r1.x, r1.x, r3.x
mul r0.x, r0.x, cb8[3].w
add r0.x, r0.x, r1.x  // r0.x <- header.depth

#line 119
store_structured u3.x, r0.y, l(0), r0.z
store_structured u3.x, r0.y, l(4), r0.w
store_structured u3.x, r0.y, l(8), r0.x
store_structured u3.x, r0.y, l(12), r1.y

#line 120
store_structured u0.x, r0.w, l(0), r1.z
store_structured u0.x, r0.w, l(4), r1.w
store_structured u0.x, r0.w, l(8), r2.x
store_structured u0.x, r0.w, l(12), r2.y
store_structured u0.x, r0.w, l(16), r13.x
store_structured u0.x, r0.w, l(20), r13.y
store_structured u0.x, r0.w, l(24), r13.z
store_structured u0.x, r0.w, l(28), r2.z
store_structured u0.x, r0.w, l(32), r2.w
store_structured u0.x, r0.w, l(36), r3.w
store_structured u0.x, r0.w, l(40), r4.x
store_structured u0.x, r0.w, l(44), r4.y
store_structured u0.x, r0.w, l(48), r4.z
store_structured u0.x, r0.w, l(52), r4.w
store_structured u0.x, r0.w, l(56), r5.x
store_structured u0.x, r0.w, l(60), r5.y
store_structured u0.x, r0.w, l(64), r12.x
store_structured u0.x, r0.w, l(68), r12.y
store_structured u0.x, r0.w, l(72), r12.z
store_structured u0.x, r0.w, l(76), r5.z
store_structured u0.x, r0.w, l(80), r7.x
store_structured u0.x, r0.w, l(84), r7.y
store_structured u0.x, r0.w, l(88), r7.z
store_structured u0.x, r0.w, l(92), r5.w
store_structured u0.x, r0.w, l(96), r12.w
store_structured u0.x, r0.w, l(100), r10.x
store_structured u0.x, r0.w, l(104), r10.y
store_structured u0.x, r0.w, l(108), r10.z
store_structured u0.x, r0.w, l(112), r8.z
store_structured u0.x, r0.w, l(116), r8.w
store_structured u0.x, r0.w, l(120), r9.x
store_structured u0.x, r0.w, l(124), r10.w
store_structured u0.x, r0.w, l(128), r11.x
store_structured u0.x, r0.w, l(132), r11.y
store_structured u0.x, r0.w, l(136), r11.z
store_structured u0.x, r0.w, l(140), r9.y

#line 121
ret 
// Approximately 289 instruction slots used
