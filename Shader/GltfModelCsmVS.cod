//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4 [unused]
//   bool hasTangent;                   // Offset:   84 Size:     4 [unused]
//   int skin;                          // Offset:   88 Size:     4
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64 [unused]
//
// }
//
// cbuffer PRIMITIVE_JOINT_CONSTANTS
// {
//
//   row_major float4x4 jointMatrices[512];// Offset:    0 Size: 32768
//
// }
//
// cbuffer csmConstants
// {
//
//   struct CsmConstants
//   {
//       
//       row_major float4x4 cascadedMatrices[4];// Offset:    0
//       float4 cascadedPlaneDistances; // Offset:  256
//
//   } csmData;                         // Offset:    0 Size:   272
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// PRIMITIVE_JOINT_CONSTANTS         cbuffer      NA          NA            cb2      1 
// csmConstants                      cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float       
// TANGENT                  0   xyzw        2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float       
// JOINTS                   0   xyzw        4     NONE    uint   xyzw
// JOINTS                   1   xyzw        5     NONE    uint   xyzw
// WEIGHTS                  0   xyzw        6     NONE   float   xyzw
// WEIGHTS                  1   xyzw        7     NONE   float   xyzw
// SV_INSTANCEID            0   x           8   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// INSTANCEID               0   x           1     NONE    uint   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_constantbuffer CB2[2048], dynamicIndexed
dcl_constantbuffer CB3[17], dynamicIndexed
dcl_input v0.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_input v7.xyzw
dcl_input_sgv v8.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output o1.x
dcl_temps 13
ilt r0.x, l(-1), cb0[5].z
if_nz r0.x
  ishl r0.xyzw, v4.xyzw, l(2, 2, 2, 2)
  mul r1.xyzw, v6.xxxx, cb2[r0.x + 0].xyzw
  mul r2.xyzw, v6.xxxx, cb2[r0.x + 1].xyzw
  mul r3.xyzw, v6.xxxx, cb2[r0.x + 2].xyzw
  mul r4.xyzw, v6.xxxx, cb2[r0.x + 3].xyzw
  mul r5.xyzw, v6.yyyy, cb2[r0.y + 0].xyzw
  mul r6.xyzw, v6.yyyy, cb2[r0.y + 1].xyzw
  mul r7.xyzw, v6.yyyy, cb2[r0.y + 2].xyzw
  mul r8.xyzw, v6.yyyy, cb2[r0.y + 3].xyzw
  mov r9.x, r1.x
  mov r9.y, r2.x
  mov r9.z, r3.x
  mov r9.w, r4.x
  mov r10.x, r5.x
  mov r10.y, r6.x
  mov r10.z, r7.x
  mov r10.w, r8.x
  add r9.xyzw, r9.xyzw, r10.xyzw
  mov r10.x, r1.y
  mov r10.y, r2.y
  mov r10.z, r3.y
  mov r10.w, r4.y
  mov r11.x, r5.y
  mov r11.y, r6.y
  mov r11.z, r7.y
  mov r11.w, r8.y
  add r10.xyzw, r10.xyzw, r11.xyzw
  mov r11.x, r1.z
  mov r11.y, r2.z
  mov r11.z, r3.z
  mov r11.w, r4.z
  mov r12.x, r5.z
  mov r12.y, r6.z
  mov r12.z, r7.z
  mov r12.w, r8.z
  add r11.xyzw, r11.xyzw, r12.xyzw
  mov r4.x, r1.w
  mov r4.y, r2.w
  mov r4.z, r3.w
  mov r8.x, r5.w
  mov r8.y, r6.w
  mov r8.z, r7.w
  add r1.xyzw, r4.xyzw, r8.xyzw
  mul r2.xyzw, v6.zzzz, cb2[r0.z + 0].xyzw
  mul r3.xyzw, v6.zzzz, cb2[r0.z + 1].xyzw
  mul r4.xyzw, v6.zzzz, cb2[r0.z + 2].xyzw
  mul r5.xyzw, v6.zzzz, cb2[r0.z + 3].xyzw
  mov r6.x, r2.x
  mov r6.y, r3.x
  mov r6.z, r4.x
  mov r6.w, r5.x
  add r6.xyzw, r6.xyzw, r9.xyzw
  mov r7.x, r2.y
  mov r7.y, r3.y
  mov r7.z, r4.y
  mov r7.w, r5.y
  add r7.xyzw, r7.xyzw, r10.xyzw
  mov r8.x, r2.z
  mov r8.y, r3.z
  mov r8.z, r4.z
  mov r8.w, r5.z
  add r8.xyzw, r8.xyzw, r11.xyzw
  mov r5.x, r2.w
  mov r5.y, r3.w
  mov r5.z, r4.w
  add r1.xyzw, r1.xyzw, r5.xyzw
  mul r2.xyzw, v6.wwww, cb2[r0.w + 0].xyzw
  mul r3.xyzw, v6.wwww, cb2[r0.w + 1].xyzw
  mul r4.xyzw, v6.wwww, cb2[r0.w + 2].xyzw
  mul r0.xyzw, v6.wwww, cb2[r0.w + 3].xyzw
  mov r5.x, r2.x
  mov r5.y, r3.x
  mov r5.z, r4.x
  mov r5.w, r0.x
  add r5.xyzw, r5.xyzw, r6.xyzw
  mov r6.x, r2.y
  mov r6.y, r3.y
  mov r6.z, r4.y
  mov r6.w, r0.y
  add r6.xyzw, r6.xyzw, r7.xyzw
  mov r7.x, r2.z
  mov r7.y, r3.z
  mov r7.z, r4.z
  mov r7.w, r0.z
  add r7.xyzw, r7.xyzw, r8.xyzw
  mov r0.x, r2.w
  mov r0.y, r3.w
  mov r0.z, r4.w
  add r0.xyzw, r0.xyzw, r1.xyzw
  ishl r1.xyzw, v5.xyzw, l(2, 2, 2, 2)
  mul r2.xyzw, v7.xxxx, cb2[r1.x + 0].xyzw
  mul r3.xyzw, v7.xxxx, cb2[r1.x + 1].xyzw
  mul r4.xyzw, v7.xxxx, cb2[r1.x + 2].xyzw
  mul r8.xyzw, v7.xxxx, cb2[r1.x + 3].xyzw
  mov r9.x, r2.x
  mov r9.y, r3.x
  mov r9.z, r4.x
  mov r9.w, r8.x
  add r5.xyzw, r5.xyzw, r9.xyzw
  mov r9.x, r2.y
  mov r9.y, r3.y
  mov r9.z, r4.y
  mov r9.w, r8.y
  add r6.xyzw, r6.xyzw, r9.xyzw
  mov r9.x, r2.z
  mov r9.y, r3.z
  mov r9.z, r4.z
  mov r9.w, r8.z
  add r7.xyzw, r7.xyzw, r9.xyzw
  mov r8.x, r2.w
  mov r8.y, r3.w
  mov r8.z, r4.w
  add r0.xyzw, r0.xyzw, r8.xyzw
  mul r2.xyzw, v7.yyyy, cb2[r1.y + 0].xyzw
  mul r3.xyzw, v7.yyyy, cb2[r1.y + 1].xyzw
  mul r4.xyzw, v7.yyyy, cb2[r1.y + 2].xyzw
  mul r8.xyzw, v7.yyyy, cb2[r1.y + 3].xyzw
  mov r9.x, r2.x
  mov r9.y, r3.x
  mov r9.z, r4.x
  mov r9.w, r8.x
  add r5.xyzw, r5.xyzw, r9.xyzw
  mov r9.x, r2.y
  mov r9.y, r3.y
  mov r9.z, r4.y
  mov r9.w, r8.y
  add r6.xyzw, r6.xyzw, r9.xyzw
  mov r9.x, r2.z
  mov r9.y, r3.z
  mov r9.z, r4.z
  mov r9.w, r8.z
  add r7.xyzw, r7.xyzw, r9.xyzw
  mov r8.x, r2.w
  mov r8.y, r3.w
  mov r8.z, r4.w
  add r0.xyzw, r0.xyzw, r8.xyzw
  mul r2.xyzw, v7.zzzz, cb2[r1.z + 0].xyzw
  mul r3.xyzw, v7.zzzz, cb2[r1.z + 1].xyzw
  mul r4.xyzw, v7.zzzz, cb2[r1.z + 2].xyzw
  mul r8.xyzw, v7.zzzz, cb2[r1.z + 3].xyzw
  mov r9.x, r2.x
  mov r9.y, r3.x
  mov r9.z, r4.x
  mov r9.w, r8.x
  add r5.xyzw, r5.xyzw, r9.xyzw
  mov r9.x, r2.y
  mov r9.y, r3.y
  mov r9.z, r4.y
  mov r9.w, r8.y
  add r6.xyzw, r6.xyzw, r9.xyzw
  mov r9.x, r2.z
  mov r9.y, r3.z
  mov r9.z, r4.z
  mov r9.w, r8.z
  add r7.xyzw, r7.xyzw, r9.xyzw
  mov r8.x, r2.w
  mov r8.y, r3.w
  mov r8.z, r4.w
  add r0.xyzw, r0.xyzw, r8.xyzw
  mul r2.xyzw, v7.wwww, cb2[r1.w + 0].xyzw
  mul r3.xyzw, v7.wwww, cb2[r1.w + 1].xyzw
  mul r4.xyzw, v7.wwww, cb2[r1.w + 2].xyzw
  mul r1.xyzw, v7.wwww, cb2[r1.w + 3].xyzw
  mov r8.x, r2.x
  mov r8.y, r3.x
  mov r8.z, r4.x
  mov r8.w, r1.x
  add r5.xyzw, r5.xyzw, r8.xyzw
  mov r8.x, r2.y
  mov r8.y, r3.y
  mov r8.z, r4.y
  mov r8.w, r1.y
  add r6.xyzw, r6.xyzw, r8.xyzw
  mov r8.x, r2.z
  mov r8.y, r3.z
  mov r8.z, r4.z
  mov r8.w, r1.z
  add r7.xyzw, r7.xyzw, r8.xyzw
  mov r1.x, r2.w
  mov r1.y, r3.w
  mov r1.z, r4.w
  add r0.xyzw, r0.xyzw, r1.xyzw
  mov r1.xyz, v0.xyzx
  mov r1.w, l(1.000000)
  dp4 r2.x, r1.xyzw, r5.xyzw
  dp4 r2.y, r1.xyzw, r6.xyzw
  dp4 r2.z, r1.xyzw, r7.xyzw
  dp4 r0.x, r1.xyzw, r0.xyzw
else 
  mov r2.xyz, v0.xyzx
  mov r0.x, v0.w
endif 
ishl r0.y, v8.x, l(2)
mul r1.xyzw, cb0[0].yyyy, cb3[r0.y + 1].xyzw
mad r1.xyzw, cb0[0].xxxx, cb3[r0.y + 0].xyzw, r1.xyzw
mad r1.xyzw, cb0[0].zzzz, cb3[r0.y + 2].xyzw, r1.xyzw
mad r1.xyzw, cb0[0].wwww, cb3[r0.y + 3].xyzw, r1.xyzw
mul r3.xyzw, cb0[1].yyyy, cb3[r0.y + 1].xyzw
mad r3.xyzw, cb0[1].xxxx, cb3[r0.y + 0].xyzw, r3.xyzw
mad r3.xyzw, cb0[1].zzzz, cb3[r0.y + 2].xyzw, r3.xyzw
mad r3.xyzw, cb0[1].wwww, cb3[r0.y + 3].xyzw, r3.xyzw
mul r4.xyzw, cb0[2].yyyy, cb3[r0.y + 1].xyzw
mad r4.xyzw, cb0[2].xxxx, cb3[r0.y + 0].xyzw, r4.xyzw
mad r4.xyzw, cb0[2].zzzz, cb3[r0.y + 2].xyzw, r4.xyzw
mad r4.xyzw, cb0[2].wwww, cb3[r0.y + 3].xyzw, r4.xyzw
mul r5.xyzw, cb0[3].yyyy, cb3[r0.y + 1].xyzw
mad r5.xyzw, cb0[3].xxxx, cb3[r0.y + 0].xyzw, r5.xyzw
mad r5.xyzw, cb0[3].zzzz, cb3[r0.y + 2].xyzw, r5.xyzw
mad r5.xyzw, cb0[3].wwww, cb3[r0.y + 3].xyzw, r5.xyzw
mul r3.xyzw, r2.yyyy, r3.xyzw
mad r1.xyzw, r2.xxxx, r1.xyzw, r3.xyzw
mad r1.xyzw, r2.zzzz, r4.xyzw, r1.xyzw
mad o0.xyzw, r0.xxxx, r5.xyzw, r1.xyzw
mov o1.x, v8.x
ret 
// Approximately 217 instruction slots used
