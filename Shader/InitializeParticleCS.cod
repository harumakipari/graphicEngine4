//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PARTICLE_SYSTEM_CONSTANTS
// {
//
//   float4 emissionPosition;           // Offset:    0 Size:    16
//   float2 emissionOffset;             // Offset:   16 Size:     8
//   float2 emissionSize;               // Offset:   24 Size:     8
//   float2 emisionConeAngle;           // Offset:   32 Size:     8
//   float2 emissionSpeed;              // Offset:   40 Size:     8
//   float2 emissionAngularSpeed;       // Offset:   48 Size:     8
//   float2 lifespan;                   // Offset:   56 Size:     8
//   float2 spawnDelay;                 // Offset:   64 Size:     8
//   float2 fadeDuration;               // Offset:   72 Size:     8 [unused]
//   float4 emissionStartColor;         // Offset:   80 Size:    16 [unused]
//   float4 emissionEndColor;           // Offset:   96 Size:    16 [unused]
//   float currentTime;                 // Offset:  112 Size:     4 [unused]
//   float deltaTime;                   // Offset:  116 Size:     4 [unused]
//   float _noiseScale;                 // Offset:  120 Size:     4 [unused]
//   float gravity;                     // Offset:  124 Size:     4 [unused]
//   uint2 spriteSheetGrid;             // Offset:  128 Size:     8
//   uint maxParticleCount;             // Offset:  136 Size:     4
//   float3 direction;                  // Offset:  144 Size:    12
//   float strength;                    // Offset:  156 Size:     4
//   row_major float4x4 nodeWorldTransform;// Offset:  160 Size:    64 [unused]
//   row_major float4x4 worldTransform; // Offset:  224 Size:    64 [unused]
//   float2 radius;                     // Offset:  288 Size:     8 [unused]
//   bool loop;                         // Offset:  296 Size:     4 [unused]
//   int type;                          // Offset:  300 Size:     4
//      = 0x00000000 
//   int isStatic;                      // Offset:  304 Size:     4 [unused]
//
// }
//
// Resource bind info for particleBuffer
// {
//
//   struct Particle
//   {
//       
//       int state;                     // Offset:    0
//       float4 color;                  // Offset:    4
//       float3 position;               // Offset:   20
//       float mass;                    // Offset:   32
//       float angle;                   // Offset:   36
//       float angularSpeed;            // Offset:   40
//       float3 velocity;               // Offset:   44
//       float lifespan;                // Offset:   56
//       float age;                     // Offset:   60
//       float2 size;                   // Offset:   64
//       uint chip;                     // Offset:   72
//
//   } $Element;                        // Offset:    0 Size:    76
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleBuffer                        UAV  struct         r/w             u0      1 
// PARTICLE_SYSTEM_CONSTANTS         cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB9[19], immediateIndexed
dcl_uav_structured u0, 76
dcl_input vThreadID.x
dcl_temps 9
dcl_thread_group 16, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- dtid.x; vThreadID.y <- dtid.y; vThreadID.z <- dtid.z
//
#line 8 "C:\Users\2240225\Desktop\graphicEngine4\Shader\InitializeParticleCS.hlsl"
mov r0.x, vThreadID.x  // r0.x <- id

#line 11
nop 
mov r0.x, r0.x

#line 237 "C:\Users\2240225\Desktop\graphicEngine4\Shader\Particle.hlsli"
nop 
utof r0.y, r0.x
utof r0.z, cb9[8].z
div r0.y, r0.y, r0.z
mul r0.y, r0.y, l(2.000000)
mul r0.y, r0.y, l(3.141593)

#line 93
sincos r0.y, null, r0.y
mul r0.y, r0.y, l(43758.546875)
frc r0.y, r0.y  // r0.y <- <Rand return value>

#line 237
mov r0.y, r0.y  // r0.y <- f0

#line 238
nop 
mul r0.z, r0.y, l(3.141593)

#line 93
sincos r0.z, null, r0.z
mul r0.z, r0.z, l(43758.546875)
frc r0.z, r0.z  // r0.z <- <Rand return value>

#line 238
mov r0.z, r0.z  // r0.z <- f1

#line 239
nop 
mul r0.w, r0.z, l(3.141593)

#line 93
sincos r0.w, null, r0.w
mul r0.w, r0.w, l(43758.546875)
frc r0.w, r0.w  // r0.w <- <Rand return value>

#line 239
mov r0.w, r0.w  // r0.w <- f2

#line 240
nop 
mul r1.x, r0.w, l(3.141593)

#line 93
sincos r1.x, null, r1.x
mul r1.x, r1.x, l(43758.546875)
frc r1.x, r1.x  // r1.x <- <Rand return value>

#line 240
mov r1.x, r1.x  // r1.x <- f3

#line 242
itof r2.y, l(0)  // r2.y <- offset.y

#line 243
mov r1.y, -cb9[1].x
add r1.y, r1.y, cb9[1].y
mul r1.y, r0.y, r1.y
add r1.y, r1.y, cb9[1].x  // r1.y <- radius

#line 248
mul r1.z, r1.x, l(2.000000)
mul r1.z, r1.z, l(3.141593)
sincos null, r1.z, r1.z
mul r2.x, r1.z, r1.y  // r2.x <- offset.x

#line 249
mul r1.z, r1.x, l(2.000000)
mul r1.z, r1.z, l(3.141593)
sincos r1.z, null, r1.z
mul r2.z, r1.z, r1.y  // r2.z <- offset.z

#line 251
add r1.yzw, r2.xxyz, cb9[0].xxyz  // r1.y <- p.position.x; r1.z <- p.position.y; r1.w <- p.position.z

#line 256
mul r2.x, r0.y, l(6.283185)  // r2.x <- phi

#line 257
max r2.y, r0.w, cb9[2].x
min r2.y, r2.y, cb9[2].y  // r2.y <- theta

#line 259
sincos r2.z, null, r2.y  // r2.z <- sinTheta

#line 260
sincos null, r3.y, r2.y  // r3.y <- cosTheta

#line 261
sincos r2.y, null, r2.x  // r2.y <- sinPhi

#line 262
sincos null, r2.x, r2.x  // r2.x <- cosPhi

#line 271
mul r3.x, r2.x, r2.z  // r3.x <- localDir.x

#line 272
mov r3.y, r3.y  // r3.y <- localDir.y

#line 273
mul r3.z, r2.y, r2.z  // r3.z <- localDir.z

#line 277
mov r2.x, cb9[18].w
switch r2.x

#line 279
  case l(0)

#line 281
  dp3 r2.w, cb9[9].xyzx, cb9[9].xyzx
  lt r2.w, r2.w, l(0.000001)
  if_nz r2.w

#line 283
    itof r2.xyz, l(0, 0, 0, 0)  // r2.x <- worldDir.x; r2.y <- worldDir.y; r2.z <- worldDir.z

#line 284
  else   // Prior locations: r2.z <- sinTheta; r2.y <- sinPhi

#line 288
    dp3 r2.w, cb9[9].xyzx, cb9[9].xyzx
    rsq r2.w, r2.w
    mul r4.xyz, r2.wwww, cb9[9].zxyz  // r4.x <- dir.z; r4.y <- dir.x; r4.z <- dir.y

#line 289
    mov r2.w, -r4.z
    max r2.w, r2.w, r4.z
    lt r2.w, r2.w, l(0.999000)
    itof r5.xyz, l(0, 1, 0, 0)
    itof r6.xyz, l(1, 0, 0, 0)
    movc r5.xyz, r2.wwww, r5.xyzx, r6.xyzx  // r5.x <- up.x; r5.y <- up.y; r5.z <- up.z

#line 290
    mul r6.xyz, r4.yzxy, r5.zxyz
    mul r5.xyz, r4.xyzx, r5.xyzx
    mov r5.xyz, -r5.xyzx
    add r5.xyz, r5.xyzx, r6.xyzx
    dp3 r2.w, r5.xyzx, r5.xyzx
    rsq r2.w, r2.w
    mul r5.xyz, r2.wwww, r5.xyzx  // r5.x <- right.y; r5.y <- right.z; r5.z <- right.x

#line 291
    mul r6.xyz, r4.zxyz, r5.yzxy
    mul r7.xyz, r4.xyzx, r5.xyzx
    mov r7.xyz, -r7.xyzx
    add r6.xyz, r6.xyzx, r7.xyzx
    dp3 r2.w, r6.xyzx, r6.xyzx
    rsq r2.w, r2.w
    mul r6.xyz, r2.wwww, r6.xyzx  // r6.x <- forward.x; r6.y <- forward.y; r6.z <- forward.z

#line 292
    mov r7.x, r5.z  // r7.x <- rotMatrix._m00
    mov r7.y, r4.y  // r7.y <- rotMatrix._m10
    mov r7.z, r6.x  // r7.z <- rotMatrix._m20
    mov r8.x, r5.x  // r8.x <- rotMatrix._m01
    mov r8.y, r4.z  // r8.y <- rotMatrix._m11
    mov r8.z, r6.y  // r8.z <- rotMatrix._m21
    mov r6.x, r5.y  // r6.x <- rotMatrix._m02
    mov r6.y, r4.x  // r6.y <- rotMatrix._m12
    mov r6.z, r6.z  // r6.z <- rotMatrix._m22

#line 295
    dp3 r2.x, r3.xyzx, r7.xyzx  // r2.x <- worldDir.x
    dp3 r2.y, r3.xyzx, r8.xyzx  // r2.y <- worldDir.y
    dp3 r2.z, r3.xyzx, r6.xyzx  // r2.z <- worldDir.z

#line 296
  endif 

#line 297
  break   // r2.z <- sinTheta; r2.y <- sinPhi

#line 299
  case l(1)

#line 301
  mul r3.xyz, r3.xyzx, cb9[9].wwww
  add r1.yzw, r1.yyzw, r3.xxyz

#line 302
  mov r3.xyz, -r1.yzwy
  add r2.xyz, r3.xyzx, cb9[0].xyzx  // r2.x <- worldDir.x; r2.y <- worldDir.y; r2.z <- worldDir.z

#line 303
  break   // r2.z <- sinTheta; r3.y <- cosTheta; r2.y <- sinPhi; r3.x <- localDir.x; r3.y <- localDir.y; r3.z <- localDir.z

#line 305
  default 
  break 
endswitch   // r2.x <- worldDir.x; r2.y <- worldDir.y; r2.z <- worldDir.z

#line 307
mov r2.w, -cb9[2].z
add r2.w, r2.w, cb9[2].w
mul r2.w, r0.w, r2.w
add r2.w, r2.w, cb9[2].z
mul r2.xyz, r2.wwww, r2.xyzx  // r2.x <- p.velocity.x; r2.y <- p.velocity.y; r2.z <- p.velocity.z

#line 309
mov r3.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // r3.x <- p.color.x; r3.y <- p.color.y; r3.z <- p.color.z; r3.w <- p.color.w

#line 311
mov r2.w, l(1.000000)  // r2.w <- p.mass

#line 314
mul r4.x, r0.y, l(3.141593)  // r4.x <- p.angle

#line 315
mov r4.y, -cb9[3].x
add r4.y, r4.y, cb9[3].y
mul r4.y, r1.x, r4.y
add r4.y, r4.y, cb9[3].x  // r4.y <- p.angularSpeed

#line 321
mov r4.z, -cb9[3].z
add r4.z, r4.z, cb9[3].w
mul r4.z, r0.y, r4.z
add r4.z, r4.z, cb9[3].z  // r4.z <- p.lifespan

#line 322
mov r4.w, -cb9[4].x
add r4.w, r4.w, cb9[4].y
mul r0.y, r0.y, r4.w
add r0.y, r0.y, cb9[4].x
mov r0.y, -r0.y  // r0.y <- p.age

#line 323
mov r4.w, l(0)  // r4.w <- p.state

#line 324
mul r0.z, r0.z, cb9[1].z  // r0.z <- p.size.x

#line 325
mul r0.w, r0.w, cb9[1].w  // r0.w <- p.size.y

#line 327
imul null, r5.x, cb9[8].y, cb9[8].x  // r5.x <- count

#line 328
itof r5.x, r5.x
mul r1.x, r1.x, r5.x
ftou r1.x, r1.x  // r1.x <- p.chip

#line 11 "C:\Users\2240225\Desktop\graphicEngine4\Shader\InitializeParticleCS.hlsl"
mov r4.w, r4.w  // r4.w <- p.state
mov r3.xyz, r3.xyzx  // r3.x <- p.color.x; r3.y <- p.color.y; r3.z <- p.color.z
mov r3.w, r3.w  // r3.w <- p.color.w
mov r1.yzw, r1.yyzw  // r1.y <- p.position.x; r1.z <- p.position.y; r1.w <- p.position.z
mov r2.w, r2.w  // r2.w <- p.mass
mov r4.x, r4.x  // r4.x <- p.angle
mov r4.y, r4.y  // r4.y <- p.angularSpeed
mov r2.x, r2.x  // r2.x <- p.velocity.x
mov r2.yz, r2.yyzy  // r2.y <- p.velocity.y; r2.z <- p.velocity.z
mov r4.z, r4.z  // r4.z <- p.lifespan
mov r0.y, r0.y  // r0.y <- p.age
mov r0.z, r0.z  // r0.z <- p.size.x
mov r0.w, r0.w  // r0.w <- p.size.y
mov r1.x, r1.x  // r1.x <- p.chip

#line 13
store_structured u0.x, r0.x, l(0), r4.w
store_structured u0.x, r0.x, l(4), r3.x
store_structured u0.x, r0.x, l(8), r3.y
store_structured u0.x, r0.x, l(12), r3.z
store_structured u0.x, r0.x, l(16), r3.w
store_structured u0.x, r0.x, l(20), r1.y
store_structured u0.x, r0.x, l(24), r1.z
store_structured u0.x, r0.x, l(28), r1.w
store_structured u0.x, r0.x, l(32), r2.w
store_structured u0.x, r0.x, l(36), r4.x
store_structured u0.x, r0.x, l(40), r4.y
store_structured u0.x, r0.x, l(44), r2.x
store_structured u0.x, r0.x, l(48), r2.y
store_structured u0.x, r0.x, l(52), r2.z
store_structured u0.x, r0.x, l(56), r4.z
store_structured u0.x, r0.x, l(60), r0.y
store_structured u0.x, r0.x, l(64), r0.z
store_structured u0.x, r0.x, l(68), r0.w
store_structured u0.x, r0.x, l(72), r1.x

#line 14
ret 
// Approximately 171 instruction slots used
