//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PARTICLE_SYSTEM_CONSTANTS
// {
//
//   float4 emissionPosition;           // Offset:    0 Size:    16
//   float2 emissionOffset;             // Offset:   16 Size:     8
//   float2 emissionSize;               // Offset:   24 Size:     8
//   float2 emisionConeAngle;           // Offset:   32 Size:     8
//   float2 emissionSpeed;              // Offset:   40 Size:     8
//   float2 emissionAngularSpeed;       // Offset:   48 Size:     8
//   float2 lifespan;                   // Offset:   56 Size:     8
//   float2 spawnDelay;                 // Offset:   64 Size:     8
//   float2 fadeDuration;               // Offset:   72 Size:     8 [unused]
//   float4 emissionStartColor;         // Offset:   80 Size:    16 [unused]
//   float4 emissionEndColor;           // Offset:   96 Size:    16 [unused]
//   float currentTime;                 // Offset:  112 Size:     4 [unused]
//   float deltaTime;                   // Offset:  116 Size:     4 [unused]
//   float _noiseScale;                 // Offset:  120 Size:     4 [unused]
//   float gravity;                     // Offset:  124 Size:     4 [unused]
//   uint2 spriteSheetGrid;             // Offset:  128 Size:     8
//   uint maxParticleCount;             // Offset:  136 Size:     4
//   float3 direction;                  // Offset:  144 Size:    12
//   float strength;                    // Offset:  156 Size:     4
//   row_major float4x4 nodeWorldTransform;// Offset:  160 Size:    64 [unused]
//   row_major float4x4 worldTransform; // Offset:  224 Size:    64 [unused]
//   float2 radius;                     // Offset:  288 Size:     8 [unused]
//   bool loop;                         // Offset:  296 Size:     4 [unused]
//   int type;                          // Offset:  300 Size:     4
//      = 0x00000000 
//   int isStatic;                      // Offset:  304 Size:     4 [unused]
//
// }
//
// Resource bind info for particleBuffer
// {
//
//   struct Particle
//   {
//       
//       int state;                     // Offset:    0
//       float4 color;                  // Offset:    4
//       float3 position;               // Offset:   20
//       float mass;                    // Offset:   32
//       float angle;                   // Offset:   36
//       float angularSpeed;            // Offset:   40
//       float3 velocity;               // Offset:   44
//       float lifespan;                // Offset:   56
//       float age;                     // Offset:   60
//       float2 size;                   // Offset:   64
//       uint chip;                     // Offset:   72
//
//   } $Element;                        // Offset:    0 Size:    76
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleBuffer                        UAV  struct         r/w             u0      1 
// PARTICLE_SYSTEM_CONSTANTS         cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB9[19], immediateIndexed
dcl_uav_structured u0, 76
dcl_input vThreadID.x
dcl_temps 8
dcl_thread_group 16, 1, 1
utof r0.x, vThreadID.x
utof r0.y, cb9[8].z
div r0.x, r0.x, r0.y
mul r0.x, r0.x, l(6.283185)
sincos r0.x, null, r0.x
mul r0.x, r0.x, l(43758.546875)
frc r0.x, r0.x
mul r1.xy, r0.xxxx, l(6.283185, 3.141593, 0.000000, 0.000000)
sincos r0.yz, null, r1.yyxy
mul r0.y, r0.y, l(43758.546875)
frc r0.y, r0.y
mul r0.w, r0.y, l(3.141593)
sincos r0.w, null, r0.w
mul r0.w, r0.w, l(43758.546875)
frc r0.w, r0.w
mul r2.x, r0.w, l(3.141593)
sincos r2.x, null, r2.x
mul r2.x, r2.x, l(43758.546875)
frc r2.x, r2.x
add r2.y, -cb9[1].x, cb9[1].y
mad r2.y, r0.x, r2.y, cb9[1].x
mul r2.z, r2.x, l(6.283185)
sincos r3.x, r4.x, r2.z
mul r4.x, r2.y, r4.x
mul r4.z, r2.y, r3.x
mov r4.y, l(0)
add r3.yzw, r4.xxyz, cb9[0].xxyz
max r2.y, r0.w, cb9[2].x
min r2.y, r2.y, cb9[2].y
sincos r4.x, r5.x, r2.y
sincos null, r2.y, r1.x
mul r6.x, r2.y, r4.x
mul r6.z, r0.z, r4.x
switch cb9[18].w
  case l(0)
  dp3 r0.z, cb9[9].xyzx, cb9[9].xyzx
  lt r4.x, r0.z, l(0.000001)
  rsq r0.z, r0.z
  mul r4.yzw, r0.zzzz, cb9[9].xxyz
  lt r0.z, |r4.z|, l(0.999000)
  movc r5.yzw, r0.zzzz, l(0,0,0,1.000000), l(0,0,1.000000,0)
  mul r7.xyz, r4.zwyz, r5.yzwy
  mad r5.yzw, r5.wwyz, r4.wwyz, -r7.xxyz
  dp3 r0.z, r5.yzwy, r5.yzwy
  rsq r0.z, r0.z
  mul r5.yzw, r0.zzzz, r5.yyzw
  mul r7.xyz, r4.wyzw, r5.zwyz
  mad r7.xyz, r4.zwyz, r5.wyzw, -r7.xyzx
  dp3 r0.z, r7.xyzx, r7.xyzx
  rsq r0.z, r0.z
  mul r7.xyz, r0.zzzz, r7.xyzx
  mul r4.yzw, r4.yyzw, r5.xxxx
  mad r4.yzw, r6.xxxx, r5.yyzw, r4.yyzw
  mad r4.yzw, r6.zzzz, r7.xxyz, r4.yyzw
  movc r2.yzw, r4.xxxx, l(0,0,0,0), r4.yyzw
  break 
  case l(1)
  mov r6.y, r5.x
  mad r3.yzw, r6.xxyz, cb9[9].wwww, r3.yyzw
  add r2.yzw, -r3.yyzw, cb9[0].xxyz
  break 
  default 
  break 
endswitch 
add r0.z, -cb9[2].z, cb9[2].w
mad r0.z, r0.w, r0.z, cb9[2].z
mul r2.yzw, r0.zzzz, r2.yyzw
add r4.xy, -cb9[3].xzxx, cb9[3].ywyy
mad r1.z, r2.x, r4.x, cb9[3].x
mad r4.z, r0.x, r4.y, cb9[3].z
add r0.z, -cb9[4].x, cb9[4].y
mad r0.x, r0.x, r0.z, cb9[4].x
mov r4.w, -r0.x
mul r0.x, r0.y, cb9[1].z
mul r0.y, r0.w, cb9[1].w
imul null, r0.w, cb9[8].y, cb9[8].x
itof r0.w, r0.w
mul r0.w, r0.w, r2.x
ftou r0.z, r0.w
store_structured u0.xyzw, vThreadID.x, l(0), l(0,1.000000,1.000000,1.000000)
mov r3.x, l(1.000000)
store_structured u0.xyzw, vThreadID.x, l(16), r3.xyzw
mov r1.x, l(1.000000)
mov r1.w, r2.y
store_structured u0.xyzw, vThreadID.x, l(32), r1.xyzw
mov r4.xy, r2.zwzz
store_structured u0.xyzw, vThreadID.x, l(48), r4.xyzw
store_structured u0.xyz, vThreadID.x, l(64), r0.xyzx
ret 
// Approximately 89 instruction slots used
