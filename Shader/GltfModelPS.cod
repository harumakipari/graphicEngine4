//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64 [unused]
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4
//   bool hasTangent;                   // Offset:   84 Size:     4
//   int skin;                          // Offset:   88 Size:     4 [unused]
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64 [unused]
//
// }
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64 [unused]
//   float4 cameraPositon;              // Offset:   64 Size:    16
//   row_major float4x4 view;           // Offset:   80 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset:  144 Size:    64 [unused]
//   row_major float4x4 inverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 inverseViewProjection;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 invView;        // Offset:  336 Size:    64 [unused]
//
// }
//
// cbuffer LIGHT_CONSTANT_BUFFER
// {
//
//   float4 lightDirection;             // Offset:    0 Size:    16
//   float4 colorLight;                 // Offset:   16 Size:    16
//   float iblIntensity;                // Offset:   32 Size:     4
//   int directionalLightEnable;        // Offset:   36 Size:     4
//   int pointLightEnable;              // Offset:   40 Size:     4
//   int pointLightCount;               // Offset:   44 Size:     4
//   
//   struct PointLights
//   {
//       
//       float4 position;               // Offset:   48
//       float4 color;                  // Offset:   64
//       float range;                   // Offset:   80
//       float3 pads;                   // Offset:   84
//
//   } pointLights[8];                  // Offset:   48 Size:   384
//
// }
//
// Resource bind info for materials
// {
//
//   struct MaterialConstants
//   {
//       
//       float3 emissiveFactor;         // Offset:    0
//       int alphaMode;                 // Offset:   12
//       float alphaCutoff;             // Offset:   16
//       bool doubleSided;              // Offset:   20
//       
//       struct PbrMetallicRoughness
//       {
//           
//           float4 baseColorFactor;    // Offset:   24
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   40
//               int texcoord;          // Offset:   44
//
//           } basecolorTexture;        // Offset:   40
//           float metallicFactor;      // Offset:   48
//           float roughnessFactor;     // Offset:   52
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   56
//               int texcoord;          // Offset:   60
//
//           } metallicRoughnessTexture;// Offset:   56
//
//       } pbrMetallicRoughness;        // Offset:   24
//       
//       struct NormalTextureInfo
//       {
//           
//           int index;                 // Offset:   64
//           int texcoord;              // Offset:   68
//           float scale;               // Offset:   72
//
//       } normalTexture;               // Offset:   64
//       
//       struct OcclusionTextureInfo
//       {
//           
//           int index;                 // Offset:   76
//           int texcoord;              // Offset:   80
//           float strength;            // Offset:   84
//
//       } occlusionTexture;            // Offset:   76
//       
//       struct TextureInfo
//       {
//           
//           int index;                 // Offset:   88
//           int texcoord;              // Offset:   92
//
//       } emissiveTexture;             // Offset:   88
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerStates[1]                  sampler      NA          NA             s1      1 
// samplerStates[2]                  sampler      NA          NA             s2      1 
// materials                         texture  struct         r/o             t0      1 
// materialTextures[0]               texture  float4          2d             t1      1 
// materialTextures[1]               texture  float4          2d             t2      1 
// materialTextures[2]               texture  float4          2d             t3      1 
// materialTextures[3]               texture  float4          2d             t4      1 
// materialTextures[4]               texture  float4          2d             t5      1 
// diffuseIem                        texture  float4        cube            t33      1 
// specularPmrem                     texture  float4        cube            t34      1 
// lutGgx                            texture  float4          2d            t35      1 
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb4      1 
// LIGHT_CONSTANT_BUFFER             cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy  
// SV_IsFrontFace           0   x           5    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_constantbuffer CB4[5], immediateIndexed
dcl_constantbuffer CB11[27], dynamicIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_structured t0, 96
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecube (float,float,float,float) t33
dcl_resource_texturecube (float,float,float,float) t34
dcl_resource_texture2d (float,float,float,float) t35
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xy
dcl_input_ps_sgv constant v5.x, is_front_face
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 17
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r0.xyzw, cb0[5].x, l(0), t0.xyzw
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r1.x, cb0[5].x, l(16), t0.xxxx
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r2.xyzw, cb0[5].x, l(24), t0.xyzw
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r1.y, cb0[5].x, l(40), t0.xxxx
ilt r1.y, l(-1), r1.y
if_nz r1.y
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s2
  log r1.yzw, r3.xxyz
  mul r1.yzw, r1.yyzw, l(0.000000, 2.200000, 2.200000, 2.200000)
  exp r3.xyz, r1.yzwy
  mul r2.xyzw, r2.xyzw, r3.xyzw
endif 
movc r3.w, r0.w, r2.w, l(1.000000)
lt r0.w, r3.w, r1.x
discard_nz r0.w
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r1.xyz, cb0[5].x, l(48), t0.xyzx
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r0.w, cb0[5].x, l(64), t0.xxxx
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r4.xy, cb0[5].x, l(72), t0.xyxx
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r5.xy, cb0[5].x, l(84), t0.xyxx
ilt r1.w, l(-1), r5.y
if_nz r1.w
  sample_indexable(texture2d)(float,float,float,float) r5.yzw, v4.xyxx, t4.wxyz, s2
  log r5.yzw, r5.yyzw
  mul r5.yzw, r5.yyzw, l(0.000000, 2.200000, 2.200000, 2.200000)
  exp r5.yzw, r5.yyzw
  mul r0.xyz, r0.xyzx, r5.yzwy
endif 
ilt r1.z, l(-1), r1.z
if_nz r1.z
  sample_indexable(texture2d)(float,float,float,float) r1.zw, v4.xyxx, t2.xwyz, s1
  mul r1.xy, r1.wzww, r1.xyxx
endif 
ilt r1.z, l(-1), r4.y
if_nz r1.z
  sample_indexable(texture2d)(float,float,float,float) r1.z, v4.xyxx, t5.yzxw, s1
else 
  mov r1.z, l(1.000000)
endif 
add r5.yzw, r2.xxyz, l(0.000000, -0.040000, -0.040000, -0.040000)
mad r5.yzw, r1.xxxx, r5.yyzw, l(0.000000, 0.040000, 0.040000, 0.040000)
mul r1.w, r1.y, r1.y
mad r6.xyz, r1.xxxx, -r2.xyzx, r2.xyzx
add r7.xyz, -v1.xyzx, cb4[4].xyzx
dp3 r4.y, r7.xyzx, r7.xyzx
rsq r4.y, r4.y
mul r8.xyz, r4.yyyy, r7.xyzx
dp3 r4.w, v2.xyzx, v2.xyzx
rsq r4.w, r4.w
mul r9.xyz, r4.wwww, v2.zxyz
movc r10.xyz, v5.xxxx, r9.yzxy, -r9.yzxy
ilt r0.w, l(-1), r0.w
if_nz r0.w
  dp3 r0.w, v3.xyzx, v3.xyzx
  rsq r0.w, r0.w
  mul r11.xyz, r0.wwww, v3.xyzx
  movc r11.xyz, cb0[5].yyyy, r11.xyzx, l(1.000000,0,0,0)
  movc r0.w, cb0[5].y, v3.w, l(1.000000)
  dp3 r4.w, r9.yzxy, r11.xyzx
  mad r11.xyz, -r9.yzxy, r4.wwww, r11.xyzx
  dp3 r4.w, r11.xyzx, r11.xyzx
  rsq r4.w, r4.w
  mul r11.xyz, r4.wwww, r11.xyzx
  mul r12.xyz, r9.xyzx, r11.yzxy
  mad r9.xyz, r9.zxyz, r11.zxyz, -r12.xyzx
  mul r9.xyz, r0.wwww, r9.xyzx
  dp3 r0.w, r9.xyzx, r9.xyzx
  rsq r0.w, r0.w
  mul r9.xyz, r0.wwww, r9.xyzx
  movc r11.xyz, v5.xxxx, r11.xyzx, -r11.xyzx
  movc r9.xyz, v5.xxxx, r9.xyzx, -r9.xyzx
  sample_indexable(texture2d)(float,float,float,float) r12.xyz, v4.xyxx, t3.xyzw, s1
  mad r12.xyz, r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mov r4.z, l(1.000000)
  mul r4.xzw, r4.xxxz, r12.xxyz
  dp3 r0.w, r4.xzwx, r4.xzwx
  rsq r0.w, r0.w
  mul r4.xzw, r0.wwww, r4.xxzw
  mul r9.xyz, r9.xyzx, r4.zzzz
  mad r9.xyz, r4.xxxx, r11.xyzx, r9.xyzx
  mad r4.xzw, r4.wwww, r10.xxyz, r9.xxyz
  dp3 r0.w, r4.xzwx, r4.xzwx
  rsq r0.w, r0.w
  mul r10.xyz, r0.wwww, r4.xzwx
endif 
dp3 r0.w, -cb11[0].xyzx, -cb11[0].xyzx
rsq r0.w, r0.w
mul r4.xzw, r0.wwww, -cb11[0].xxyz
dp3 r0.w, r10.xyzx, r4.xzwx
mad r0.w, r0.w, l(0.500000), l(0.500000)
max r0.w, r0.w, l(0.000000)
if_nz cb11[2].z
  dp3 r6.w, r10.xyzx, r8.xyzx
  max r6.w, r6.w, l(0.000000)
  lt r7.w, l(0.000000), r6.w
  add r9.xyz, -r5.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r11.xyz, r6.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000)
  mul r8.w, r1.w, r1.w
  mul r9.w, r6.w, r6.w
  mad r10.w, -r1.w, r1.w, l(1.000000)
  mad r9.w, r9.w, r10.w, r8.w
  sqrt r9.w, r9.w
  mul r11.w, r0.w, r0.w
  mad r10.w, r11.w, r10.w, r8.w
  sqrt r10.w, r10.w
  mul r6.w, r6.w, r10.w
  mad r6.w, r0.w, r9.w, r6.w
  lt r9.w, l(0.000000), r6.w
  div r6.w, l(0.500000), r6.w
  and r6.w, r6.w, r9.w
  mad r9.w, r1.w, r1.w, l(-1.000000)
  mov r12.xyz, l(0,0,0,0)
  mov r13.xyz, l(0,0,0,0)
  mov r10.w, l(0)
  loop 
    ige r11.w, r10.w, cb11[2].w
    breakc_nz r11.w
    imul null, r11.w, r10.w, l(3)
    add r14.xyz, v1.xyzx, -cb11[r11.w + 3].xyzx
    dp3 r12.w, r14.xyzx, r14.xyzx
    sqrt r12.w, r12.w
    ge r13.w, r12.w, cb11[r11.w + 5].x
    if_nz r13.w
      iadd r13.w, r10.w, l(1)
      mov r10.w, r13.w
      continue 
    endif 
    if_nz r7.w
      div r14.xyz, r14.xyzx, r12.wwww
      mad r15.xyz, r7.xyzx, r4.yyyy, r14.xyzx
      dp3 r12.w, r15.xyzx, r15.xyzx
      rsq r12.w, r12.w
      mul r15.xyz, r12.wwww, r15.xyzx
      mul r16.xyz, cb11[r11.w + 4].wwww, cb11[r11.w + 4].xyzx
      dp3 r11.w, r10.xyzx, r15.xyzx
      max r11.w, r11.w, l(0.000000)
      dp3 r12.w, r15.xyzx, r8.xyzx
      max r12.w, r12.w, l(0.000000)
      dp3 r13.w, r10.xyzx, r14.xyzx
      mad r13.w, r13.w, l(0.500000), l(0.500000)
      max r13.w, r13.w, l(0.000000)
      mul r14.xyz, r13.wwww, r16.xyzx
      add r12.w, -r12.w, l(1.000000)
      max r12.w, r12.w, l(0.000000)
      mul r13.w, r12.w, r12.w
      mul r13.w, r13.w, r13.w
      mul r12.w, r12.w, r13.w
      mad r15.xyz, r9.xyzx, r12.wwww, r5.yzwy
      add r16.xyz, -r15.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r16.xyz, r11.xyzx, r16.xyzx
      mad r12.xyz, r14.xyzx, r16.xyzx, r12.xyzx
      mul r11.w, r11.w, r11.w
      mad r11.w, r11.w, r9.w, l(1.000000)
      mul r11.w, r11.w, r11.w
      mul r11.w, r11.w, l(3.141593)
      div r11.w, r8.w, r11.w
      mul r15.xyz, r6.wwww, r15.xyzx
      mul r15.xyz, r11.wwww, r15.xyzx
      mad r13.xyz, r14.xyzx, r15.xyzx, r13.xyzx
    endif 
    iadd r10.w, r10.w, l(1)
  endloop 
else 
  mov r12.xyz, l(0,0,0,0)
  mov r13.xyz, l(0,0,0,0)
endif 
if_nz cb11[2].y
  dp3 r6.w, r10.xyzx, r8.xyzx
  max r6.w, r6.w, l(0.000000)
  lt r7.w, l(0.000000), r0.w
  lt r8.w, l(0.000000), r6.w
  or r7.w, r7.w, r8.w
  if_nz r7.w
    mul r9.xyz, cb11[1].wwww, cb11[1].xyzx
    mad r4.xyz, r7.xyzx, r4.yyyy, r4.xzwx
    dp3 r4.w, r4.xyzx, r4.xyzx
    rsq r4.w, r4.w
    mul r4.xyz, r4.wwww, r4.xyzx
    dp3 r4.w, r10.xyzx, r4.xyzx
    dp3 r4.x, r4.xyzx, r8.xyzx
    max r4.xw, r4.xxxw, l(0.000000, 0.000000, 0.000000, 0.000000)
    mul r7.xyz, r0.wwww, r9.xyzx
    add r9.xyz, -r5.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r4.x, -r4.x, l(1.000000)
    max r4.x, r4.x, l(0.000000)
    mul r4.yw, r4.xxxw, r4.xxxw
    mul r4.y, r4.y, r4.y
    mul r4.x, r4.y, r4.x
    mad r4.xyz, r9.xyzx, r4.xxxx, r5.yzwy
    add r9.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r9.xyz, r6.xyzx, r9.xyzx
    mul r9.xyz, r7.xyzx, r9.xyzx
    mul r9.xyz, r9.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000)
    mul r7.w, r1.w, r1.w
    mul r8.w, r6.w, r6.w
    mad r9.w, -r1.w, r1.w, l(1.000000)
    mad r8.w, r8.w, r9.w, r7.w
    sqrt r8.w, r8.w
    mul r10.w, r0.w, r0.w
    mad r9.w, r10.w, r9.w, r7.w
    sqrt r9.w, r9.w
    mul r6.w, r6.w, r9.w
    mad r0.w, r0.w, r8.w, r6.w
    lt r6.w, l(0.000000), r0.w
    div r0.w, l(0.500000), r0.w
    and r0.w, r0.w, r6.w
    mad r1.w, r1.w, r1.w, l(-1.000000)
    mad r1.w, r4.w, r1.w, l(1.000000)
    mul r1.w, r1.w, r1.w
    mul r1.w, r1.w, l(3.141593)
    div r1.w, r7.w, r1.w
    mul r4.xyz, r0.wwww, r4.xyzx
    mul r4.xyz, r1.wwww, r4.xyzx
    mul r4.xyz, r4.xyzx, r7.xyzx
  else 
    mov r9.xyz, l(0,0,0,0)
    mov r4.xyz, l(0,0,0,0)
  endif 
else 
  mov r9.xyz, l(0,0,0,0)
  mov r4.xyz, l(0,0,0,0)
endif 
dp3_sat r1.x, r10.xyzx, r8.xyzx
mov_sat r7.xy, r1.xyxx
sample_indexable(texture2d)(float,float,float,float) r7.xy, r7.xyxx, t35.xyzw, s1
sample_indexable(texturecube)(float,float,float,float) r11.xyz, r10.xyzx, t33.xyzw, s1
add r1.xw, -r1.yyyx, l(1.000000, 0.000000, 0.000000, 1.000000)
max r14.xyz, r5.yzwy, r1.xxxx
add r14.xyz, -r5.yzwy, r14.xyzx
mul r0.w, r1.w, r1.w
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.w
mad r14.xyz, r14.xyzx, r0.wwww, r5.yzwy
mad r14.xyz, r14.xyzx, r7.xxxx, r7.yyyy
add r0.w, r7.y, r7.x
add r0.w, -r0.w, l(1.000000)
add r7.xyz, -r5.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r5.yzw, r7.xxyz, l(0.000000, 0.047619, 0.047619, 0.047619), r5.yyzw
mul r7.xyz, r14.xyzx, r0.wwww
mul r7.xyz, r5.yzwy, r7.xyzx
mad r5.yzw, -r5.yyzw, r0.wwww, l(0.000000, 1.000000, 1.000000, 1.000000)
div r5.yzw, r7.xxyz, r5.yyzw
add r7.xyz, -r14.xyzx, r5.yzwy
add r7.xyz, r7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r5.yzw, r6.xxyz, r7.xxyz, r5.yyzw
mul r5.yzw, r11.xxyz, r5.yyzw
dp3 r0.w, -r8.xyzx, r10.xyzx
add r0.w, r0.w, r0.w
mad r6.xyz, r10.xyzx, -r0.wwww, -r8.xyzx
dp3 r0.w, r6.xyzx, r6.xyzx
rsq r0.w, r0.w
mul r6.xyz, r0.wwww, r6.xyzx
resinfo_indexable(texturecube)(float,float,float,float)_uint r0.w, l(0), t34.xyzw
iadd r0.w, r0.w, l(-1)
utof r0.w, r0.w
mul r0.w, r0.w, r1.y
sample_l_indexable(texturecube)(float,float,float,float) r1.xyw, r6.xyzx, t34.xywz, s1, r0.w
mul r1.xyw, r14.xyxz, r1.xyxw
add r6.xyz, r12.xyzx, r9.xyzx
mad r5.yzw, r5.yyzw, cb11[2].xxxx, r6.xxyz
add r4.xyz, r13.xyzx, r4.xyzx
mad r1.xyw, r1.xyxw, cb11[2].xxxx, r4.xyxz
mad r4.xyz, r5.yzwy, r1.zzzz, -r5.yzwy
mad r4.xyz, r5.xxxx, r4.xyzx, r5.yzwy
mad r5.yzw, r1.xxyw, r1.zzzz, -r1.xxyw
mad r1.xyz, r5.xxxx, r5.yzwy, r1.xywx
add r1.xyz, r1.xyzx, r4.xyzx
add r3.xyz, r0.xyzx, r1.xyzx
mov r2.w, r3.w
mul o0.xyzw, r2.xyzw, r3.xyzw
mov o1.xyzw, v1.xyzw
mov o2.xyz, r10.xyzx
mov o2.w, l(0)
ret 
// Approximately 273 instruction slots used
