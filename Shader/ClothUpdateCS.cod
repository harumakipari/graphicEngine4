//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64 [unused]
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4 [unused]
//   bool hasTangent;                   // Offset:   84 Size:     4 [unused]
//   int skin;                          // Offset:   88 Size:     4 [unused]
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64
//
// }
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   bool enableSSAO;                   // Offset:    0 Size:     4 [unused]
//   float reflectionIntensity;         // Offset:    4 Size:     4 [unused]
//   float time;                        // Offset:    8 Size:     4 [unused]
//   bool enableCascadedShadowMaps;     // Offset:   12 Size:     4 [unused]
//   bool enableSSR;                    // Offset:   16 Size:     4 [unused]
//   bool enableFog;                    // Offset:   20 Size:     4 [unused]
//   bool enableBloom;                  // Offset:   24 Size:     4 [unused]
//   float deltaTime;                   // Offset:   28 Size:     4
//   float gravity;                     // Offset:   32 Size:     4 [unused]
//   float3 aaa;                        // Offset:   36 Size:    12 [unused]
//
// }
//
// cbuffer CLOTH_SIMULATE_CBUFFER
// {
//
//   float g;                           // Offset:    0 Size:     4 [unused]
//   uint vertexCount;                  // Offset:    4 Size:     4
//   float pading[2];                   // Offset:   16 Size:    20 [unused]
//
// }
//
// cbuffer SPHERE_CBUFFER
// {
//
//   float3 worldPos;                   // Offset:    0 Size:    12
//   float radius;                      // Offset:   12 Size:     4
//   row_major float4x4 sphereWorld;    // Offset:   16 Size:    64 [unused]
//   row_major float4x4 sphereInvWorld; // Offset:   80 Size:    64 [unused]
//
// }
//
// cbuffer PLANE_CBUFFER
// {
//
//   struct
//   {
//       
//       float3 normal;                 // Offset:    0
//       float d;                       // Offset:   12
//
//   } planes[4];                       // Offset:    0 Size:    64
//
// }
//
// Resource bind info for inVertices
// {
//
//   struct
//   {
//       
//       float3 position;               // Offset:    0
//       float3 normal;                 // Offset:   12
//       float4 tangent;                // Offset:   24
//       float2 texcoord;               // Offset:   40
//       float3 velocity;               // Offset:   48
//       float3 oldPosition;            // Offset:   60
//       float3 oldVelocity;            // Offset:   72
//       float4 rotation;               // Offset:   84
//       uint isPinned;                 // Offset:  100
//
//   } $Element;                        // Offset:    0 Size:   104
//
// }
//
// Resource bind info for clothEdgeSRV
// {
//
//   struct
//   {
//       
//       uint neighbor;                 // Offset:    0
//       float3 delta;                  // Offset:    4
//       float restLength;              // Offset:   16
//
//   } $Element;                        // Offset:    0 Size:    20
//
// }
//
// Resource bind info for outVertices
// {
//
//   struct
//   {
//       
//       float3 position;               // Offset:    0
//       float3 normal;                 // Offset:   12
//       float4 tangent;                // Offset:   24
//       float2 texcoord;               // Offset:   40
//       float3 velocity;               // Offset:   48
//       float3 oldPosition;            // Offset:   60
//       float3 oldVelocity;            // Offset:   72
//       float4 rotation;               // Offset:   84
//       uint isPinned;                 // Offset:  100
//
//   } $Element;                        // Offset:    0 Size:   104
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// inVertices                        texture  struct         r/o             t0      1 
// clothEdgeSRV                      texture  struct         r/o             t1      1 
// outVertices                           UAV  struct         r/w             u0      1 
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
// PLANE_CBUFFER                     cbuffer      NA          NA            cb6      1 
// SPHERE_CBUFFER                    cbuffer      NA          NA            cb7      1 
// CLOTH_SIMULATE_CBUFFER            cbuffer      NA          NA           cb10      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_4_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[11], immediateIndexed
dcl_constantbuffer CB1[2], immediateIndexed
dcl_constantbuffer CB10[1], immediateIndexed
dcl_constantbuffer CB7[1], immediateIndexed
dcl_constantbuffer CB6[3], dynamicIndexed
dcl_resource_structured t0, 104
dcl_resource_structured t1, 20
dcl_uav_structured u0, 104
dcl_input vThreadID.x
dcl_temps 14
dcl_thread_group 16, 1, 1
uge r0.x, vThreadID.x, cb10[0].y
if_nz r0.x
  ret 
endif 
ld_structured r0.xyzw, vThreadID.x, l(0), t0.xyzw
ld_structured r1.xyzw, vThreadID.x, l(16), t0.xyzw
ld_structured r2.xyzw, vThreadID.x, l(32), t0.xyzw
ld_structured r3.xyz, vThreadID.x, l(48), t0.zxyx
ld_structured r4.xyzw, vThreadID.x, l(84), t0.xyzw
ld_structured r5.y, vThreadID.x, l(100), t0.xxxx
ieq r5.z, r5.y, l(1)
if_nz r5.z
  store_structured u0.xyzw, vThreadID.x, l(0), r0.xyzw
  store_structured u0.xyzw, vThreadID.x, l(16), r1.xyzw
  store_structured u0.xyzw, vThreadID.x, l(32), r2.xyzw
  mov r6.x, l(0)
  mov r6.w, r0.x
  store_structured u0.xyzw, vThreadID.x, l(48), r6.xxxw
  mov r6.xy, r0.yzyy
  mov r6.zw, r3.yyyz
  store_structured u0.xyzw, vThreadID.x, l(64), r6.xyzw
  mov r6.x, r3.x
  mov r6.yzw, r4.xxyz
  store_structured u0.xyzw, vThreadID.x, l(80), r6.xyzw
  mov r6.x, r4.w
  mov r6.yz, l(0,1,0,0)
  store_structured u0.xy, vThreadID.x, l(96), r6.xyxx
  ret 
else 
  mov r5.zw, r3.zzzx
  mov r6.z, r3.y
endif 
ishl r7.x, vThreadID.x, l(3)
mov r7.yzw, l(0,0,0,0)
mov r8.xyzw, l(0,0,0,0)
mov r9.x, l(0)
loop 
  uge r9.y, r9.x, l(8)
  breakc_nz r9.y
  iadd r9.y, r7.x, r9.x
  ld_structured r10.x, r9.y, l(0), t1.xxxx
  ieq r9.z, r10.x, l(-1)
  if_nz r9.z
    iadd r9.z, r9.x, l(1)
    mov r9.x, r9.z
    continue 
  endif 
  ld_structured r11.xyz, r10.x, l(0), t0.xyzx
  add r10.yzw, -r0.xxyz, r11.xxyz
  dp3 r9.z, r10.yzwy, r10.yzwy
  sqrt r9.w, r9.z
  lt r11.x, l(0.000001), r9.w
  if_nz r11.x
    ld_structured r11.x, r9.y, l(16), t1.xxxx
    add r9.y, r9.w, -r11.x
    rsq r9.z, r9.z
    mul r10.yzw, r9.zzzz, r10.yyzw
    mul r9.yzw, r9.yyyy, r10.yyzw
    mad r7.yzw, r9.yyzw, l(0.000000, 40.000000, 40.000000, 40.000000), r7.yyzw
    ld_structured r10.xyz, r10.x, l(72), t0.xyzx
    add r8.xyz, r8.xyzx, r10.xyzx
    iadd r8.w, r8.w, l(1)
  endif 
  iadd r9.x, r9.x, l(1)
endloop 
ult r7.x, l(0), r8.w
mad r7.yzw, cb0[8].xxyz, l(0.000000, -4.900000, -4.900000, -4.900000), r7.yyzw
utof r8.w, r8.w
div r8.xyz, r8.xyzx, r8.wwww
mul r7.yzw, r7.yyzw, cb1[1].wwww
mad r7.yzw, r7.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), r3.yyzx
mul r8.w, cb1[1].w, l(-7.213475)
exp r8.w, r8.w
mad r7.yzw, r7.yyzw, l(0.000000, 0.950000, 0.950000, 0.950000), -r8.xxyz
mad r7.yzw, r8.wwww, r7.yyzw, r8.xxyz
mad r8.xyz, r7.yzwy, cb1[1].wwww, r0.xyzx
mov r8.w, r7.y
mov r6.xyw, r0.yzyx
movc r8.xyzw, r7.xxxx, r8.xyzw, r6.wxyz
movc r7.yz, r7.xxxx, r7.zzwz, r5.zzwz
mul r9.xyz, cb0[8].xyzx, cb7[0].yyyy
mad r9.xyz, cb7[0].xxxx, cb0[7].xyzx, r9.xyzx
mad r9.xyz, cb7[0].zzzz, cb0[9].xyzx, r9.xyzx
add r9.xyz, r9.xyzx, cb0[10].xyzx
add r9.xyz, r8.xyzx, -r9.xyzx
dp3 r5.z, r9.xyzx, r9.xyzx
sqrt r5.w, r5.z
lt r7.w, r5.w, cb7[0].w
rsq r5.z, r5.z
mul r9.xyz, r5.zzzz, r9.xyzx
add r5.z, -r5.w, cb7[0].w
mad r10.xyz, r9.xyzx, r5.zzzz, r8.xyzx
mov r7.x, r8.w
dp3 r5.z, r7.xyzx, r9.xyzx
lt r5.w, r5.z, l(0.000000)
mul r11.xyz, r9.xyzx, r5.zzzz
mad r9.xyz, -r5.zzzz, r9.xyzx, r7.xyzx
mul r11.xyz, r11.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mad r9.xyz, r9.xyzx, l(0.900000, 0.900000, 0.900000, 0.000000), -r11.xyzx
movc r9.xyz, r5.wwww, r9.xyzx, r7.xyzx
mov r10.w, r9.x
movc r8.xyzw, r7.wwww, r10.xyzw, r8.xyzw
movc r5.zw, r7.wwww, r9.yyyz, r7.yyyz
mov r7.xyzw, r8.xyzw
mov r9.yz, r5.zzwz
mov r10.x, l(0)
loop 
  uge r10.y, r10.x, l(2)
  breakc_nz r10.y
  mul r10.yzw, cb0[8].xxyz, cb6[r10.x + 0].yyyy
  mad r10.yzw, cb6[r10.x + 0].xxxx, cb0[7].xxyz, r10.yyzw
  mad r10.yzw, cb6[r10.x + 0].zzzz, cb0[9].xxyz, r10.yyzw
  dp3 r11.x, r10.yzwy, r10.yzwy
  rsq r11.x, r11.x
  mul r10.yzw, r10.yyzw, r11.xxxx
  mul r11.xyz, cb6[r10.x + 0].wwww, cb6[r10.x + 0].xyzx
  mul r12.xyz, r11.yyyy, cb0[8].xyzx
  mad r11.xyw, r11.xxxx, cb0[7].xyxz, r12.xyxz
  mad r11.xyz, r11.zzzz, cb0[9].xyzx, r11.xywx
  add r11.xyz, r11.xyzx, cb0[10].xyzx
  add r11.xyz, r7.xyzx, -r11.xyzx
  dp3 r11.x, r10.yzwy, r11.xyzx
  lt r11.y, r11.x, l(0.000000)
  mul r11.xzw, r10.yyzw, r11.xxxx
  mad r12.xyz, -r11.xzwx, l(0.800000, 0.800000, 0.800000, 0.000000), r7.xyzx
  mov r9.x, r7.w
  dp3 r11.x, r9.xyzx, r10.yzwy
  lt r11.z, r11.x, l(0.000000)
  mul r13.xyz, r10.yzwy, r11.xxxx
  mad r10.yzw, -r11.xxxx, r10.yyzw, r9.xxyz
  mul r13.xyz, r13.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
  mad r10.yzw, r10.yyzw, l(0.000000, 0.600000, 0.600000, 0.600000), -r13.xxyz
  movc r10.yzw, r11.zzzz, r10.yyzw, r9.xxyz
  mov r12.w, r10.y
  movc r7.xyzw, r11.yyyy, r12.xyzw, r7.xyzw
  movc r9.yz, r11.yyyy, r10.zzwz, r9.yyzy
  iadd r10.x, r10.x, l(1)
endloop 
mov r0.xyz, r7.xyzx
store_structured u0.xyzw, vThreadID.x, l(0), r0.xyzw
store_structured u0.xyzw, vThreadID.x, l(16), r1.xyzw
store_structured u0.xyzw, vThreadID.x, l(32), r2.xyzw
mov r9.x, r7.w
mov r9.w, r6.w
store_structured u0.xyzw, vThreadID.x, l(48), r9.xyzw
mov r6.zw, r3.yyyz
store_structured u0.xyzw, vThreadID.x, l(64), r6.xyzw
mov r3.yzw, r4.xxyz
store_structured u0.xyzw, vThreadID.x, l(80), r3.xyzw
mov r5.x, r4.w
store_structured u0.xy, vThreadID.x, l(96), r5.xyxx
ret 
// Approximately 152 instruction slots used
