//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64 [unused]
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4 [unused]
//   bool hasTangent;                   // Offset:   84 Size:     4 [unused]
//   int skin;                          // Offset:   88 Size:     4 [unused]
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64
//
// }
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   bool enableSSAO;                   // Offset:    0 Size:     4 [unused]
//   float reflectionIntensity;         // Offset:    4 Size:     4 [unused]
//   float time;                        // Offset:    8 Size:     4 [unused]
//   bool enableCascadedShadowMaps;     // Offset:   12 Size:     4 [unused]
//   bool enableSSR;                    // Offset:   16 Size:     4 [unused]
//   bool enableFog;                    // Offset:   20 Size:     4 [unused]
//   bool enableBloom;                  // Offset:   24 Size:     4 [unused]
//   float deltaTime;                   // Offset:   28 Size:     4
//   float gravity;                     // Offset:   32 Size:     4 [unused]
//   float3 aaa;                        // Offset:   36 Size:    12 [unused]
//
// }
//
// cbuffer CLOTH_SIMULATE_CBUFFER
// {
//
//   float g;                           // Offset:    0 Size:     4 [unused]
//   uint vertexCount;                  // Offset:    4 Size:     4
//   float pading[2];                   // Offset:   16 Size:    20 [unused]
//
// }
//
// cbuffer SPHERE_CBUFFER
// {
//
//   float3 worldPos;                   // Offset:    0 Size:    12
//   float radius;                      // Offset:   12 Size:     4
//   row_major float4x4 sphereWorld;    // Offset:   16 Size:    64 [unused]
//   row_major float4x4 sphereInvWorld; // Offset:   80 Size:    64 [unused]
//
// }
//
// cbuffer PLANE_CBUFFER
// {
//
//   struct
//   {
//       
//       float3 normal;                 // Offset:    0
//       float d;                       // Offset:   12
//
//   } planes[4];                       // Offset:    0 Size:    64
//
// }
//
// Resource bind info for inVertices
// {
//
//   struct
//   {
//       
//       float3 position;               // Offset:    0
//       float3 normal;                 // Offset:   12
//       float4 tangent;                // Offset:   24
//       float2 texcoord;               // Offset:   40
//       float3 velocity;               // Offset:   48
//       float3 oldPosition;            // Offset:   60
//       float3 oldVelocity;            // Offset:   72
//       float4 rotation;               // Offset:   84
//       uint isPinned;                 // Offset:  100
//
//   } $Element;                        // Offset:    0 Size:   104
//
// }
//
// Resource bind info for clothEdgeSRV
// {
//
//   struct
//   {
//       
//       uint neighbor;                 // Offset:    0
//       float3 delta;                  // Offset:    4
//       float restLength;              // Offset:   16
//
//   } $Element;                        // Offset:    0 Size:    20
//
// }
//
// Resource bind info for outVertices
// {
//
//   struct
//   {
//       
//       float3 position;               // Offset:    0
//       float3 normal;                 // Offset:   12
//       float4 tangent;                // Offset:   24
//       float2 texcoord;               // Offset:   40
//       float3 velocity;               // Offset:   48
//       float3 oldPosition;            // Offset:   60
//       float3 oldVelocity;            // Offset:   72
//       float4 rotation;               // Offset:   84
//       uint isPinned;                 // Offset:  100
//
//   } $Element;                        // Offset:    0 Size:   104
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// inVertices                        texture  struct         r/o             t0      1 
// clothEdgeSRV                      texture  struct         r/o             t1      1 
// outVertices                           UAV  struct         r/w             u0      1 
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
// PLANE_CBUFFER                     cbuffer      NA          NA            cb6      1 
// SPHERE_CBUFFER                    cbuffer      NA          NA            cb7      1 
// CLOTH_SIMULATE_CBUFFER            cbuffer      NA          NA           cb10      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_4_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[11], immediateIndexed
dcl_constantbuffer CB1[2], immediateIndexed
dcl_constantbuffer CB10[1], immediateIndexed
dcl_constantbuffer CB7[1], immediateIndexed
dcl_constantbuffer CB6[3], dynamicIndexed
dcl_resource_structured t0, 104
dcl_resource_structured t1, 20
dcl_uav_structured u0, 104
dcl_input vThreadID.x
dcl_temps 22
dcl_thread_group 16, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- id.x; vThreadID.y <- id.y; vThreadID.z <- id.z
//
#line 196 "C:\Users\2240225\Desktop\3Dsoftbody\Shader\ClothUpdateCS.hlsl"
uge r0.x, vThreadID.x, cb10[0].y
if_nz r0.x

#line 198
  ret 

#line 199
endif 

#line 200
ld_structured r0.x, vThreadID.x, l(0), t0.xxxx  // r0.x <- inVertex.position.x
ld_structured r0.y, vThreadID.x, l(4), t0.xxxx  // r0.y <- inVertex.position.y
ld_structured r0.z, vThreadID.x, l(8), t0.xxxx  // r0.z <- inVertex.position.z
ld_structured r1.x, vThreadID.x, l(12), t0.xxxx  // r1.x <- inVertex.normal.x
ld_structured r2.x, vThreadID.x, l(16), t0.xxxx  // r2.x <- inVertex.normal.y
ld_structured r3.x, vThreadID.x, l(20), t0.xxxx  // r3.x <- inVertex.normal.z
ld_structured r4.x, vThreadID.x, l(24), t0.xxxx  // r4.x <- inVertex.tangent.x
ld_structured r5.x, vThreadID.x, l(28), t0.xxxx  // r5.x <- inVertex.tangent.y
ld_structured r6.x, vThreadID.x, l(32), t0.xxxx  // r6.x <- inVertex.tangent.z
ld_structured r7.x, vThreadID.x, l(36), t0.xxxx  // r7.x <- inVertex.tangent.w
ld_structured r8.x, vThreadID.x, l(40), t0.xxxx  // r8.x <- inVertex.texcoord.x
ld_structured r9.x, vThreadID.x, l(44), t0.xxxx  // r9.x <- inVertex.texcoord.y
ld_structured r10.x, vThreadID.x, l(48), t0.xxxx  // r10.x <- inVertex.velocity.x
ld_structured r11.x, vThreadID.x, l(52), t0.xxxx  // r11.x <- inVertex.velocity.y
ld_structured r12.x, vThreadID.x, l(56), t0.xxxx  // r12.x <- inVertex.velocity.z
ld_structured r13.x, vThreadID.x, l(84), t0.xxxx  // r13.x <- inVertex.rotation.x
ld_structured r14.x, vThreadID.x, l(88), t0.xxxx  // r14.x <- inVertex.rotation.y
ld_structured r15.x, vThreadID.x, l(92), t0.xxxx  // r15.x <- inVertex.rotation.z
ld_structured r16.x, vThreadID.x, l(96), t0.xxxx  // r16.x <- inVertex.rotation.w
ld_structured r17.x, vThreadID.x, l(100), t0.xxxx  // r17.x <- inVertex.isPinned
mov r1.y, r2.x  // r1.y <- inVertex.normal.y
mov r1.z, r3.x  // r1.z <- inVertex.normal.z
mov r1.w, r4.x  // r1.w <- inVertex.tangent.x
mov r5.y, r6.x  // r5.y <- inVertex.tangent.z
mov r5.z, r7.x  // r5.z <- inVertex.tangent.w
mov r5.w, r8.x  // r5.w <- inVertex.texcoord.x
mov r9.y, r13.x  // r9.y <- inVertex.rotation.x
mov r9.z, r14.x  // r9.z <- inVertex.rotation.y
mov r9.w, r15.x  // r9.w <- inVertex.rotation.z
mov r10.z, r11.x  // r10.z <- inVertex.velocity.y
mov r10.w, r12.x  // r10.w <- inVertex.velocity.z
mov r10.y, r16.x  // r10.y <- inVertex.rotation.w

#line 203
mov r1.xyzw, r1.xyzw  // r1.x <- outVertex.normal.x; r1.y <- outVertex.normal.y; r1.z <- outVertex.normal.z; r1.w <- outVertex.tangent.x
mov r5.xyzw, r5.xyzw  // r5.x <- outVertex.tangent.y; r5.y <- outVertex.tangent.z; r5.z <- outVertex.tangent.w; r5.w <- outVertex.texcoord.x
mov r9.xyzw, r9.xyzw  // r9.x <- outVertex.texcoord.y; r9.y <- outVertex.rotation.x; r9.z <- outVertex.rotation.y; r9.w <- outVertex.rotation.z
mov r18.xyz, r0.xyzx  // r18.x <- outVertex.position.x; r18.y <- outVertex.position.y; r18.z <- outVertex.position.z
mov r2.yz, r10.zzwz  // r2.y <- outVertex.velocity.y; r2.z <- outVertex.velocity.z
mov r10.xy, r10.xyxx  // r10.x <- outVertex.velocity.x; r10.y <- outVertex.rotation.w
mov r17.x, r17.x  // r17.x <- outVertex.isPinned

#line 205
mov r3.yzw, r18.xxyz  // r3.y <- currentPos.x; r3.z <- currentPos.y; r3.w <- currentPos.z

#line 207
itof r4.yzw, l(0, 0, 0, 0)  // r4.y <- force.x; r4.z <- force.y; r4.w <- force.z

#line 208
itof r6.yzw, l(0, 0, 0, 0)  // r6.y <- avgVelocity.x; r6.z <- avgVelocity.y; r6.w <- avgVelocity.z

#line 209
mov r0.w, l(0)  // r0.w <- edgeCount

#line 212
mov r7.y, l(1)
ieq r7.y, r7.y, r17.x
if_nz r7.y

#line 214
  mov r7.yzw, r18.xxyz  // r7.y <- outVertex.position.x; r7.z <- outVertex.position.y; r7.w <- outVertex.position.z

#line 215
  mov r8.yzw, l(0,0,0,0)  // r8.y <- outVertex.velocity.x; r8.z <- outVertex.velocity.y; r8.w <- outVertex.velocity.z

#line 216
  mov r18.xyz, r18.xyzx  // r18.x <- outVertex.oldPosition.x; r18.y <- outVertex.oldPosition.y; r18.z <- outVertex.oldPosition.z

#line 217
  mov r10.xzw, r10.xxzw  // r10.x <- outVertex.oldVelocity.x; r10.z <- outVertex.oldVelocity.y; r10.w <- outVertex.oldVelocity.z

#line 218
  store_structured u0.x, vThreadID.x, l(0), r7.y
  store_structured u0.x, vThreadID.x, l(4), r7.z
  store_structured u0.x, vThreadID.x, l(8), r7.w
  store_structured u0.x, vThreadID.x, l(12), r1.x
  store_structured u0.x, vThreadID.x, l(16), r1.y
  store_structured u0.x, vThreadID.x, l(20), r1.z
  store_structured u0.x, vThreadID.x, l(24), r1.w
  store_structured u0.x, vThreadID.x, l(28), r5.x
  store_structured u0.x, vThreadID.x, l(32), r5.y
  store_structured u0.x, vThreadID.x, l(36), r5.z
  store_structured u0.x, vThreadID.x, l(40), r5.w
  store_structured u0.x, vThreadID.x, l(44), r9.x
  store_structured u0.x, vThreadID.x, l(48), r8.y
  store_structured u0.x, vThreadID.x, l(52), r8.z
  store_structured u0.x, vThreadID.x, l(56), r8.w
  store_structured u0.x, vThreadID.x, l(60), r18.x
  store_structured u0.x, vThreadID.x, l(64), r18.y
  store_structured u0.x, vThreadID.x, l(68), r18.z
  store_structured u0.x, vThreadID.x, l(72), r10.x
  store_structured u0.x, vThreadID.x, l(76), r10.z
  store_structured u0.x, vThreadID.x, l(80), r10.w
  store_structured u0.x, vThreadID.x, l(84), r9.y
  store_structured u0.x, vThreadID.x, l(88), r9.z
  store_structured u0.x, vThreadID.x, l(92), r9.w
  store_structured u0.x, vThreadID.x, l(96), r10.y
  store_structured u0.x, vThreadID.x, l(100), r17.x

#line 219
  ret 

#line 220
else   // Prior locations: r18.x <- outVertex.position.x; r18.y <- outVertex.position.y; r18.z <- outVertex.position.z; r2.y <- outVertex.velocity.y; r2.z <- outVertex.velocity.z; r10.x <- outVertex.velocity.x
  mov r18.w, r10.x
endif 

#line 225
mov r1.y, l(8)
imul null, r1.y, r1.y, vThreadID.x  // r1.y <- baseEdge

#line 227
mov r1.z, l(0)  // r1.z <- i
mov r5.yzw, r4.yyzw  // r5.y <- force.x; r5.z <- force.y; r5.w <- force.z
mov r7.yzw, r6.yyzw  // r7.y <- avgVelocity.x; r7.z <- avgVelocity.y; r7.w <- avgVelocity.z
mov r1.w, r0.w  // r1.w <- edgeCount
mov r8.y, r1.z  // r8.y <- i
loop 
  mov r8.z, l(8)
  ult r8.z, r8.y, r8.z
  breakc_z r8.z

#line 229
  iadd r8.z, r1.y, r8.y
  ld_structured r19.x, r8.z, l(0), t1.xxxx  // r19.x <- e.neighbor
  ld_structured r20.x, r8.z, l(16), t1.xxxx  // r20.x <- e.restLength

#line 230
  ieq r8.z, r19.x, l(-1)
  if_nz r8.z

#line 232
    iadd r8.y, r8.y, l(1)
    continue 

#line 233
  endif 

#line 234
  ld_structured r21.x, r19.x, l(0), t0.xxxx  // r21.x <- neighborPos.x
  ld_structured r21.y, r19.x, l(4), t0.xxxx  // r21.y <- neighborPos.y
  ld_structured r21.z, r19.x, l(8), t0.xxxx  // r21.z <- neighborPos.z

#line 235
  mov r9.yzw, -r3.yyzw
  add r9.yzw, r9.yyzw, r21.xxyz  // r9.y <- delta.x; r9.z <- delta.y; r9.w <- delta.z

#line 236
  dp3 r8.z, r9.yzwy, r9.yzwy
  sqrt r8.z, r8.z  // r8.z <- distance

#line 237
  lt r8.w, l(0.000001), r8.z
  if_nz r8.w

#line 240
    mov r8.w, -r20.x
    add r8.z, r8.w, r8.z  // r8.z <- springDelta

#line 241
    dp3 r8.w, r9.yzwy, r9.yzwy
    rsq r8.w, r8.w
    mul r9.yzw, r8.wwww, r9.yyzw  // r9.y <- n.x; r9.z <- n.y; r9.w <- n.z

#line 243
    mov r8.w, l(40.000000)  // r8.w <- springStiffness

#line 244
    mul r9.yzw, r8.wwww, r9.yyzw
    mul r9.yzw, r8.zzzz, r9.yyzw
    add r5.yzw, r5.yyzw, r9.yyzw

#line 247
    ld_structured r20.x, r19.x, l(72), t0.xxxx
    ld_structured r20.y, r19.x, l(76), t0.xxxx
    ld_structured r20.z, r19.x, l(80), t0.xxxx
    add r7.yzw, r7.yyzw, r20.xxyz

#line 249
    iadd r1.w, r1.w, l(1)

#line 250
  endif 

#line 227
  iadd r8.y, r8.y, l(1)

#line 251
endloop 

#line 253
if_nz r1.w

#line 257
  itof r4.yzw, l(0, 0, 0, 0)  // r4.y <- forceWorld.x; r4.z <- forceWorld.z; r4.w <- forceWorld.w
  mov r0.w, l(-4.900000)  // r0.w <- forceWorld.y

#line 259
  mul r6.yzw, r4.yyyy, cb0[7].xxyz
  mul r8.yzw, r0.wwww, cb0[8].xxyz
  add r6.yzw, r6.yyzw, r8.yyzw
  mul r8.yzw, r4.zzzz, cb0[9].xxyz
  add r6.yzw, r6.yyzw, r8.yyzw
  mul r4.yzw, r4.wwww, cb0[10].xxyz
  add r4.yzw, r4.yyzw, r6.yyzw  // r4.y <- forceLocal4.x; r4.z <- forceLocal4.y; r4.w <- forceLocal4.z

#line 260
  add r4.yzw, r4.yyzw, r5.yyzw  // r4.y <- force.x; r4.z <- force.y; r4.w <- force.z

#line 261
  mov r10.xzw, r10.xxzw  // r10.x <- currentVelocity.x; r10.z <- currentVelocity.y; r10.w <- currentVelocity.z

#line 283
  utof r0.w, r1.w
  div r1.yzw, r7.yyzw, r0.wwww  // r1.y <- avgVelocity.x; r1.z <- avgVelocity.y; r1.w <- avgVelocity.z

#line 287
  div r4.yzw, r4.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000)
  mul r4.yzw, r4.yyzw, cb1[1].wwww
  add r4.yzw, r4.yyzw, r10.xxzw  // r4.y <- newVelocity.x; r4.z <- newVelocity.y; r4.w <- newVelocity.z

#line 288
  mul r4.yzw, r4.yyzw, l(0.000000, 0.950000, 0.950000, 0.950000)

#line 291
  mul r0.w, cb1[1].w, l(-5.000000)
  mul r0.w, r0.w, l(1.442695)
  exp r0.w, r0.w
  mov r5.yzw, -r1.yyzw
  add r4.yzw, r4.yyzw, r5.yyzw
  mul r4.yzw, r0.wwww, r4.yyzw
  add r2.yzw, r1.zzwy, r4.zzwy  // r2.y <- smoothedVelocity.y; r2.z <- smoothedVelocity.z; r2.w <- smoothedVelocity.x

#line 294
  mov r2.yzw, r2.yyzw  // r2.y <- outVertex.velocity.y; r2.z <- outVertex.velocity.z; r2.w <- outVertex.velocity.x

#line 295
  mul r1.yzw, r2.wwyz, cb1[1].wwww
  add r18.xyz, r1.yzwy, r3.yzwy

#line 297
  mov r18.w, r2.w
  mov r18.xyzw, r18.xyzw  // r18.w <- outVertex.velocity.x
endif 

#line 299
nop 
mov r18.xyzw, r18.xyzw
mov r2.yz, r2.yyzy

#line 105
mov r1.yzw, cb7[0].xxyz  // r1.y <- sphereCenterWorld.x; r1.z <- sphereCenterWorld.y; r1.w <- sphereCenterWorld.z

#line 106
mov r0.w, cb7[0].w  // r0.w <- sphereRadiusWorld

#line 111
mul r3.yzw, r1.yyyy, cb0[7].xxyz
mul r4.yzw, r1.zzzz, cb0[8].xxyz
add r3.yzw, r3.yyzw, r4.yyzw
mul r1.yzw, r1.wwww, cb0[9].xxyz
add r1.yzw, r1.yyzw, r3.yyzw
mul r3.yzw, cb0[10].xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
add r1.yzw, r1.yyzw, r3.yyzw  // r1.y <- centerLocal4.x; r1.z <- centerLocal4.y; r1.w <- centerLocal4.z

#line 112
mov r1.yzw, r1.yyzw  // r1.y <- sphereCenterLocal.x; r1.z <- sphereCenterLocal.y; r1.w <- sphereCenterLocal.z

#line 115
mov r1.yzw, -r1.yyzw
add r1.yzw, r1.yyzw, r18.xxyz  // r1.y <- dir.x; r1.z <- dir.y; r1.w <- dir.z

#line 116
dp3 r3.y, r1.yzwy, r1.yzwy
sqrt r3.y, r3.y  // r3.y <- dist

#line 118
lt r3.z, r3.y, r0.w
if_nz r3.z

#line 120
  dp3 r3.z, r1.yzwy, r1.yzwy
  rsq r3.z, r3.z
  mul r1.yzw, r1.yyzw, r3.zzzz  // r1.y <- n.x; r1.z <- n.y; r1.w <- n.z

#line 121
  mov r3.y, -r3.y
  add r0.w, r0.w, r3.y  // r0.w <- penetration

#line 124
  mul r3.yzw, r0.wwww, r1.yyzw
  mul r3.yzw, r3.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
  add r18.xyz, r3.yzwy, r18.xyzx

#line 128
  mov r2.w, r18.w
  dp3 r0.w, r2.wyzw, r1.yzwy  // r0.w <- vn

#line 129
  lt r3.y, r0.w, l(0.000000)
  if_nz r3.y

#line 131
    mul r1.yzw, r1.yyzw, r0.wwww  // r1.y <- velNormal.x; r1.z <- velNormal.y; r1.w <- velNormal.z

#line 132
    mov r3.yzw, -r1.yyzw
    add r3.yzw, r2.wwyz, r3.yyzw  // r3.y <- velTangent.x; r3.z <- velTangent.y; r3.w <- velTangent.z

#line 136
    mul r3.yzw, r3.yyzw, l(0.000000, 0.900000, 0.900000, 0.900000)
    mul r1.yzw, r1.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000)
    mov r1.yzw, -r1.yyzw
    add r2.yzw, r1.zzwy, r3.zzwy  // r2.w <- v.velocity.x

#line 137
    mov r18.w, r2.w  // r18.w <- v.velocity.x
  endif 

#line 138
endif 

#line 299
mov r18.xyzw, r18.xyzw  // r18.x <- outVertex.position.x; r18.y <- outVertex.position.y; r18.z <- outVertex.position.z; r18.w <- outVertex.velocity.x
mov r2.yz, r2.yyzy  // r2.y <- outVertex.velocity.y; r2.z <- outVertex.velocity.z

#line 300
mov r0.w, l(0)  // r0.w <- j
mov r19.xyzw, r18.xyzw  // r19.x <- outVertex.position.x; r19.y <- outVertex.position.y; r19.z <- outVertex.position.z; r19.w <- outVertex.velocity.x
mov r1.yz, r2.yyzy  // r1.y <- outVertex.velocity.y; r1.z <- outVertex.velocity.z
mov r2.w, r0.w  // r2.w <- j
loop 
  mov r3.y, l(2)
  ult r3.y, r2.w, r3.y
  breakc_z r3.y

#line 302
  nop 
  mov r19.xyzw, r19.xyzw
  mov r1.yz, r1.yyzy
  mov r20.xyzw, cb6[r2.w + 0].xyzw

#line 157
  mov r20.xyzw, r20.xyzw  // r20.x <- worldFloor.normal.x; r20.y <- worldFloor.normal.y; r20.z <- worldFloor.normal.z; r20.w <- worldFloor.d

#line 159
  mul r3.yzw, r20.xxxx, cb0[7].xxyz
  mul r4.yzw, r20.yyyy, cb0[8].xxyz
  add r3.yzw, r3.yyzw, r4.yyzw
  mul r4.yzw, r20.zzzz, cb0[9].xxyz
  add r3.yzw, r3.yyzw, r4.yyzw
  mul r4.yzw, cb0[10].xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r3.yzw, r3.yyzw, r4.yyzw  // r3.y <- localNormal.x; r3.z <- localNormal.y; r3.w <- localNormal.z

#line 160
  dp3 r4.y, r3.yzwy, r3.yzwy
  rsq r4.y, r4.y
  mul r3.yzw, r3.yyzw, r4.yyyy

#line 163
  mul r4.yzw, r20.wwww, r20.xxyz  // r4.y <- worldPoint.x; r4.z <- worldPoint.y; r4.w <- worldPoint.z

#line 166
  mul r5.yzw, r4.yyyy, cb0[7].xxyz
  mul r6.yzw, r4.zzzz, cb0[8].xxyz
  add r5.yzw, r5.yyzw, r6.yyzw
  mul r4.yzw, r4.wwww, cb0[9].xxyz
  add r4.yzw, r4.yyzw, r5.yyzw
  mul r5.yzw, cb0[10].xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
  add r4.yzw, r4.yyzw, r5.yyzw  // r4.y <- localPoint.x; r4.z <- localPoint.y; r4.w <- localPoint.z

#line 169
  mov r4.yzw, -r4.yyzw
  add r4.yzw, r4.yyzw, r19.xxyz
  dp3 r4.y, r3.yzwy, r4.yzwy  // r4.y <- dist

#line 171
  lt r4.z, r4.y, l(0.000000)
  if_nz r4.z

#line 174
    mul r4.yzw, r3.yyzw, r4.yyyy
    mul r4.yzw, r4.yyzw, l(0.000000, 0.800000, 0.800000, 0.800000)
    mov r4.yzw, -r4.yyzw
    add r19.xyz, r4.yzwy, r19.xyzx

#line 177
    mov r1.w, r19.w
    dp3 r4.y, r1.wyzw, r3.yzwy  // r4.y <- vn

#line 178
    lt r4.z, r4.y, l(0.000000)
    if_nz r4.z

#line 180
      mul r3.yzw, r3.yyzw, r4.yyyy  // r3.y <- velNormal.x; r3.z <- velNormal.y; r3.w <- velNormal.z

#line 181
      mov r4.yzw, -r3.yyzw
      add r4.yzw, r1.wwyz, r4.yyzw  // r4.y <- velTangent.x; r4.z <- velTangent.y; r4.w <- velTangent.z

#line 182
      mov r5.y, l(0.400000)  // r5.y <- friction

#line 183
      mov r5.z, l(0.100000)  // r5.z <- restitution

#line 185
      mov r5.y, -r5.y
      add r5.y, r5.y, l(1.000000)
      mul r4.yzw, r4.yyzw, r5.yyyy
      mul r3.yzw, r3.yyzw, r5.zzzz
      mov r3.yzw, -r3.yyzw
      add r1.yzw, r3.zzwy, r4.zzwy  // r1.w <- v.velocity.x

#line 186
      mov r19.w, r1.w  // r19.w <- v.velocity.x
    endif 

#line 187
  endif 

#line 302
  mov r19.xyzw, r19.xyzw  // r19.x <- outVertex.position.x; r19.y <- outVertex.position.y; r19.z <- outVertex.position.z; r19.w <- outVertex.velocity.x
  mov r1.yz, r1.yyzy  // r1.y <- outVertex.velocity.y; r1.z <- outVertex.velocity.z

#line 303
  iadd r2.w, r2.w, l(1)
endloop 
mov r1.x, r1.x
mov r2.x, r2.x  // r2.x <- outVertex.normal.y
mov r3.x, r3.x  // r3.x <- outVertex.normal.z
mov r4.x, r4.x  // r4.x <- outVertex.tangent.x
mov r5.x, r5.x
mov r6.x, r6.x  // r6.x <- outVertex.tangent.z
mov r7.x, r7.x  // r7.x <- outVertex.tangent.w
mov r8.x, r8.x  // r8.x <- outVertex.texcoord.x
mov r9.x, r9.x
mov r0.x, r0.x  // r0.x <- outVertex.oldPosition.x
mov r0.y, r0.y  // r0.y <- outVertex.oldPosition.y
mov r0.z, r0.z  // r0.z <- outVertex.oldPosition.z
mov r10.x, r10.x  // r10.x <- outVertex.oldVelocity.x
mov r11.x, r11.x  // r11.x <- outVertex.oldVelocity.y
mov r12.x, r12.x  // r12.x <- outVertex.oldVelocity.z
mov r13.x, r13.x  // r13.x <- outVertex.rotation.x
mov r14.x, r14.x  // r14.x <- outVertex.rotation.y
mov r15.x, r15.x  // r15.x <- outVertex.rotation.z
mov r16.x, r16.x  // r16.x <- outVertex.rotation.w
mov r17.x, r17.x

#line 305
store_structured u0.x, vThreadID.x, l(0), r19.x
store_structured u0.x, vThreadID.x, l(4), r19.y
store_structured u0.x, vThreadID.x, l(8), r19.z
store_structured u0.x, vThreadID.x, l(12), r1.x
store_structured u0.x, vThreadID.x, l(16), r2.x
store_structured u0.x, vThreadID.x, l(20), r3.x
store_structured u0.x, vThreadID.x, l(24), r4.x
store_structured u0.x, vThreadID.x, l(28), r5.x
store_structured u0.x, vThreadID.x, l(32), r6.x
store_structured u0.x, vThreadID.x, l(36), r7.x
store_structured u0.x, vThreadID.x, l(40), r8.x
store_structured u0.x, vThreadID.x, l(44), r9.x
store_structured u0.x, vThreadID.x, l(48), r19.w
store_structured u0.x, vThreadID.x, l(52), r1.y
store_structured u0.x, vThreadID.x, l(56), r1.z
store_structured u0.x, vThreadID.x, l(60), r0.x
store_structured u0.x, vThreadID.x, l(64), r0.y
store_structured u0.x, vThreadID.x, l(68), r0.z
store_structured u0.x, vThreadID.x, l(72), r10.x
store_structured u0.x, vThreadID.x, l(76), r11.x
store_structured u0.x, vThreadID.x, l(80), r12.x
store_structured u0.x, vThreadID.x, l(84), r13.x
store_structured u0.x, vThreadID.x, l(88), r14.x
store_structured u0.x, vThreadID.x, l(92), r15.x
store_structured u0.x, vThreadID.x, l(96), r16.x
store_structured u0.x, vThreadID.x, l(100), r17.x

#line 306
ret 
// Approximately 312 instruction slots used
