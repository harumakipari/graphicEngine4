//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SHADER_CONSTANT_BUFFER
// {
//
//   float shadowColor;                 // Offset:    0 Size:     4 [unused]
//   float shadowDepthBias;             // Offset:    4 Size:     4
//   bool colorizeCascadedLayer;        // Offset:    8 Size:     4 [unused]
//   float maxDistance;                 // Offset:   12 Size:     4 [unused]
//   float resolution;                  // Offset:   16 Size:     4 [unused]
//   int steps;                         // Offset:   20 Size:     4 [unused]
//   float thickness;                   // Offset:   24 Size:     4 [unused]
//
// }
//
// cbuffer CSM_CONSTANTS
// {
//
//   row_major float4x4 cascadedMatrices[4];// Offset:    0 Size:   256 [unused]
//   float4 cascadedPlaneDistances;     // Offset:  256 Size:    16
//
// }
//
// cbuffer FOG_CONSTANTS_BUFFER
// {
//
//   float4 fogColor;                   // Offset:    0 Size:    16 [unused]
//   float fogDensity;                  // Offset:   16 Size:     4
//   float fogHeightFalloff;            // Offset:   20 Size:     4
//   float groundLevel;                 // Offset:   24 Size:     4
//   float fogCutoffDistance;           // Offset:   28 Size:     4
//   float mieScatteringCoef;           // Offset:   32 Size:     4
//   bool enableDither;                 // Offset:   36 Size:     4
//   bool enableBlur;                   // Offset:   40 Size:     4 [unused]
//   float timeScale;                   // Offset:   44 Size:     4 [unused]
//   float noiseScale;                  // Offset:   48 Size:     4 [unused]
//
// }
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 cameraPositon;              // Offset:   64 Size:    16
//   row_major float4x4 view;           // Offset:   80 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset:  144 Size:    64 [unused]
//   row_major float4x4 inverseProjection;// Offset:  208 Size:    64
//   row_major float4x4 inverseViewProjection;// Offset:  272 Size:    64
//   row_major float4x4 invView;        // Offset:  336 Size:    64 [unused]
//
// }
//
// cbuffer LIGHT_CONSTANT_BUFFER
// {
//
//   float4 lightDirection;             // Offset:    0 Size:    16
//   float4 colorLight;                 // Offset:   16 Size:    16 [unused]
//   float iblIntensity;                // Offset:   32 Size:     4 [unused]
//   int directionalLightEnable;        // Offset:   36 Size:     4 [unused]
//   int pointLightEnable;              // Offset:   40 Size:     4 [unused]
//   int pointLightCount;               // Offset:   44 Size:     4 [unused]
//   
//   struct PointLights
//   {
//       
//       float4 position;               // Offset:   48
//       float4 color;                  // Offset:   64
//       float range;                   // Offset:   80
//       float3 pads;                   // Offset:   84
//
//   } pointLights[8];                  // Offset:   48 Size:   384 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// pointSamplerState                 sampler      NA          NA             s0      1 
// linearBorderBlackSamplerState     sampler      NA          NA             s3      1 
// comparisonSamplerState          sampler_c      NA          NA             s7      1 
// depthTexture                      texture  float4          2d             t1      1 
// cascadedShadowMaps                texture  float4     2darray             t2      1 
// CSM_CONSTANTS                     cbuffer      NA          NA            cb3      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb4      1 
// FOG_CONSTANTS_BUFFER              cbuffer      NA          NA            cb8      1 
// SHADER_CONSTANT_BUFFER            cbuffer      NA          NA            cb9      1 
// LIGHT_CONSTANT_BUFFER             cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   x           0   TARGET   float   x   
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB9[1], immediateIndexed
dcl_constantbuffer CB3[17], immediateIndexed
dcl_constantbuffer CB8[3], immediateIndexed
dcl_constantbuffer CB4[21], immediateIndexed
dcl_constantbuffer CB11[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s3, mode_default
dcl_sampler s7, mode_comparison
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2darray (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.x
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t1.xyzw, s0
mad r0.y, v1.x, l(2.000000), l(-1.000000)
mad r0.z, v1.y, l(-2.000000), l(1.000000)
mul r1.xyzw, r0.zzzz, cb4[18].xyzw
mad r1.xyzw, r0.yyyy, cb4[17].xyzw, r1.xyzw
mad r1.xyzw, r0.xxxx, cb4[19].xyzw, r1.xyzw
add r1.xyzw, r1.xyzw, cb4[20].xyzw
div r1.xyz, r1.xyzx, r1.wwww
add r1.xyz, r1.xyzx, -cb4[4].xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
sqrt r0.x, r0.x
div r1.xyz, r1.xyzx, r0.xxxx
min r0.x, r0.x, cb8[1].w
if_nz cb8[2].y
  mul r2.xyzw, v0.yyxx, l(4.000000, 4.000000, 4.000000, 4.000000)
  ge r2.xyzw, r2.xyzw, -r2.yyww
  movc r2.xyzw, r2.xyzw, l(4.000000,0.250000,4.000000,0.250000), l(-4.000000,-0.250000,-4.000000,-0.250000)
  mul r2.yw, r2.yyyw, v0.yyyx
  frc r2.yw, r2.yyyw
  mul r2.xy, r2.ywyy, r2.xzxx
  ftou r2.xy, r2.xyxx
  dp3 r3.x, l(0.750000, 0.187500, 0.937500, 0.000000), icb[r2.y + 0].yzwy
  dp4 r3.y, l(0.500000, 0.220000, 0.687500, 0.437500), icb[r2.y + 0].xyzw
  dp4 r3.z, l(0.125000, 0.875000, 0.062500, 0.812500), icb[r2.y + 0].xyzw
  dp4 r3.w, l(0.625000, 0.375000, 0.562500, 0.312500), icb[r2.y + 0].xyzw
  dp4 r0.w, r3.xyzw, icb[r2.x + 0].xyzw
else 
  mov r0.w, l(0)
endif 
mul r1.w, r1.x, r0.x
mul r2.x, r1.w, l(0.062500)
mad r0.w, r2.x, r0.w, cb4[4].x
sample_indexable(texture2d)(float,float,float,float) r2.x, v1.xyxx, t1.xyzw, s3
mul r2.yz, r0.zzzz, cb4[14].zzwz
mad r0.yz, r0.yyyy, cb4[13].zzwz, r2.yyzy
mad r0.yz, r2.xxxx, cb4[15].zzwz, r0.yyzy
add r0.yz, r0.yyzy, cb4[16].zzwz
div r0.y, r0.y, r0.z
mul r0.xz, r0.xxxx, l(0.050937, 0.000000, 0.000194, 0.000000)
mov r2.y, r0.w
mov r2.xzw, l(0,0,0,0)
loop 
  ige r3.x, r2.w, l(16)
  breakc_nz r3.x
  mov r3.xy, l(-1,0,0,0)
  loop 
    uge r3.z, r3.y, l(4)
    breakc_nz r3.z
    dp4 r3.z, cb3[16].xyzw, icb[r3.y + 0].xyzw
    lt r3.z, r0.y, r3.z
    if_nz r3.z
      mov r3.x, r3.y
      break 
    endif 
    iadd r3.y, r3.y, l(1)
    mov r3.x, l(-1)
  endloop 
  mul r4.xyzw, r2.yyyy, cb4[1].xyzw
  mad r4.xyzw, r2.yyyy, cb4[0].xyzw, r4.xyzw
  mad r4.xyzw, r2.yyyy, cb4[2].xyzw, r4.xyzw
  add r4.xyzw, r4.xyzw, cb4[3].xyzw
  div r3.yzw, r4.xxyz, r4.wwww
  mad r4.xy, r3.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  itof r4.z, r3.x
  add r3.y, r3.w, -cb9[0].y
  sample_c_lz_indexable(texture2darray)(float,float,float,float) r3.y, r4.xyzx, t2.xxxx, s7, r3.y
  add r3.z, r2.y, -cb8[1].z
  mul r3.z, -r3.z, cb8[1].y
  mul r3.z, r3.z, l(1.442695)
  exp r3.z, r3.z
  mul r3.z, r3.z, cb8[1].x
  mul r3.w, r0.x, r3.z
  mad r2.z, r0.z, r3.z, r2.z
  mul r3.y, r3.w, r3.y
  mul r3.z, r2.z, l(-1.442695)
  exp r3.z, r3.z
  mad r2.x, r3.y, r3.z, r2.x
  mad r2.y, r1.w, l(0.062500), r2.y
  iadd r2.w, r2.w, l(1)
endloop 
dp3 r0.x, cb11[0].xyzx, cb11[0].xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, cb11[0].xyzx
dp3 r0.x, r0.xyzx, -r1.xyzx
mad r0.y, -cb8[2].x, cb8[2].x, l(1.000000)
mad r0.z, cb8[2].x, cb8[2].x, l(1.000000)
dp2 r0.x, r0.xxxx, cb8[2].xxxx
add r0.x, -r0.x, r0.z
log r0.x, r0.x
mul r0.x, r0.x, l(1.500000)
exp r0.x, r0.x
div r0.x, r0.y, r0.x
mul r0.x, r0.x, r2.x
mul o0.x, r0.x, l(0.079577)
ret 
// Approximately 95 instruction slots used
