//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4 [unused]
//   bool hasTangent;                   // Offset:   84 Size:     4 [unused]
//   int skin;                          // Offset:   88 Size:     4 [unused]
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64 [unused]
//
// }
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 cameraPositon;              // Offset:   64 Size:    16 [unused]
//   row_major float4x4 view;           // Offset:   80 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset:  144 Size:    64 [unused]
//   row_major float4x4 inverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 inverseViewProjection;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 invView;        // Offset:  336 Size:    64 [unused]
//
// }
//
// cbuffer ELASTIC_CONSTANT_BUFFER
// {
//
//   float4 p1;                         // Offset:    0 Size:    16
//   float4 p2;                         // Offset:   16 Size:    16
//   float4 p3;                         // Offset:   32 Size:    16
//   float buildProgress;               // Offset:   48 Size:     4 [unused]
//   float buildHeight;                 // Offset:   52 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb4      1 
// ELASTIC_CONSTANT_BUFFER           cbuffer      NA          NA            cb6      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// JOINTS                   0   xyzw        4     NONE    uint       
// JOINTS                   1   xyzw        5     NONE    uint       
// WEIGHTS                  0   xyzw        6     NONE   float       
// WEIGHTS                  1   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB4[4], immediateIndexed
dcl_constantbuffer CB6[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xy
dcl_temps 6
mul r0.xyz, v0.yyyy, cb0[1].xyzx
mad r0.xyz, v0.xxxx, cb0[0].xyzx, r0.xyzx
mad r0.xyz, v0.zzzz, cb0[2].xyzx, r0.xyzx
mad r0.xyz, v0.wwww, cb0[3].xyzx, r0.xyzx
max r0.w, cb6[3].y, l(0.000010)
add r1.y, r0.y, -cb6[0].y
div_sat r0.w, r1.y, r0.w
add r1.w, -r0.w, l(1.000000)
mul r2.x, r1.w, r1.w
dp2 r2.y, r0.wwww, r1.wwww
mul r2.yzw, r2.yyyy, cb6[1].xxyz
mad r2.xyz, r2.xxxx, cb6[0].xyzx, r2.yzwy
mul r2.w, r0.w, r0.w
mad r2.xyz, r2.wwww, cb6[2].xyzx, r2.xyzx
add r3.xyz, -cb6[0].yzxy, cb6[1].yzxy
add r4.xyz, -cb6[1].yzxy, cb6[2].yzxy
mul r4.xyz, r0.wwww, r4.xyzx
mad r3.xyz, r1.wwww, r3.xyzx, r4.xyzx
add r3.xyz, r3.xyzx, r3.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
sqrt r0.w, r0.w
ge r1.w, r0.w, l(0.000010)
div r3.xyz, r3.xyzx, r0.wwww
movc r3.xyz, r1.wwww, r3.xyzx, l(0,1.000000,0,0)
mov r1.xz, l(0,0,0,0)
add r1.xyz, r1.xyzx, cb6[0].xyzx
add r0.xyz, r0.xyzx, -r1.xyzx
mul r1.xyz, r3.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mad r1.xyz, r3.yzxy, l(1.000000, 0.000000, 0.000000, 0.000000), -r1.xyzx
dp2 r0.w, r1.xzxx, r1.xzxx
sqrt r0.w, r0.w
lt r1.w, l(0.000010), r0.w
if_nz r1.w
  div r1.xyz, r1.xyzx, r0.wwww
  max r0.w, r3.x, l(-1.000000)
  min r0.w, r0.w, l(1.000000)
  add r1.w, -|r0.w|, l(1.000000)
  sqrt r1.w, r1.w
  mad r2.w, |r0.w|, l(-0.018729), l(0.074261)
  mad r2.w, r2.w, |r0.w|, l(-0.212114)
  mad r2.w, r2.w, |r0.w|, l(1.570729)
  mul r3.x, r1.w, r2.w
  mad r3.x, r3.x, l(-2.000000), l(3.141593)
  lt r3.y, r0.w, -r0.w
  and r3.x, r3.y, r3.x
  mad r1.w, r2.w, r1.w, r3.x
  min r1.w, r1.w, l(1.396263)
  sincos r1.w, null, r1.w
  mul r3.xyz, r0.yzxy, r1.zxyz
  mad r3.xyz, r1.yzxy, r0.zxyz, -r3.xyzx
  mul r3.xyz, r1.wwww, r3.xyzx
  mad r3.xyz, r0.wwww, r0.xyzx, r3.xyzx
  add r2.w, -r0.w, l(1.000000)
  dp2 r3.w, r1.xzxx, r0.xzxx
  mul r3.w, r2.w, r3.w
  mad r0.xyz, r3.wwww, r1.xyzx, r3.xyzx
  mul r3.xyz, v1.yyyy, cb0[1].yzxy
  mad r3.xyz, v1.xxxx, cb0[0].yzxy, r3.xyzx
  mad r3.xyz, v1.zzzz, cb0[2].yzxy, r3.xyzx
  dp3 r3.w, r3.xyzx, r3.xyzx
  rsq r3.w, r3.w
  mul r3.xyz, r3.wwww, r3.xyzx
  mul r4.xyz, v2.yyyy, cb0[1].yzxy
  mad r4.xyz, v2.xxxx, cb0[0].yzxy, r4.xyzx
  mad r4.xyz, v2.zzzz, cb0[2].yzxy, r4.xyzx
  dp3 r3.w, r4.xyzx, r4.xyzx
  rsq r3.w, r3.w
  mul r4.xyz, r3.wwww, r4.xyzx
  mul r5.xyz, r1.zxyz, r3.xyzx
  mad r5.xyz, r1.yzxy, r3.yzxy, -r5.xyzx
  mul r5.xyz, r1.wwww, r5.xyzx
  mad r5.xyz, r0.wwww, r3.zxyz, r5.xyzx
  dp2 r3.x, r1.zxzz, r3.yzyy
  mul r3.x, r2.w, r3.x
  mad r3.xyz, r3.xxxx, r1.xyzx, r5.xyzx
  mul r5.xyz, r1.zxyz, r4.xyzx
  mad r5.xyz, r1.yzxy, r4.yzxy, -r5.xyzx
  mul r5.xyz, r1.wwww, r5.xyzx
  mad r5.xyz, r0.wwww, r4.zxyz, r5.xyzx
  dp2 r0.w, r1.zxzz, r4.yzyy
  mul r0.w, r0.w, r2.w
  mad r1.xyz, r0.wwww, r1.xyzx, r5.xyzx
else 
  dp3 r4.x, cb0[0].xyzx, v1.xyzx
  dp3 r4.y, cb0[1].xyzx, v1.xyzx
  dp3 r4.z, cb0[2].xyzx, v1.xyzx
  dp3 r0.w, r4.xyzx, r4.xyzx
  rsq r0.w, r0.w
  mul r3.xyz, r0.wwww, r4.xyzx
  dp3 r4.x, cb0[0].xyzx, v2.xyzx
  dp3 r4.y, cb0[1].xyzx, v2.xyzx
  dp3 r4.z, cb0[2].xyzx, v2.xyzx
  dp3 r0.w, r4.xyzx, r4.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, r4.xyzx
endif 
add r0.xyz, r0.xyzx, r2.xyzx
mul r2.xyzw, r0.yyyy, cb4[1].xyzw
mad r2.xyzw, r0.xxxx, cb4[0].xyzw, r2.xyzw
mad r2.xyzw, r0.zzzz, cb4[2].xyzw, r2.xyzw
add o0.xyzw, r2.xyzw, cb4[3].xyzw
dp3 r0.w, r3.xyzx, r3.xyzx
sqrt r0.w, r0.w
ge r1.w, r0.w, l(0.000010)
div r2.xyz, r3.xyzx, r0.wwww
movc o2.xyz, r1.wwww, r2.xyzx, l(0,1.000000,0,0)
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
ge r1.w, r0.w, l(0.000010)
div r1.xyz, r1.xyzx, r0.wwww
movc o3.xyz, r1.wwww, r1.xyzx, l(1.000000,0,0,0)
mov o1.xyz, r0.xyzx
mov o1.w, l(1.000000)
mov o2.w, l(0)
mov o3.w, v2.w
mov o4.xy, v3.xyxx
ret 
// Approximately 117 instruction slots used
