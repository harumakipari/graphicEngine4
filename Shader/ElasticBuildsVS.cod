//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4 [unused]
//   bool hasTangent;                   // Offset:   84 Size:     4 [unused]
//   int skin;                          // Offset:   88 Size:     4 [unused]
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64 [unused]
//
// }
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 cameraPositon;              // Offset:   64 Size:    16 [unused]
//   row_major float4x4 view;           // Offset:   80 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset:  144 Size:    64 [unused]
//   row_major float4x4 inverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 inverseViewProjection;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 invView;        // Offset:  336 Size:    64 [unused]
//
// }
//
// cbuffer ELASTIC_CONSTANT_BUFFER
// {
//
//   float4 p1;                         // Offset:    0 Size:    16
//   float4 p2;                         // Offset:   16 Size:    16
//   float4 p3;                         // Offset:   32 Size:    16
//   float buildProgress;               // Offset:   48 Size:     4 [unused]
//   float buildHeight;                 // Offset:   52 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb4      1 
// ELASTIC_CONSTANT_BUFFER           cbuffer      NA          NA            cb6      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// JOINTS                   0   xyzw        4     NONE    uint       
// JOINTS                   1   xyzw        5     NONE    uint       
// WEIGHTS                  0   xyzw        6     NONE   float       
// WEIGHTS                  1   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB4[4], immediateIndexed
dcl_constantbuffer CB6[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xy
dcl_temps 9
//
// Initial variable locations:
//   v0.x <- vin.position.x; v0.y <- vin.position.y; v0.z <- vin.position.z; v0.w <- vin.position.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; v1.w <- vin.normal.w; 
//   v2.x <- vin.tangent.x; v2.y <- vin.tangent.y; v2.z <- vin.tangent.z; v2.w <- vin.tangent.w; 
//   v3.x <- vin.texcoord.x; v3.y <- vin.texcoord.y; 
//   v4.x <- vin.joints[0].x; v4.y <- vin.joints[0].y; v4.z <- vin.joints[0].z; v4.w <- vin.joints[0].w; 
//   v5.x <- vin.joints[1].x; v5.y <- vin.joints[1].y; v5.z <- vin.joints[1].z; v5.w <- vin.joints[1].w; 
//   v6.x <- vin.weights[0].x; v6.y <- vin.weights[0].y; v6.z <- vin.weights[0].z; v6.w <- vin.weights[0].w; 
//   v7.x <- vin.weights[1].x; v7.y <- vin.weights[1].y; v7.z <- vin.weights[1].z; v7.w <- vin.weights[1].w; 
//   o4.x <- <main return value>.texcoord.x; o4.y <- <main return value>.texcoord.y; 
//   o3.x <- <main return value>.wTangent.x; o3.y <- <main return value>.wTangent.y; o3.z <- <main return value>.wTangent.z; o3.w <- <main return value>.wTangent.w; 
//   o2.x <- <main return value>.wNormal.x; o2.y <- <main return value>.wNormal.y; o2.z <- <main return value>.wNormal.z; o2.w <- <main return value>.wNormal.w; 
//   o1.x <- <main return value>.wPosition.x; o1.y <- <main return value>.wPosition.y; o1.z <- <main return value>.wPosition.z; o1.w <- <main return value>.wPosition.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 51 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ElasticBuildsVS.hlsl"
mov r0.w, v2.w  // r0.w <- sigma

#line 54
mul r1.xyz, v0.xxxx, cb0[0].xyzx
mul r2.xyz, v0.yyyy, cb0[1].xyzx
add r1.xyz, r1.xyzx, r2.xyzx
mul r2.xyz, v0.zzzz, cb0[2].xyzx
add r1.xyz, r1.xyzx, r2.xyzx
mul r2.xyz, v0.wwww, cb0[3].xyzx
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- worldPos4.x; r1.y <- worldPos4.y; r1.z <- worldPos4.z

#line 55
mov r1.xyz, r1.xyzx  // r1.x <- worldPos.x; r1.y <- worldPos.y; r1.z <- worldPos.z

#line 58
max r1.w, cb6[3].y, l(0.000010)  // r1.w <- meshHeight

#line 59
mov r2.x, -cb6[0].y
add r2.x, r1.y, r2.x
div r1.w, r2.x, r1.w
max r1.w, r1.w, l(0.000000)
min r1.w, r1.w, l(1.000000)  // r1.w <- t

#line 62
nop 
mov r2.xyz, cb6[0].xyzx
mov r3.xyz, cb6[1].xyzx
mov r4.xyz, cb6[2].xyzx
mov r1.w, r1.w

#line 6
mov r2.w, -r1.w
add r2.w, r2.w, l(1.000000)  // r2.w <- u

#line 7
mul r3.w, r2.w, r2.w
mul r2.xyz, r2.xyzx, r3.wwww
itof r3.w, l(2)
mul r2.w, r2.w, r3.w
mul r2.w, r1.w, r2.w
mul r3.xyz, r3.xyzx, r2.wwww
add r2.xyz, r2.xyzx, r3.xyzx
mul r2.w, r1.w, r1.w
mul r3.xyz, r4.xyzx, r2.wwww
add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- <QuadricBezier return value>.x; r2.y <- <QuadricBezier return value>.y; r2.z <- <QuadricBezier return value>.z

#line 62
mov r2.xyz, r2.xyzx  // r2.x <- bezierPos.x; r2.y <- bezierPos.y; r2.z <- bezierPos.z

#line 63
nop 
mov r3.xyz, cb6[0].xyzx
mov r4.xyz, cb6[1].xyzx
mov r5.xyz, cb6[2].xyzx
mov r1.w, r1.w

#line 13
itof r6.xyz, l(2, 2, 2, 0)
itof r2.w, l(1)
mov r3.w, -r1.w
add r2.w, r2.w, r3.w
mov r3.xyz, -r3.xyzx
add r3.xyz, r3.xyzx, r4.xyzx
mul r3.xyz, r2.wwww, r3.xyzx
mov r4.xyz, -r4.xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r4.xyz, r1.wwww, r4.xyzx
add r3.xyz, r3.xyzx, r4.xyzx
mul r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- <QuadricBezierTangent return value>.x; r3.y <- <QuadricBezierTangent return value>.y; r3.z <- <QuadricBezierTangent return value>.z

#line 63
mov r3.xyz, r3.xyzx  // r3.x <- bezierTangentRaw.x; r3.y <- bezierTangentRaw.y; r3.z <- bezierTangentRaw.z

#line 64
nop 
mov r3.xyz, r3.xyzx
itof r4.xyz, l(0, 0, 1, 0)

#line 40
dp3 r1.w, r3.xyzx, r3.xyzx
sqrt r1.w, r1.w  // r1.w <- len

#line 41
lt r2.w, r1.w, l(0.000010)
if_nz r2.w

#line 43
  mov r4.xyz, r4.xyzx

#line 44
endif   // r4.x <- <SafeNormalize return value>.x; r4.y <- <SafeNormalize return value>.y; r4.z <- <SafeNormalize return value>.z

#line 45
if_z r2.w
  div r4.xyz, r3.xyzx, r1.wwww
endif 

#line 64
mov r4.xyz, r4.xyzx  // r4.x <- bezierTangent.x; r4.y <- bezierTangent.y; r4.z <- bezierTangent.z

#line 67
mov r1.w, -cb6[0].y
add r3.y, r1.w, r1.y
itof r3.xz, l(0, 0, 0, 0)
add r3.xyz, r3.xyzx, cb6[0].xyzx  // r3.x <- straightPos.x; r3.y <- straightPos.y; r3.z <- straightPos.z

#line 68
mov r3.xyz, -r3.xyzx
add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- localOffset.x; r1.y <- localOffset.y; r1.z <- localOffset.z

#line 71
itof r3.xyz, l(0, 1, 0, 0)  // r3.x <- up.x; r3.y <- up.y; r3.z <- up.z

#line 72
mul r5.xyz, r4.zxyz, r3.yzxy
mul r6.xyz, r4.yzxy, r3.zxyz
mov r6.xyz, -r6.xyzx
add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- rotAxisRaw.x; r5.y <- rotAxisRaw.y; r5.z <- rotAxisRaw.z

#line 73
dp3 r1.w, r5.xyzx, r5.xyzx
sqrt r1.w, r1.w  // r1.w <- axisLen

#line 76
mov r1.xyz, r1.xyzx  // r1.x <- rotatedOffset.x; r1.y <- rotatedOffset.y; r1.z <- rotatedOffset.z

#line 80
lt r2.w, l(0.000010), r1.w
if_nz r2.w

#line 83
  div r5.xyz, r5.xyzx, r1.wwww  // r5.x <- rotAxis.x; r5.y <- rotAxis.y; r5.z <- rotAxis.z

#line 85
  dp3 r1.w, r3.xyzx, r4.xyzx
  max r1.w, r1.w, l(-1.000000)
  min r1.w, r1.w, l(1.000000)  // r1.w <- cosAngle

#line 86
  mov r2.w, -r1.w
  max r3.x, r1.w, r2.w
  mov r3.y, -r3.x
  add r3.y, r3.y, l(1.000000)
  sqrt r3.y, r3.y
  mul r3.z, r3.x, l(-0.018729)
  add r3.z, r3.z, l(0.074261)
  mul r3.z, r3.x, r3.z
  add r3.z, r3.z, l(-0.212114)
  mul r3.x, r3.x, r3.z
  add r3.x, r3.x, l(1.570729)
  mul r3.x, r3.y, r3.x
  mul r3.y, r3.x, l(-2.000000)
  add r3.y, r3.y, l(3.141593)
  lt r2.w, r1.w, r2.w
  and r2.w, r2.w, r3.y
  add r2.w, r2.w, r3.x  // r2.w <- angle

#line 87
  mov r3.x, l(1.396263)  // r3.x <- maxAngle

#line 88
  mov r3.y, -r3.x
  max r2.w, r2.w, r3.y
  min r2.w, r3.x, r2.w  // r2.w <- angle

#line 89
  sincos r2.w, null, r2.w  // r2.w <- sinAngle

#line 103
  nop 
  mov r1.xyz, r1.xyzx
  mov r5.xyz, r5.xyzx
  mov r1.w, r1.w
  mov r2.w, r2.w

#line 26
  mul r3.xyz, r1.xyzx, r1.wwww
  mul r4.xyz, r1.zxyz, r5.yzxy
  mul r6.xyz, r1.yzxy, r5.zxyz
  mov r6.xyz, -r6.xyzx
  add r4.xyz, r4.xyzx, r6.xyzx
  mul r4.xyz, r2.wwww, r4.xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mov r3.w, -r1.w
  add r3.w, r3.w, l(1.000000)
  dp3 r4.x, r5.xyzx, r1.xyzx
  mul r3.w, r3.w, r4.x
  mul r4.xyz, r5.xyzx, r3.wwww
  add r1.xyz, r3.xyzx, r4.xyzx  // r1.x <- <RodriguesRotate return value>.x; r1.y <- <RodriguesRotate return value>.y; r1.z <- <RodriguesRotate return value>.z

#line 103
  mov r1.xyz, r1.xyzx  // r1.x <- rotatedOffset.x; r1.y <- rotatedOffset.y; r1.z <- rotatedOffset.z

#line 106
  mul r3.xyz, v1.xxxx, cb0[0].xyzx
  mul r4.xyz, v1.yyyy, cb0[1].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, v1.zzzz, cb0[2].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  dp3 r3.w, r3.xyzx, r3.xyzx
  rsq r3.w, r3.w
  mul r3.xyz, r3.wwww, r3.xyzx  // r3.x <- outNormal.x; r3.y <- outNormal.y; r3.z <- outNormal.z

#line 107
  mul r4.xyz, v2.xxxx, cb0[0].xyzx
  mul r6.xyz, v2.yyyy, cb0[1].xyzx
  add r4.xyz, r4.xyzx, r6.xyzx
  mul r6.xyz, v2.zzzz, cb0[2].xyzx
  add r4.xyz, r4.xyzx, r6.xyzx
  dp3 r3.w, r4.xyzx, r4.xyzx
  rsq r3.w, r3.w
  mul r4.xyz, r3.wwww, r4.xyzx  // r4.x <- outTangent.x; r4.y <- outTangent.y; r4.z <- outTangent.z

#line 111
  nop 
  mov r3.xyz, r3.xyzx

#line 26
  mul r6.xyz, r3.xyzx, r1.wwww
  mul r7.xyz, r3.zxyz, r5.yzxy
  mul r8.xyz, r3.yzxy, r5.zxyz
  mov r8.xyz, -r8.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx
  mul r7.xyz, r2.wwww, r7.xyzx
  add r6.xyz, r6.xyzx, r7.xyzx
  mov r3.w, -r1.w
  add r3.w, r3.w, l(1.000000)
  dp3 r3.x, r5.xyzx, r3.xyzx
  mul r3.x, r3.x, r3.w
  mul r3.xyz, r5.xyzx, r3.xxxx
  add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- <RodriguesRotate return value>.x; r3.y <- <RodriguesRotate return value>.y; r3.z <- <RodriguesRotate return value>.z

#line 111
  mov r3.xyz, r3.xyzx  // r3.x <- outNormal.x; r3.y <- outNormal.y; r3.z <- outNormal.z

#line 112
  nop 
  mov r4.xyz, r4.xyzx

#line 26
  mul r6.xyz, r4.xyzx, r1.wwww
  mul r7.xyz, r4.zxyz, r5.yzxy
  mul r8.xyz, r4.yzxy, r5.zxyz
  mov r8.xyz, -r8.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx
  mul r7.xyz, r2.wwww, r7.xyzx
  add r6.xyz, r6.xyzx, r7.xyzx
  mov r1.w, -r1.w
  add r1.w, r1.w, l(1.000000)
  dp3 r2.w, r5.xyzx, r4.xyzx
  mul r1.w, r1.w, r2.w
  mul r4.xyz, r5.xyzx, r1.wwww
  add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- <RodriguesRotate return value>.x; r4.y <- <RodriguesRotate return value>.y; r4.z <- <RodriguesRotate return value>.z

#line 112
  mov r4.xyz, r4.xyzx  // r4.x <- outTangent.x; r4.y <- outTangent.y; r4.z <- outTangent.z

#line 113
else   // Prior locations: r4.x <- bezierTangent.x; r4.y <- bezierTangent.y; r4.z <- bezierTangent.z; r1.x <- localOffset.x; r1.y <- localOffset.y; r1.z <- localOffset.z; r3.x <- up.x; r3.y <- up.y; r3.z <- up.z; r5.x <- rotAxisRaw.x; r5.y <- rotAxisRaw.y; r5.z <- rotAxisRaw.z; r1.w <- axisLen

#line 117
  dp3 r5.x, cb0[0].xyzx, v1.xyzx
  dp3 r5.y, cb0[1].xyzx, v1.xyzx
  dp3 r5.z, cb0[2].xyzx, v1.xyzx
  dp3 r1.w, r5.xyzx, r5.xyzx
  rsq r1.w, r1.w
  mul r3.xyz, r1.wwww, r5.xyzx  // r3.x <- outNormal.x; r3.y <- outNormal.y; r3.z <- outNormal.z

#line 118
  dp3 r5.x, cb0[0].xyzx, v2.xyzx
  dp3 r5.y, cb0[1].xyzx, v2.xyzx
  dp3 r5.z, cb0[2].xyzx, v2.xyzx
  dp3 r1.w, r5.xyzx, r5.xyzx
  rsq r1.w, r1.w
  mul r4.xyz, r1.wwww, r5.xyzx  // r4.x <- outTangent.x; r4.y <- outTangent.y; r4.z <- outTangent.z

#line 119
endif 

#line 122
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- deformedPos.x; r1.y <- deformedPos.y; r1.z <- deformedPos.z

#line 125
mov r1.xyz, r1.xyzx  // r1.x <- vout.wPosition.x; r1.y <- vout.wPosition.y; r1.z <- vout.wPosition.z
mov r1.w, l(1.000000)  // r1.w <- vout.wPosition.w

#line 126
mul r2.xyzw, r1.xxxx, cb4[0].xyzw
mul r5.xyzw, r1.yyyy, cb4[1].xyzw
add r2.xyzw, r2.xyzw, r5.xyzw
mul r5.xyzw, r1.zzzz, cb4[2].xyzw
add r2.xyzw, r2.xyzw, r5.xyzw
mul r5.xyzw, r1.wwww, cb4[3].xyzw
add r2.xyzw, r2.xyzw, r5.xyzw  // r2.x <- vout.position.x; r2.y <- vout.position.y; r2.z <- vout.position.z; r2.w <- vout.position.w

#line 128
nop 
mov r3.xyz, r3.xyzx
itof r5.xyz, l(0, 1, 0, 0)

#line 40
dp3 r3.w, r3.xyzx, r3.xyzx
sqrt r3.w, r3.w  // r3.w <- len

#line 41
lt r4.w, r3.w, l(0.000010)
if_nz r4.w

#line 43
  mov r5.xyz, r5.xyzx

#line 44
endif   // r5.x <- <SafeNormalize return value>.x; r5.y <- <SafeNormalize return value>.y; r5.z <- <SafeNormalize return value>.z

#line 45
if_z r4.w
  div r5.xyz, r3.xyzx, r3.wwww
endif 

#line 128
mov r5.w, l(0)
mov r5.xyzw, r5.xyzw  // r5.x <- vout.wNormal.x; r5.y <- vout.wNormal.y; r5.z <- vout.wNormal.z; r5.w <- vout.wNormal.w

#line 129
nop 
mov r4.xyz, r4.xyzx
itof r0.xyz, l(1, 0, 0, 0)

#line 40
dp3 r3.x, r4.xyzx, r4.xyzx
sqrt r3.x, r3.x  // r3.x <- len

#line 41
lt r3.y, r3.x, l(0.000010)
if_nz r3.y

#line 43
  mov r0.xyz, r0.xyzx

#line 44
endif   // r0.x <- <SafeNormalize return value>.x; r0.y <- <SafeNormalize return value>.y; r0.z <- <SafeNormalize return value>.z

#line 45
if_z r3.y
  div r0.xyz, r4.xyzx, r3.xxxx
endif 

#line 129
mov r0.xyz, r0.xyzx  // r0.x <- vout.wTangent.x; r0.y <- vout.wTangent.y; r0.z <- vout.wTangent.z
mov r0.w, r0.w  // r0.w <- vout.wTangent.w

#line 131
mov r3.xy, v3.xyxx  // r3.x <- vout.texcoord.x; r3.y <- vout.texcoord.y

#line 132
mov o0.xyzw, r2.xyzw
mov o1.xyzw, r1.xyzw
mov o2.xyzw, r5.xyzw
mov o3.xyzw, r0.xyzw
mov o4.xy, r3.xyxx
ret 
// Approximately 232 instruction slots used
