//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   bool enableSSAO;                   // Offset:    0 Size:     4 [unused]
//   float reflectionIntensity;         // Offset:    4 Size:     4 [unused]
//   float time;                        // Offset:    8 Size:     4
//   bool enableCascadedShadowMaps;     // Offset:   12 Size:     4 [unused]
//   bool enableSSR;                    // Offset:   16 Size:     4 [unused]
//   bool enableFog;                    // Offset:   20 Size:     4 [unused]
//   bool enableBloom;                  // Offset:   24 Size:     4 [unused]
//   float elapsedTime;                 // Offset:   28 Size:     4 [unused]
//
// }
//
// cbuffer COMPUTE_PARTICLE_COMMON_CONSTANT_BUFFER
// {
//
//   float deltaTime;                   // Offset:    0 Size:     4 [unused]
//   uint2 textureSplitCount;           // Offset:    4 Size:     8 [unused]
//   uint systemNumParticles;           // Offset:   12 Size:     4 [unused]
//   uint totalEmitCount;               // Offset:   16 Size:     4
//   uint maxEmitParticles;             // Offset:   20 Size:     4 [unused]
//   uint2 commonDummy;                 // Offset:   24 Size:     8 [unused]
//
// }
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64 [unused]
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4
//   bool hasTangent;                   // Offset:   84 Size:     4 [unused]
//   int skin;                          // Offset:   88 Size:     4 [unused]
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64 [unused]
//
// }
//
// Resource bind info for materials
// {
//
//   struct MaterialConstants
//   {
//       
//       float3 emissiveFactor;         // Offset:    0
//       int alphaMode;                 // Offset:   12
//       float alphaCutoff;             // Offset:   16
//       bool doubleSided;              // Offset:   20
//       
//       struct PbrMetallicRoughness
//       {
//           
//           float4 baseColorFactor;    // Offset:   24
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   40
//               int texcoord;          // Offset:   44
//
//           } basecolorTexture;        // Offset:   40
//           float metallicFactor;      // Offset:   48
//           float roughnessFactor;     // Offset:   52
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   56
//               int texcoord;          // Offset:   60
//
//           } metallicRoughnessTexture;// Offset:   56
//
//       } pbrMetallicRoughness;        // Offset:   24
//       
//       struct NormalTextureInfo
//       {
//           
//           int index;                 // Offset:   64
//           int texcoord;              // Offset:   68
//           float scale;               // Offset:   72
//
//       } normalTexture;               // Offset:   64
//       
//       struct OcclusionTextureInfo
//       {
//           
//           int index;                 // Offset:   76
//           int texcoord;              // Offset:   80
//           float strength;            // Offset:   84
//
//       } occlusionTexture;            // Offset:   76
//       
//       struct TextureInfo
//       {
//           
//           int index;                 // Offset:   88
//           int texcoord;              // Offset:   92
//
//       } emissiveTexture;             // Offset:   88
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
// Resource bind info for emitParticleBuffer
// {
//
//   struct EmitParticleData
//   {
//       
//       float4 parameter;              // Offset:    0
//       float4 position;               // Offset:   16
//       float4 rotation;               // Offset:   32
//       float4 scale;                  // Offset:   48
//       float4 velocity;               // Offset:   64
//       float4 acceleration;           // Offset:   80
//       float4 color;                  // Offset:   96
//       float4 customData;             // Offset:  112
//
//   } $Element;                        // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerStates[2]                  sampler      NA          NA             s2      1 
// materials                         texture  struct         r/o             t0      1 
// materialTextures[0]               texture  float4          2d             t1      1 
// emitParticleBuffer                    UAV  struct         r/w             u0      1 
// indirectDataBuffer                    UAV    byte         r/w             u1      1 
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
// COMPUTE_PARTICLE_COMMON_CONSTANT_BUFFER    cbuffer      NA          NA           cb10      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float       
// TEXCOORD                 0   xy          4     NONE   float   xy  
// SV_IsFrontFace           0   x           5    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB10[2], immediateIndexed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_sampler s2, mode_default
dcl_resource_structured t0, 96
dcl_resource_texture2d (float,float,float,float) t1
dcl_uav_structured u0, 128
dcl_uav_raw u1
dcl_input_ps linear v1.xyz
dcl_input_ps linear v4.xy
dcl_temps 3
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r0.xyzw, cb0[5].x, l(24), t0.xyzw
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r1.x, cb0[5].x, l(40), t0.xxxx
ilt r1.x, l(-1), r1.x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v4.xyxx, t1.xyzw, s2
  log r2.xyz, r1.xyzx
  mul r2.xyz, r2.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
  exp r1.xyz, r2.xyzx
  mul r0.xyzw, r0.xyzw, r1.xyzw
endif 
imm_atomic_iadd r1.x, u1, l(40), l(1)
iadd r1.x, r1.x, cb10[1].x
dp2 r1.y, cb1[0].zzzz, l(12.989800, 78.233002, 0.000000, 0.000000)
sincos r1.y, null, r1.y
mul r1.y, r1.y, l(43758.546875)
frc r1.y, r1.y
mad r2.y, r1.y, l(2.000000), l(1.000000)
mov r2.xw, l(12.000000,0,0,1.000000)
store_structured u0.xy, r1.x, l(0), r2.xyxx
mov r2.xyz, v1.xyzx
store_structured u0.xyzw, r1.x, l(16), r2.xyzw
store_structured u0.xyzw, r1.x, l(32), l(0,0,0,1.000000)
store_structured u0.xyz, r1.x, l(48), l(0.100000,0.100000,0.100000,0)
store_structured u0.xyzw, r1.x, l(64), l(0,0,0,0)
store_structured u0.xyzw, r1.x, l(80), l(0,0.100000,0,0)
store_structured u0.xyzw, r1.x, l(96), r0.xyzw
ret 
// Approximately 27 instruction slots used
