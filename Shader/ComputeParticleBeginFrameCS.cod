//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer COMPUTE_PARTICLE_COMMON_CONSTANT_BUFFER
// {
//
//   float deltaTime;                   // Offset:    0 Size:     4 [unused]
//   uint2 textureSplitCount;           // Offset:    4 Size:     8 [unused]
//   uint systemNumParticles;           // Offset:   12 Size:     4
//   uint totalEmitCount;               // Offset:   16 Size:     4
//   uint maxEmitParticles;             // Offset:   20 Size:     4
//   uint2 commonDummy;                 // Offset:   24 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// indirectDataBuffer                    UAV    byte         r/w             u2      1 
// COMPUTE_PARTICLE_COMMON_CONSTANT_BUFFER    cbuffer      NA          NA           cb10      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB10[2], immediateIndexed
dcl_uav_raw u2
dcl_temps 4
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- dispatchThreadId.x; vThreadID.y <- dispatchThreadId.y; vThreadID.z <- dispatchThreadId.z
//
#line 4 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ComputeParticle.hlsli"
mov r0.x, l(1024)  // r0.x <- NumParticleThread

#line 51
mov r0.y, l(0)  // r0.y <- IndirectArgumentsNumCurrentParticle

#line 52
mov r0.z, l(4)  // r0.z <- IndirectArgumentsNumPreviousParticle

#line 53
mov r0.w, l(8)  // r0.w <- IndirectArgumentsNumDeadParticle

#line 54
mov r1.x, l(12)  // r1.x <- IndirectArgumentsNumEmitParticleDispatchIndirect

#line 64
mov r1.y, l(24)  // r1.y <- IndirectArgumentsUpdateParticleDispatchIndirect

#line 65
mov r1.z, l(36)  // r1.z <- IndirectArgumentsNumEmitParticleIndex

#line 66
mov r1.w, l(40)  // r1.w <- IndirectArgumentsNumEmitPixelParticleIndex

#line 10 "C:\Users\2240225\Desktop\graphicEngine4\Shader\ComputeParticleBeginFrameCS.hlsl"
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.x, r0.y, u2.xxxx
mov r2.x, r2.x  // r2.x <- previousNumParticle

#line 12
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.y, r1.w, u2.xxxx
iadd r2.y, r2.y, cb10[1].x  // r2.y <- numEmitParticle

#line 13
store_raw u2.x, r1.w, l(0)

#line 14
umin r1.w, r2.y, cb10[1].y  // r1.w <- numEmitParticle

#line 16
iadd r1.w, r1.w, r2.x  // r1.w <- currentNumParticle

#line 19
umin r1.w, r1.w, cb10[0].w

#line 22
store_raw u2.x, r0.y, r1.w

#line 23
store_raw u2.x, r0.z, r2.x

#line 26
store_raw u2.x, r0.w, l(0)

#line 30
ineg r0.y, r2.x
iadd r3.x, r0.y, r1.w  // r3.x <- emitDispatch.x

#line 31
mov r3.y, l(1)  // r3.y <- emitDispatch.y

#line 32
mov r3.z, l(1)  // r3.z <- emitDispatch.z

#line 33
store_raw u2.xyz, r1.x, r3.xyzx

#line 38
store_raw u2.x, r1.z, r2.x

#line 42
mov r0.y, l(1023)
iadd r0.y, r0.y, r1.w
udiv r0.x, null, r0.y, r0.x  // r0.x <- updateDispatch.x

#line 43
mov r0.y, l(1)  // r0.y <- updateDispatch.y

#line 44
mov r0.z, l(1)  // r0.z <- updateDispatch.z

#line 45
store_raw u2.xyz, r1.y, r0.xyzx

#line 46
ret 
// Approximately 32 instruction slots used
