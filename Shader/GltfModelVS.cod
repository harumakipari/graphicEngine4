//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64
//   float4 cpuColor;                   // Offset:   64 Size:    16 [unused]
//   int material;                      // Offset:   80 Size:     4 [unused]
//   bool hasTangent;                   // Offset:   84 Size:     4 [unused]
//   int skin;                          // Offset:   88 Size:     4
//   float dissolveValue;               // Offset:   92 Size:     4 [unused]
//   float emission;                    // Offset:   96 Size:     4 [unused]
//   float3 pads;                       // Offset:  100 Size:    12 [unused]
//   row_major float4x4 invWorld;       // Offset:  112 Size:    64 [unused]
//
// }
//
// cbuffer VIEW_CONSTANTS_BUFFER
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 cameraPositon;              // Offset:   64 Size:    16 [unused]
//   row_major float4x4 view;           // Offset:   80 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset:  144 Size:    64 [unused]
//   row_major float4x4 inverseProjection;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 inverseViewProjection;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 invView;        // Offset:  336 Size:    64 [unused]
//
// }
//
// cbuffer PRIMITIVE_JOINT_CONSTANTS
// {
//
//   row_major float4x4 jointMatrices[512];// Offset:    0 Size: 32768
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// PRIMITIVE_JOINT_CONSTANTS         cbuffer      NA          NA            cb2      1 
// VIEW_CONSTANTS_BUFFER             cbuffer      NA          NA            cb4      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// JOINTS                   0   xyzw        4     NONE    uint   xyzw
// JOINTS                   1   xyzw        5     NONE    uint   xyzw
// WEIGHTS                  0   xyzw        6     NONE   float   xyzw
// WEIGHTS                  1   xyzw        7     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_constantbuffer CB4[4], immediateIndexed
dcl_constantbuffer CB2[2048], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xy
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_input v7.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xy
dcl_temps 12
ilt r0.x, l(-1), cb0[5].z
if_nz r0.x
  ishl r0.xyzw, v4.xyzw, l(2, 2, 2, 2)
  mul r1.xyzw, v6.xxxx, cb2[r0.x + 0].xyzw
  mul r2.xyzw, v6.xxxx, cb2[r0.x + 1].xyzw
  mul r3.xyzw, v6.xxxx, cb2[r0.x + 2].xywz
  mul r4.xyw, v6.xxxx, cb2[r0.x + 3].xyxz
  mul r5.xyzw, v6.yyyy, cb2[r0.y + 0].xyzw
  mul r6.xyzw, v6.yyyy, cb2[r0.y + 1].xyzw
  mul r7.xyzw, v6.yyyy, cb2[r0.y + 2].xywz
  mul r8.xyw, v6.yyyy, cb2[r0.y + 3].xyxz
  mov r9.x, r1.x
  mov r9.y, r2.x
  mov r9.z, r3.x
  mov r9.w, r4.x
  mov r10.x, r5.x
  mov r10.y, r6.x
  mov r10.z, r7.x
  mov r10.w, r8.x
  add r9.xyzw, r9.xyzw, r10.xyzw
  mov r10.x, r1.y
  mov r10.y, r2.y
  mov r10.z, r3.y
  mov r10.w, r4.y
  mov r11.x, r5.y
  mov r11.y, r6.y
  mov r11.z, r7.y
  mov r11.w, r8.y
  add r10.xyzw, r10.xyzw, r11.xyzw
  mov r4.x, r1.z
  mov r4.y, r2.z
  mov r4.z, r3.w
  mov r8.x, r5.z
  mov r8.y, r6.z
  mov r8.z, r7.w
  add r4.xyzw, r4.xyzw, r8.xyzw
  mov r3.x, r1.w
  mov r3.y, r2.w
  mov r7.x, r5.w
  mov r7.y, r6.w
  add r1.xyz, r3.xyzx, r7.xyzx
  mul r2.xyzw, v6.zzzz, cb2[r0.z + 0].xyzw
  mul r3.xyzw, v6.zzzz, cb2[r0.z + 1].xyzw
  mul r5.xyzw, v6.zzzz, cb2[r0.z + 2].xywz
  mul r6.xyw, v6.zzzz, cb2[r0.z + 3].xyxz
  mov r7.x, r2.x
  mov r7.y, r3.x
  mov r7.z, r5.x
  mov r7.w, r6.x
  add r7.xyzw, r7.xyzw, r9.xyzw
  mov r8.x, r2.y
  mov r8.y, r3.y
  mov r8.z, r5.y
  mov r8.w, r6.y
  add r8.xyzw, r8.xyzw, r10.xyzw
  mov r6.x, r2.z
  mov r6.y, r3.z
  mov r6.z, r5.w
  add r4.xyzw, r4.xyzw, r6.xyzw
  mov r5.x, r2.w
  mov r5.y, r3.w
  add r0.xyz, r1.xyzx, r5.xyzx
  mul r1.xyzw, v6.wwww, cb2[r0.w + 0].xyzw
  mul r2.xyzw, v6.wwww, cb2[r0.w + 1].xyzw
  mul r3.xyzw, v6.wwww, cb2[r0.w + 2].xywz
  mul r5.xyw, v6.wwww, cb2[r0.w + 3].xyxz
  mov r6.x, r1.x
  mov r6.y, r2.x
  mov r6.z, r3.x
  mov r6.w, r5.x
  add r6.xyzw, r6.xyzw, r7.xyzw
  mov r7.x, r1.y
  mov r7.y, r2.y
  mov r7.z, r3.y
  mov r7.w, r5.y
  add r7.xyzw, r7.xyzw, r8.xyzw
  mov r5.x, r1.z
  mov r5.y, r2.z
  mov r5.z, r3.w
  add r4.xyzw, r4.xyzw, r5.xyzw
  mov r3.x, r1.w
  mov r3.y, r2.w
  add r0.xyz, r0.xyzx, r3.xyzx
  ishl r1.xyzw, v5.xyzw, l(2, 2, 2, 2)
  mul r2.xyzw, v7.xxxx, cb2[r1.x + 0].xyzw
  mul r3.xyzw, v7.xxxx, cb2[r1.x + 1].xyzw
  mul r5.xyzw, v7.xxxx, cb2[r1.x + 2].xywz
  mul r8.xyw, v7.xxxx, cb2[r1.x + 3].xyxz
  mov r9.x, r2.x
  mov r9.y, r3.x
  mov r9.z, r5.x
  mov r9.w, r8.x
  add r6.xyzw, r6.xyzw, r9.xyzw
  mov r9.x, r2.y
  mov r9.y, r3.y
  mov r9.z, r5.y
  mov r9.w, r8.y
  add r7.xyzw, r7.xyzw, r9.xyzw
  mov r8.x, r2.z
  mov r8.y, r3.z
  mov r8.z, r5.w
  add r4.xyzw, r4.xyzw, r8.xyzw
  mov r5.x, r2.w
  mov r5.y, r3.w
  add r0.xyz, r0.xyzx, r5.xyzx
  mul r2.xyzw, v7.yyyy, cb2[r1.y + 0].xyzw
  mul r3.xyzw, v7.yyyy, cb2[r1.y + 1].xyzw
  mul r5.xyzw, v7.yyyy, cb2[r1.y + 2].xywz
  mul r8.xyw, v7.yyyy, cb2[r1.y + 3].xyxz
  mov r9.x, r2.x
  mov r9.y, r3.x
  mov r9.z, r5.x
  mov r9.w, r8.x
  add r6.xyzw, r6.xyzw, r9.xyzw
  mov r9.x, r2.y
  mov r9.y, r3.y
  mov r9.z, r5.y
  mov r9.w, r8.y
  add r7.xyzw, r7.xyzw, r9.xyzw
  mov r8.x, r2.z
  mov r8.y, r3.z
  mov r8.z, r5.w
  add r4.xyzw, r4.xyzw, r8.xyzw
  mov r5.x, r2.w
  mov r5.y, r3.w
  add r0.xyz, r0.xyzx, r5.xyzx
  mul r2.xyzw, v7.zzzz, cb2[r1.z + 0].xyzw
  mul r3.xyzw, v7.zzzz, cb2[r1.z + 1].xyzw
  mul r5.xyzw, v7.zzzz, cb2[r1.z + 2].xywz
  mul r8.xyw, v7.zzzz, cb2[r1.z + 3].xyxz
  mov r9.x, r2.x
  mov r9.y, r3.x
  mov r9.z, r5.x
  mov r9.w, r8.x
  add r6.xyzw, r6.xyzw, r9.xyzw
  mov r9.x, r2.y
  mov r9.y, r3.y
  mov r9.z, r5.y
  mov r9.w, r8.y
  add r7.xyzw, r7.xyzw, r9.xyzw
  mov r8.x, r2.z
  mov r8.y, r3.z
  mov r8.z, r5.w
  add r4.xyzw, r4.xyzw, r8.xyzw
  mov r5.x, r2.w
  mov r5.y, r3.w
  add r0.xyz, r0.xyzx, r5.xyzx
  mul r2.xyzw, v7.wwww, cb2[r1.w + 0].xyzw
  mul r3.xyzw, v7.wwww, cb2[r1.w + 1].xyzw
  mul r5.xyzw, v7.wwww, cb2[r1.w + 2].xywz
  mul r1.xyw, v7.wwww, cb2[r1.w + 3].xyxz
  mov r8.x, r2.x
  mov r8.y, r3.x
  mov r8.z, r5.x
  mov r8.w, r1.x
  add r6.xyzw, r6.xyzw, r8.xyzw
  mov r8.x, r2.y
  mov r8.y, r3.y
  mov r8.z, r5.y
  mov r8.w, r1.y
  add r7.xyzw, r7.xyzw, r8.xyzw
  mov r1.x, r2.z
  mov r1.y, r3.z
  mov r1.z, r5.w
  add r1.xyzw, r1.xyzw, r4.xyzw
  mov r5.x, r2.w
  mov r5.y, r3.w
  add r0.xyz, r0.xyzx, r5.xyzx
  mov r2.xyz, v0.xyzx
  mov r2.w, l(1.000000)
  dp4 r0.w, r2.xyzw, r6.xyzw
  dp4 r3.x, r2.xyzw, r7.xyzw
  dp4 r1.w, r2.xyzw, r1.xyzw
  dp3 r2.x, v1.xyzx, r6.xyzx
  dp3 r2.y, v1.xyzx, r7.xyzx
  dp3 r2.z, v1.xyzx, r1.xyzx
  dp3 r2.w, v1.xyzx, r0.xyzx
  dp4 r2.w, r2.xyzw, r2.xyzw
  rsq r2.w, r2.w
  mul r2.xyz, r2.wwww, r2.xyzx
  dp3 r4.x, v2.xyzx, r6.xyzx
  dp3 r4.y, v2.xyzx, r7.xyzx
  dp3 r4.z, v2.xyzx, r1.xyzx
  dp3 r4.w, v2.xyzx, r0.xyzx
  dp4 r0.x, r4.xyzw, r4.xyzw
  rsq r0.x, r0.x
  mul r0.xyz, r0.xxxx, r4.xyzx
else 
  mov r0.w, v0.x
  mov r3.x, v0.y
  mov r1.w, v0.z
  mov r2.xyz, v1.xyzx
  mov r0.xyz, v2.xyzx
endif 
mul r4.xyzw, cb0[0].yyyy, cb4[1].xyzw
mad r4.xyzw, cb0[0].xxxx, cb4[0].xyzw, r4.xyzw
mad r4.xyzw, cb0[0].zzzz, cb4[2].xyzw, r4.xyzw
mad r4.xyzw, cb0[0].wwww, cb4[3].xyzw, r4.xyzw
mul r5.xyzw, cb0[1].yyyy, cb4[1].xyzw
mad r5.xyzw, cb0[1].xxxx, cb4[0].xyzw, r5.xyzw
mad r5.xyzw, cb0[1].zzzz, cb4[2].xyzw, r5.xyzw
mad r5.xyzw, cb0[1].wwww, cb4[3].xyzw, r5.xyzw
mul r6.xyzw, cb0[2].yyyy, cb4[1].xyzw
mad r6.xyzw, cb0[2].xxxx, cb4[0].xyzw, r6.xyzw
mad r6.xyzw, cb0[2].zzzz, cb4[2].xyzw, r6.xyzw
mad r6.xyzw, cb0[2].wwww, cb4[3].xyzw, r6.xyzw
mul r7.xyzw, cb0[3].yyyy, cb4[1].xyzw
mad r7.xyzw, cb0[3].xxxx, cb4[0].xyzw, r7.xyzw
mad r7.xyzw, cb0[3].zzzz, cb4[2].xyzw, r7.xyzw
mad r7.xyzw, cb0[3].wwww, cb4[3].xyzw, r7.xyzw
mul r5.xyzw, r3.xxxx, r5.xyzw
mad r4.xyzw, r0.wwww, r4.xyzw, r5.xyzw
mad r4.xyzw, r1.wwww, r6.xyzw, r4.xyzw
add o0.xyzw, r7.xyzw, r4.xyzw
mul r3.xyzw, r3.xxxx, cb0[1].xyzw
mad r3.xyzw, r0.wwww, cb0[0].xyzw, r3.xyzw
mad r1.xyzw, r1.wwww, cb0[2].xyzw, r3.xyzw
add o1.xyzw, r1.xyzw, cb0[3].xyzw
mul r1.xyzw, r2.yyyy, cb0[1].xyzw
mad r1.xyzw, r2.xxxx, cb0[0].xyzw, r1.xyzw
mad r1.xyzw, r2.zzzz, cb0[2].xyzw, r1.xyzw
dp4 r0.w, r1.xyzw, r1.xyzw
rsq r0.w, r0.w
mul o2.xyzw, r0.wwww, r1.xyzw
mul r1.xyzw, r0.yyyy, cb0[1].xyzw
mad r1.xyzw, r0.xxxx, cb0[0].xyzw, r1.xyzw
mad r0.xyzw, r0.zzzz, cb0[2].xyzw, r1.xyzw
dp4 r0.w, r0.xyzw, r0.xyzw
rsq r0.w, r0.w
mul o3.xyz, r0.wwww, r0.xyzx
mov o3.w, v2.w
mov o4.xy, v3.xyxx
ret 
// Approximately 233 instruction slots used
